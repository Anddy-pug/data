From: <Saved by Blink>
Snapshot-Content-Location: https://clang.llvm.org/docs/UsersManual.html#a-note-about-crtfastmath-o
Subject: =?utf-8?Q?Clang=20Compiler=20User=E2=80=99s=20Manual=20=E2=80=94=20Clang?=
 =?utf-8?Q?=2021.0.0git=20documentation?=
Date: Mon, 9 Jun 2025 16:41:09 -0700
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----"


------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----
Content-Type: text/html
Content-ID: <frame-6242BB4914AB810A4D002C2DC401CBDE@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/UsersManual.html#a-note-about-crtfastmath-o

<!DOCTYPE html><html lang=3D"en" data-content_root=3D"./"><head><meta http-=
equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=3D"=
stylesheet" type=3D"text/css" href=3D"cid:css-40d8e674-9d40-4913-ad4f-8e607=
a28f2cb@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"c=
id:css-7dc4df03-360c-4433-85c1-0300686c25a6@mhtml.blink" />
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0"><meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-sc=
ale=3D1">

    <title>Clang Compiler User=E2=80=99s Manual =E2=80=94 Clang 21.0.0git d=
ocumentation</title>
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://clang.llvm.o=
rg/docs/_static/pygments.css?v=3D649a27d8">
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://clang.llvm.o=
rg/docs/_static/haiku.css?v=3De491ac2d">
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://clang.llvm.o=
rg/docs/_static/graphviz.css?v=3Deafc0fe6">
   =20
   =20
   =20
    <link rel=3D"index" title=3D"Index" href=3D"https://clang.llvm.org/docs=
/genindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://clang.llvm.org/do=
cs/search.html">
    <link rel=3D"next" title=3D"Assembling a Complete Toolchain" href=3D"ht=
tps://clang.llvm.org/docs/Toolchain.html">
    <link rel=3D"prev" title=3D"Clang 21.0.0git (In-Progress) Release Notes=
" href=3D"https://clang.llvm.org/docs/ReleaseNotes.html">=20
  </head><body>
      <div class=3D"header" role=3D"banner"><h1 class=3D"heading"><a href=
=3D"https://clang.llvm.org/docs/index.html">
          <span>Clang 21.0.0git documentation</span></a></h1>
        <h2 class=3D"heading"><span>Clang Compiler User=E2=80=99s Manual</s=
pan></h2>
      </div>
      <div class=3D"topnav" role=3D"navigation" aria-label=3D"top navigatio=
n">
     =20
        <p>
        =C2=AB&nbsp;&nbsp;<a href=3D"https://clang.llvm.org/docs/ReleaseNot=
es.html">Clang 21.0.0git (In-Progress)  Release Notes</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a class=3D"uplink" href=3D"https://clang.llvm.org/docs/index.html"=
>Contents</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a href=3D"https://clang.llvm.org/docs/Toolchain.html">Assembling a=
 Complete Toolchain</a>&nbsp;&nbsp;=C2=BB
        </p>

      </div>
      <div class=3D"content" role=3D"main">
       =20
       =20
  <section id=3D"clang-compiler-user-s-manual">
<h1>Clang Compiler User=E2=80=99s Manual<a class=3D"headerlink" href=3D"htt=
ps://clang.llvm.org/docs/UsersManual.html#clang-compiler-user-s-manual" tit=
le=3D"Link to this heading">=C2=B6</a></h1>
<nav class=3D"contents local" id=3D"contents">
<ul class=3D"simple">
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#introduction" id=3D"id16">Introduction</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#terminology" id=3D"id17">Terminology</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#basic-usage" id=3D"id18">Basic Usage</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#command-line-options" id=3D"id19">Command Line Options</a>=
</p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#options-to-control-error-and-warning-messages" id=3D"id20"=
>Options to Control Error and Warning Messages</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#formatting-of-diagnostics" id=3D"id21">Formatting of Diagn=
ostics</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#individual-warning-groups" id=3D"id22">Individual Warning =
Groups</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#options-to-control-clang-crash-diagnostics" id=3D"id23">Op=
tions to Control Clang Crash Diagnostics</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#options-to-emit-optimization-reports" id=3D"id24">Options =
to Emit Optimization Reports</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#current-limitations" id=3D"id25">Current limitations</a></=
p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#options-to-emit-resource-consumption-reports" id=3D"id26">=
Options to Emit Resource Consumption Reports</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#other-options" id=3D"id27">Other Options</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#configuration-files" id=3D"id28">Configuration files</a></=
p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#language-and-target-independent-features" id=3D"id29">Lang=
uage and Target-Independent Features</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#freestanding-builds" id=3D"id30">Freestanding Builds</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-errors-and-warnings" id=3D"id31">Controlling E=
rrors and Warnings</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-how-clang-displays-diagnostics" id=3D"id32">Co=
ntrolling How Clang Displays Diagnostics</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#diagnostic-mappings" id=3D"id33">Diagnostic Mappings</a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#diagnostic-categories" id=3D"id34">Diagnostic Categories</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-diagnostics-via-command-line-flags" id=3D"id35=
">Controlling Diagnostics via Command Line Flags</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-diagnostics-via-pragmas" id=3D"id36">Controlli=
ng Diagnostics via Pragmas</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-diagnostics-in-system-headers" id=3D"id37">Con=
trolling Diagnostics in System Headers</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-deprecation-diagnostics-in-clang-provided-c-ru=
ntime-headers" id=3D"id38">Controlling Deprecation Diagnostics in Clang-Pro=
vided C Runtime Headers</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#enabling-all-diagnostics" id=3D"id39">Enabling All Diagnos=
tics</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-diagnostics-via-suppression-mappings" id=3D"id=
40">Controlling Diagnostics via Suppression Mappings</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-static-analyzer-diagnostics" id=3D"id41">Contr=
olling Static Analyzer Diagnostics</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#precompiled-headers" id=3D"id42">Precompiled Headers</a></=
p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#generating-a-pch-file" id=3D"id43">Generating a PCH File</=
a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#using-a-pch-file" id=3D"id44">Using a PCH File</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#relocatable-pch-files" id=3D"id45">Relocatable PCH Files</=
a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-floating-point-behavior" id=3D"id46">Controlli=
ng Floating Point Behavior</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#accessing-the-floating-point-environment" id=3D"id47">Acce=
ssing the floating point environment</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#a-note-about-crtfastmath-o" id=3D"id48">A note about <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">crtfastmath.o</=
span></code></a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#a-note-about-flt-eval-method" id=3D"id49">A note about <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">__FLT_EVAL_ME=
THOD__</span></code></a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#a-note-about-floating-point-constant-evaluation" id=3D"id5=
0">A note about Floating Point Constant Evaluation</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-code-generation" id=3D"id51">Controlling Code =
Generation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#strict-aliasing" id=3D"id52">Strict Aliasing</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#profile-guided-optimization" id=3D"id53">Profile Guided Op=
timization</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#differences-between-sampling-and-instrumentation" id=3D"id=
54">Differences Between Sampling and Instrumentation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#using-sampling-profilers" id=3D"id55">Using Sampling Profi=
lers</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#sample-profile-formats" id=3D"id56">Sample Profile Formats=
</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#sample-profile-text-format" id=3D"id57">Sample Profile Tex=
t Format</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#profiling-with-instrumentation" id=3D"id58">Profiling with=
 Instrumentation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#fine-tuning-profile-collection" id=3D"id59">Fine Tuning Pr=
ofile Collection</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#disabling-instrumentation" id=3D"id60">Disabling Instrumen=
tation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#instrumenting-only-selected-files-or-functions" id=3D"id61=
">Instrumenting only selected files or functions</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#older-prefixes" id=3D"id62">Older Prefixes</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#instrument-function-groups" id=3D"id63">Instrument functio=
n groups</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#profile-remapping" id=3D"id64">Profile remapping</a></p></=
li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#gcov-based-profiling" id=3D"id65">GCOV-based Profiling</a>=
</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-debug-information" id=3D"id66">Controlling Deb=
ug Information</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-size-of-debug-information" id=3D"id67">Control=
ling Size of Debug Information</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-macro-debug-info-generation" id=3D"id68">Contr=
olling Macro Debug Info Generation</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-debugger-tuning" id=3D"id69">Controlling Debug=
ger =E2=80=9CTuning=E2=80=9D</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-llvm-ir-output" id=3D"id70">Controlling LLVM I=
R Output</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-value-names-in-llvm-ir" id=3D"id71">Controllin=
g Value Names in LLVM IR</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#comment-parsing-options" id=3D"id72">Comment Parsing Optio=
ns</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#ccc-override-options" id=3D"id73">CCC_OVERRIDE_OPTIONS</a>=
</p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#c-language-features" id=3D"id74">C Language Features</a></=
p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#extensions-supported-by-clang" id=3D"id75">Extensions supp=
orted by clang</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#differences-between-various-standard-modes" id=3D"id76">Di=
fferences between various standard modes</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#gcc-extensions-not-implemented-yet" id=3D"id77">GCC extens=
ions not implemented yet</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#intentionally-unsupported-gcc-extensions" id=3D"id78">Inte=
ntionally unsupported GCC extensions</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#microsoft-extensions" id=3D"id79">Microsoft extensions</a>=
</p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cxx" id=3D"id80">C++ Language Features</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-implementation-limits" id=3D"id81">Controlling=
 implementation limits</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#objective-c-language-features" id=3D"id82">Objective-C Lan=
guage Features</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#objcxx" id=3D"id83">Objective-C++ Language Features</a></p=
></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#openmp-features" id=3D"id84">OpenMP Features</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#id10" id=3D"id85">Controlling implementation limits</a></p=
></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-features" id=3D"id86">OpenCL Features</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-specific-options" id=3D"id87">OpenCL Specific Optio=
ns</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-targets" id=3D"id88">OpenCL Targets</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#specific-targets" id=3D"id89">Specific Targets</a></p></li=
>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#generic-targets" id=3D"id90">Generic Targets</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-header" id=3D"id91">OpenCL Header</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-extensions" id=3D"id92">OpenCL Extensions</a></p></=
li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-specific-attributes" id=3D"id93">OpenCL-Specific At=
tributes</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#nosvm" id=3D"id94">nosvm</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl-unroll-hint" id=3D"id95">opencl_unroll_hint</a></p>=
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#convergent" id=3D"id96">convergent</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#noduplicate" id=3D"id97">noduplicate</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#c-for-opencl" id=3D"id98">C++ for OpenCL</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#constructing-and-destroying-global-objects" id=3D"id99">Co=
nstructing and destroying global objects</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#libraries" id=3D"id100">Libraries</a></p></li>
</ul>
</li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#target-specific-features-and-limitations" id=3D"id101">Tar=
get-Specific Features and Limitations</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cpu-architectures-features-and-limitations" id=3D"id102">C=
PU Architectures Features and Limitations</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#x86" id=3D"id103">X86</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#arm" id=3D"id104">ARM</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#powerpc" id=3D"id105">PowerPC</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#other-platforms" id=3D"id106">Other platforms</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#operating-system-features-and-limitations" id=3D"id107">Op=
erating System Features and Limitations</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#windows" id=3D"id108">Windows</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cygwin" id=3D"id109">Cygwin</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#mingw32" id=3D"id110">MinGW32</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#mingw-w64" id=3D"id111">MinGW-w64</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#aix" id=3D"id112">AIX</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#toc-data-transformation" id=3D"id113">TOC Data Transformat=
ion</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#default-visibility-export-mapping" id=3D"id114">Default Vi=
sibility Export Mapping</a></p></li>
</ul>
</li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#spir-v-support" id=3D"id115">SPIR-V support</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#clang-cl" id=3D"id116">clang-cl</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#id13" id=3D"id117">Command-Line Options</a></p>
<ul>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#the-clang-option" id=3D"id118">The /clang: Option</a></p><=
/li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#the-zc-dllexportinlines-option" id=3D"id119">The /Zc:dllex=
portInlines- Option</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#finding-clang-runtime-libraries" id=3D"id120">Finding Clan=
g runtime libraries</a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#windows-system-headers-and-library-lookup" id=3D"id121">Wi=
ndows System Headers and Library Lookup</a></p></li>
</ul>
</li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#restrictions-and-limitations-compared-to-clang" id=3D"id12=
2">Restrictions and Limitations compared to Clang</a></p></li>
</ul>
</li>
</ul>
</nav>
<section id=3D"introduction">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id16" role=3D"doc-backlink">Introduction</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/UsersManual.html#introduction" title=3D=
"Link to this heading">=C2=B6</a></h2>
<p>The Clang Compiler is an open-source compiler for the C family of
programming languages, aiming to be the best in class implementation of
these languages. Clang builds on the LLVM optimizer and code generator,
allowing it to provide high-quality optimization and code generation
support for many targets. For more general information, please see the
<a class=3D"reference external" href=3D"https://clang.llvm.org/">Clang Web =
Site</a> or the <a class=3D"reference external" href=3D"https://llvm.org/">=
LLVM Web
Site</a>.</p>
<p>This document describes important notes about using Clang as a compiler
for an end-user, documenting the supported features, command line
options, etc. If you are interested in using Clang to build a tool that
processes code, please see <a class=3D"reference internal" href=3D"https://=
clang.llvm.org/docs/InternalsManual.html"><span class=3D"doc">=E2=80=9CClan=
g=E2=80=9D CFE Internals Manual</span></a>. If you are interested in the
<a class=3D"reference external" href=3D"https://clang-analyzer.llvm.org/">C=
lang Static Analyzer</a>, please see its web
page.</p>
<p>Clang is one component in a complete toolchain for C family languages.
A separate document describes the other pieces necessary to
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Toolcha=
in.html"><span class=3D"doc">assemble a complete toolchain</span></a>.</p>
<p>Clang is designed to support the C family of programming languages,
which includes <a class=3D"reference internal" href=3D"https://clang.llvm.o=
rg/docs/UsersManual.html#c"><span class=3D"std std-ref">C</span></a>, <a cl=
ass=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersManual.=
html#objc"><span class=3D"std std-ref">Objective-C</span></a>, <a class=3D"=
reference internal" href=3D"https://clang.llvm.org/docs/UsersManual.html#cx=
x"><span class=3D"std std-ref">C++</span></a>, and
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#objcxx"><span class=3D"std std-ref">Objective-C++</span></a> as w=
ell as many dialects of those. For
language-specific information, please see the corresponding language
specific section:</p>
<ul class=3D"simple">
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#c"><span class=3D"std std-ref">C Language</span></a>: K&am=
p;R C, ANSI C89, ISO C90, ISO C94 (C89+AMD1), ISO
C99 (+TC1, TC2, TC3).</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#objc"><span class=3D"std std-ref">Objective-C Language</sp=
an></a>: ObjC 1, ObjC 2, ObjC 2.1, plus
variants depending on base language.</p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cxx"><span class=3D"std std-ref">C++ Language</span></a></=
p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#objcxx"><span class=3D"std std-ref">Objective C++ Language=
</span></a></p></li>
<li><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#opencl"><span class=3D"std std-ref">OpenCL Kernel Language=
</span></a>: OpenCL C 1.0, 1.1, 1.2, 2.0, 3.0,
and C++ for OpenCL 1.0 and 2021.</p></li>
</ul>
<p>In addition to these base languages and their dialects, Clang supports a
broad variety of language extensions, which are documented in the
corresponding language section. These extensions are provided to be
compatible with the GCC, Microsoft, and other popular compilers as well
as to improve functionality through Clang-specific features. The Clang
driver and language features are intentionally designed to be as
compatible with the GNU GCC compiler as reasonably possible, easing
migration from GCC to Clang. In most cases, code =E2=80=9Cjust works=E2=80=
=9D.
Clang also provides an alternative driver, <a class=3D"reference internal" =
href=3D"https://clang.llvm.org/docs/UsersManual.html#clang-cl"><span class=
=3D"std std-ref">clang-cl</span></a>, that is designed
to be compatible with the Visual C++ compiler, cl.exe.</p>
<p>In addition to language specific features, Clang has a variety of
features that depend on what CPU architecture or operating system is
being compiled for. Please see the <a class=3D"reference internal" href=3D"=
https://clang.llvm.org/docs/UsersManual.html#target-features"><span class=
=3D"std std-ref">Target-Specific Features and
Limitations</span></a> section for more details.</p>
<p>The rest of the introduction introduces some basic <a class=3D"reference=
 internal" href=3D"https://clang.llvm.org/docs/UsersManual.html#terminology=
"><span class=3D"std std-ref">compiler
terminology</span></a> that is used throughout this manual and
contains a basic <a class=3D"reference internal" href=3D"https://clang.llvm=
.org/docs/UsersManual.html#basicusage"><span class=3D"std std-ref">introduc=
tion to using Clang</span></a> as a
command line compiler.</p>
<section id=3D"terminology">
<span id=3D"id1"></span><h3><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id17" role=3D"doc-backlink">Terminology</a><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html=
#terminology" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Front end, parser, backend, preprocessor, undefined behavior,
diagnostic, optimizer</p>
</section>
<section id=3D"basic-usage">
<span id=3D"basicusage"></span><h3><a class=3D"toc-backref" href=3D"https:/=
/clang.llvm.org/docs/UsersManual.html#id18" role=3D"doc-backlink">Basic Usa=
ge</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#basic-usage" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Intro to how to use a C compiler for newbies.</p>
<p>compile + link compile then link debug info enabling optimizations
picking a language to use, defaults to C17 by default. Autosenses based
on extension. using a makefile</p>
</section>
</section>
<section id=3D"command-line-options">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id19" role=3D"doc-backlink">Command Line Options</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#command-line-o=
ptions" title=3D"Link to this heading">=C2=B6</a></h2>
<p>This section is generally an index into other sections. It does not go
into depth on the ones that are covered by other sections. However, the
first part introduces the language selection and other high level
options like <a class=3D"reference internal" href=3D"https://clang.llvm.org=
/docs/CommandGuide/clang.html#cmdoption-c"><code class=3D"xref std std-opti=
on docutils literal notranslate"><span class=3D"pre">-c</span></code></a>, =
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Command=
Guide/clang.html#cmdoption-g"><code class=3D"xref std std-option docutils l=
iteral notranslate"><span class=3D"pre">-g</span></code></a>, etc.</p>
<section id=3D"options-to-control-error-and-warning-messages">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id20" role=3D"doc-backlink">Options to Control Error and Warning Mes=
sages</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#options-to-control-error-and-warning-messages" title=3D"Link to =
this heading">=C2=B6</a></h3>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Werror">
<span class=3D"sig-name descname"><span class=3D"pre">-Werror</span></span>=
<span class=3D"sig-prename descclassname"></span><a class=3D"headerlink" hr=
ef=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Werror" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Turn warnings into errors.</p>
</dd></dl>

<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-Werror=
=3Dfoo</span></code></p>
<blockquote>
<div><p>Turn warning =E2=80=9Cfoo=E2=80=9D into an error.</p>
</div></blockquote>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wno-error">
<span class=3D"sig-name descname"><span class=3D"pre">-Wno-error</span></sp=
an><span class=3D"sig-prename descclassname"><span class=3D"pre">=3Dfoo</sp=
an></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Users=
Manual.html#cmdoption-Wno-error" title=3D"Link to this definition">=C2=B6</=
a></dt>
<dd><p>Turn warning =E2=80=9Cfoo=E2=80=9D into a warning even if <a class=
=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersManual.htm=
l#cmdoption-Werror"><code class=3D"xref std std-option docutils literal not=
ranslate"><span class=3D"pre">-Werror</span></code></a> is specified.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wfoo">
<span class=3D"sig-name descname"><span class=3D"pre">-Wfoo</span></span><s=
pan class=3D"sig-prename descclassname"></span><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Wfoo" title=3D"L=
ink to this definition">=C2=B6</a></dt>
<dd><p>Enable warning =E2=80=9Cfoo=E2=80=9D.
See the <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs=
/DiagnosticsReference.html"><span class=3D"doc">diagnostics reference</span=
></a> for a complete
list of the warning flags that can be specified in this way.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wno-foo">
<span class=3D"sig-name descname"><span class=3D"pre">-Wno-foo</span></span=
><span class=3D"sig-prename descclassname"></span><a class=3D"headerlink" h=
ref=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Wno-foo" titl=
e=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Disable warning =E2=80=9Cfoo=E2=80=9D.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-w">
<span class=3D"sig-name descname"><span class=3D"pre">-w</span></span><span=
 class=3D"sig-prename descclassname"></span><a class=3D"headerlink" href=3D=
"https://clang.llvm.org/docs/UsersManual.html#cmdoption-w" title=3D"Link to=
 this definition">=C2=B6</a></dt>
<dd><p>Disable all diagnostics.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Weverything">
<span class=3D"sig-name descname"><span class=3D"pre">-Weverything</span></=
span><span class=3D"sig-prename descclassname"></span><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Weverythi=
ng" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#diagnostics-enable-everything"><span class=3D"std std-ref"=
>Enable all diagnostics.</span></a></p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-pedantic">
<span class=3D"sig-name descname"><span class=3D"pre">-pedantic</span></spa=
n><span class=3D"sig-prename descclassname"></span><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-pedantic" ti=
tle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Warn on language extensions.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-pedantic-errors">
<span class=3D"sig-name descname"><span class=3D"pre">-pedantic-errors</spa=
n></span><span class=3D"sig-prename descclassname"></span><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-pedan=
tic-errors" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Error on language extensions.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wsystem-headers">
<span class=3D"sig-name descname"><span class=3D"pre">-Wsystem-headers</spa=
n></span><span class=3D"sig-prename descclassname"></span><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Wsyst=
em-headers" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable warnings from system headers.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ferror-limit">
<span class=3D"sig-name descname"><span class=3D"pre">-ferror-limit</span><=
/span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D123<=
/span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Us=
ersManual.html#cmdoption-ferror-limit" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Stop emitting diagnostics after 123 errors have been produced. The d=
efault is
20, and the error limit can be disabled with <cite>-ferror-limit=3D0</cite>=
.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ftemplate-backtrace-limit"=
>
<span class=3D"sig-name descname"><span class=3D"pre">-ftemplate-backtrace-=
limit</span></span><span class=3D"sig-prename descclassname"><span class=3D=
"pre">=3D123</span></span><a class=3D"headerlink" href=3D"https://clang.llv=
m.org/docs/UsersManual.html#cmdoption-ftemplate-backtrace-limit" title=3D"L=
ink to this definition">=C2=B6</a></dt>
<dd><p>Only emit up to 123 template instantiation notes within the template
instantiation backtrace for a single warning or error. The default is 10, a=
nd
the limit can be disabled with <cite>-ftemplate-backtrace-limit=3D0</cite>.=
</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-warning-suppression-mappin=
gs">
<span class=3D"sig-name descname"><span class=3D"pre">--warning-suppression=
-mappings</span></span><span class=3D"sig-prename descclassname"><span clas=
s=3D"pre">=3Dfoo.txt</span></span><a class=3D"headerlink" href=3D"https://c=
lang.llvm.org/docs/UsersManual.html#cmdoption-warning-suppression-mappings"=
 title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#warning-suppression-mappings"><span class=3D"std std-ref">=
Suppress certain diagnostics for certain files.</span></a></p>
</dd></dl>

<section id=3D"formatting-of-diagnostics">
<span id=3D"cl-diag-formatting"></span><h4><a class=3D"toc-backref" href=3D=
"https://clang.llvm.org/docs/UsersManual.html#id21" role=3D"doc-backlink">F=
ormatting of Diagnostics</a><a class=3D"headerlink" href=3D"https://clang.l=
lvm.org/docs/UsersManual.html#formatting-of-diagnostics" title=3D"Link to t=
his heading">=C2=B6</a></h4>
<p>Clang aims to produce beautiful diagnostics by default, particularly for
new users that first come to Clang. However, different people have
different preferences, and sometimes Clang is driven not by a human,
but by a program that wants consistent and easily parsable output. For
these cases, Clang provides a wide range of options to control the exact
output format of the diagnostics that it generates.</p>
<dl class=3D"std option" id=3D"opt-fshow-column">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-show-column">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]show-column</s=
pan></span><span class=3D"sig-prename descclassname"></span><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-n=
o-show-column" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Print column number in diagnostic.</p>
<p>This option, which defaults to on, controls whether or not Clang
prints the column number of a diagnostic. For example, when this is
enabled, Clang will print something like:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">28</span><s=
pan class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</spa=
n> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=
=3D"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</s=
pan> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=
=3D"c1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
       <span class=3D"o">//</span>
</pre></div>
</div>
<p>When this is disabled, Clang will print =E2=80=9Ctest.c:28: warning=E2=
=80=A6=E2=80=9D with
no column number.</p>
<p>The printed column numbers count bytes from the beginning of the
line; take care if your source contains multibyte characters.</p>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fshow-source-location">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-show-source-location"=
>
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]show-source-lo=
cation</span></span><span class=3D"sig-prename descclassname"></span><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdo=
ption-f-no-show-source-location" title=3D"Link to this definition">=C2=B6</=
a></dt>
<dd><p>Print source file/line/column information in diagnostic.</p>
<p>This option, which defaults to on, controls whether or not Clang
prints the filename, line number and column number of a diagnostic.
For example, when this is enabled, Clang will print something like:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">28</span><s=
pan class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</spa=
n> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=
=3D"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</s=
pan> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=
=3D"c1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
       <span class=3D"o">//</span>
</pre></div>
</div>
<p>When this is disabled, Clang will not print the =E2=80=9Ctest.c:28:8: =
=E2=80=9D
part.</p>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fcaret-diagnostics">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-caret-diagnostics">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]caret-diagnost=
ics</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-f-no-caret-diagnostics" title=3D"Link to this definition">=C2=B6</a></d=
t>
<dd><p>Print source line and ranges from source code in diagnostic.
This option, which defaults to on, controls whether or not Clang
prints the source line, source ranges, and caret when emitting a
diagnostic. For example, when this is enabled, Clang will print
something like:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">28</span><s=
pan class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</spa=
n> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=
=3D"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</s=
pan> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=
=3D"c1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
       <span class=3D"o">//</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-color-diagnostics">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]color-diagnost=
ics</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-f-no-color-diagnostics" title=3D"Link to this definition">=C2=B6</a></d=
t>
<dd><p>This option, which defaults to on when a color-capable terminal is
detected, controls whether or not Clang prints diagnostics in color.</p>
<p>When this option is enabled, Clang will use colors to highlight
specific parts of the diagnostic, e.g.,</p>
<pre>  <b><span style=3D"color:black">test.c:28:8: <span style=3D"color:mag=
enta">warning</span>: extra tokens at end of #endif directive [-Wextra-toke=
ns]</span></b>
  #endif bad
         <span style=3D"color:green">^</span>
         <span style=3D"color:green">//</span>
</pre><p>When this is disabled, Clang will just print:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">2</span><sp=
an class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</span=
> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=3D=
"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</span=
> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=3D"c=
1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
       <span class=3D"o">//</span>
</pre></div>
</div>
<p>If the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
NO_COLOR</span></code> environment variable is defined and not empty
(regardless of value), color diagnostics are disabled. If <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">NO_COLOR</span></code> is
defined and <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fcolor-diagnostics</span></code> is passed on the command line, Clang
will honor the command line argument.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fansi-escape-codes">
<span class=3D"sig-name descname"><span class=3D"pre">-fansi-escape-codes</=
span></span><span class=3D"sig-prename descclassname"></span><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fa=
nsi-escape-codes" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Controls whether ANSI escape codes are used instead of the Windows C=
onsole
API to output colored diagnostics. This option is only used on Windows and
defaults to off.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-format">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-format<=
/span></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3Dclang/msvc/vi</span></span><a class=3D"headerlink" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#cmdoption-fdiagnostics-format" title=3D"Lin=
k to this definition">=C2=B6</a></dt>
<dd><p>Changes diagnostic output format to better match IDEs and command li=
ne tools.</p>
<p>This option controls the output format of the filename, line number,
and column printed in diagnostic messages. The options, and their
affect on formatting a simple conversion diagnostic, follow:</p>
<dl>
<dt><strong>clang</strong> (default)</dt><dd><div class=3D"highlight-defaul=
t notranslate"><div class=3D"highlight"><pre><span></span><span class=3D"n"=
>t</span><span class=3D"o">.</span><span class=3D"n">c</span><span class=3D=
"p">:</span><span class=3D"mi">3</span><span class=3D"p">:</span><span clas=
s=3D"mi">11</span><span class=3D"p">:</span> <span class=3D"n">warning</spa=
n><span class=3D"p">:</span> <span class=3D"n">conversion</span> <span clas=
s=3D"n">specifies</span> <span class=3D"nb">type</span> <span class=3D"s1">=
'char *'</span> <span class=3D"n">but</span> <span class=3D"n">the</span> <=
span class=3D"n">argument</span> <span class=3D"n">has</span> <span class=
=3D"nb">type</span> <span class=3D"s1">'int'</span>
</pre></div>
</div>
</dd>
<dt><strong>msvc</strong></dt><dd><div class=3D"highlight-default notransla=
te"><div class=3D"highlight"><pre><span></span><span class=3D"n">t</span><s=
pan class=3D"o">.</span><span class=3D"n">c</span><span class=3D"p">(</span=
><span class=3D"mi">3</span><span class=3D"p">,</span><span class=3D"mi">11=
</span><span class=3D"p">)</span> <span class=3D"p">:</span> <span class=3D=
"n">warning</span><span class=3D"p">:</span> <span class=3D"n">conversion</=
span> <span class=3D"n">specifies</span> <span class=3D"nb">type</span> <sp=
an class=3D"s1">'char *'</span> <span class=3D"n">but</span> <span class=3D=
"n">the</span> <span class=3D"n">argument</span> <span class=3D"n">has</spa=
n> <span class=3D"nb">type</span> <span class=3D"s1">'int'</span>
</pre></div>
</div>
</dd>
<dt><strong>vi</strong></dt><dd><div class=3D"highlight-default notranslate=
"><div class=3D"highlight"><pre><span></span><span class=3D"n">t</span><spa=
n class=3D"o">.</span><span class=3D"n">c</span> <span class=3D"o">+</span>=
<span class=3D"mi">3</span><span class=3D"p">:</span><span class=3D"mi">11<=
/span><span class=3D"p">:</span> <span class=3D"n">warning</span><span clas=
s=3D"p">:</span> <span class=3D"n">conversion</span> <span class=3D"n">spec=
ifies</span> <span class=3D"nb">type</span> <span class=3D"s1">'char *'</sp=
an> <span class=3D"n">but</span> <span class=3D"n">the</span> <span class=
=3D"n">argument</span> <span class=3D"n">has</span> <span class=3D"nb">type=
</span> <span class=3D"s1">'int'</span>
</pre></div>
</div>
</dd>
</dl>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fdiagnostics-show-option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-diagnostics-show-opti=
on">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]diagnostics-sh=
ow-option</span></span><span class=3D"sig-prename descclassname"></span><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#c=
mdoption-f-no-diagnostics-show-option" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Enable <code class=3D"docutils literal notranslate"><span class=3D"p=
re">[-Woption]</span></code> information in diagnostic line.</p>
<p>This option, which defaults to on, controls whether or not Clang
prints the associated <a class=3D"reference internal" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#cl-diag-warning-groups"><span class=3D"std =
std-ref">warning group</span></a>
option name when outputting a warning diagnostic. For example, in
this output:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">28</span><s=
pan class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</spa=
n> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=
=3D"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</s=
pan> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=
=3D"c1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
       <span class=3D"o">//</span>
</pre></div>
</div>
<p>Passing <strong>-fno-diagnostics-show-option</strong> will prevent Clang=
 from
printing the [<a class=3D"reference internal" href=3D"https://clang.llvm.or=
g/docs/UsersManual.html#cmdoption-Wextra-tokens"><code class=3D"xref std st=
d-option docutils literal notranslate"><span class=3D"pre">-Wextra-tokens</=
span></code></a>] information in
the diagnostic. This information tells you the flag needed to enable
or disable the diagnostic, either from the command line or through
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#pragma-gcc-diagnostic"><span class=3D"std std-ref">#pragma GCC di=
agnostic</span></a>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-show-category=
">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-show-ca=
tegory</span></span><span class=3D"sig-prename descclassname"><span class=
=3D"pre">=3Dnone/id/name</span></span><a class=3D"headerlink" href=3D"https=
://clang.llvm.org/docs/UsersManual.html#cmdoption-fdiagnostics-show-categor=
y" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable printing category information in diagnostic line.</p>
<p>This option, which defaults to =E2=80=9Cnone=E2=80=9D, controls whether =
or not Clang
prints the category associated with a diagnostic when emitting it.
Each diagnostic may or many not have an associated category, if it
has one, it is listed in the diagnostic categorization field of the
diagnostic line (in the []=E2=80=99s).</p>
<p>For example, a format string warning will produce these three
renditions based on the setting of this option:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">t</span><span class=3D"o">.</span><span clas=
s=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">3</span><span =
class=3D"p">:</span><span class=3D"mi">11</span><span class=3D"p">:</span> =
<span class=3D"n">warning</span><span class=3D"p">:</span> <span class=3D"n=
">conversion</span> <span class=3D"n">specifies</span> <span class=3D"nb">t=
ype</span> <span class=3D"s1">'char *'</span> <span class=3D"n">but</span> =
<span class=3D"n">the</span> <span class=3D"n">argument</span> <span class=
=3D"n">has</span> <span class=3D"nb">type</span> <span class=3D"s1">'int'</=
span> <span class=3D"p">[</span><span class=3D"o">-</span><span class=3D"n"=
>Wformat</span><span class=3D"p">]</span>
<span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">c</sp=
an><span class=3D"p">:</span><span class=3D"mi">3</span><span class=3D"p">:=
</span><span class=3D"mi">11</span><span class=3D"p">:</span> <span class=
=3D"n">warning</span><span class=3D"p">:</span> <span class=3D"n">conversio=
n</span> <span class=3D"n">specifies</span> <span class=3D"nb">type</span> =
<span class=3D"s1">'char *'</span> <span class=3D"n">but</span> <span class=
=3D"n">the</span> <span class=3D"n">argument</span> <span class=3D"n">has</=
span> <span class=3D"nb">type</span> <span class=3D"s1">'int'</span> <span =
class=3D"p">[</span><span class=3D"o">-</span><span class=3D"n">Wformat</sp=
an><span class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"p">]=
</span>
<span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">c</sp=
an><span class=3D"p">:</span><span class=3D"mi">3</span><span class=3D"p">:=
</span><span class=3D"mi">11</span><span class=3D"p">:</span> <span class=
=3D"n">warning</span><span class=3D"p">:</span> <span class=3D"n">conversio=
n</span> <span class=3D"n">specifies</span> <span class=3D"nb">type</span> =
<span class=3D"s1">'char *'</span> <span class=3D"n">but</span> <span class=
=3D"n">the</span> <span class=3D"n">argument</span> <span class=3D"n">has</=
span> <span class=3D"nb">type</span> <span class=3D"s1">'int'</span> <span =
class=3D"p">[</span><span class=3D"o">-</span><span class=3D"n">Wformat</sp=
an><span class=3D"p">,</span><span class=3D"n">Format</span> <span class=3D=
"n">String</span><span class=3D"p">]</span>
</pre></div>
</div>
<p>This category can be used by clients that want to group diagnostics
by category, so it should be a high level category. We want dozens
of these, not hundreds or thousands of them.</p>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fsave-optimization-record">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-save-optimization-rec=
ord">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]save-optimizat=
ion-record</span></span><span class=3D"sig-prename descclassname"><span cla=
ss=3D"pre">[=3D&lt;format&gt;]</span></span><a class=3D"headerlink" href=3D=
"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no-save-optimizat=
ion-record" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable optimization remarks during compilation and write them to a s=
eparate
file.</p>
<p>This option, which defaults to off, controls whether Clang writes
optimization reports to a separate file. By recording diagnostics in a file=
,
users can parse or sort the remarks in a convenient way.</p>
<p>By default, the serialization format is YAML.</p>
<p>The supported serialization formats are:</p>
<ul class=3D"simple">
<li><p id=3D"opt-fsave-optimization-record-yaml"><code class=3D"docutils li=
teral notranslate"><span class=3D"pre">-fsave-optimization-record=3Dyaml</s=
pan></code>: A structured YAML format.</p>
</li>
<li><p id=3D"opt-fsave-optimization-record-bitstream"><code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">-fsave-optimization-record=3Dbi=
tstream</span></code>: A binary format based on LLVM
Bitstream.</p>
</li>
</ul>
<p>The output file is controlled by <a class=3D"reference internal" href=3D=
"https://clang.llvm.org/docs/UsersManual.html#cmdoption-foptimization-recor=
d-file"><code class=3D"xref std std-option docutils literal notranslate"><s=
pan class=3D"pre">-foptimization-record-file</span></code></a>.</p>
<p>In the absence of an explicit output file, the file is chosen using the
following scheme:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;bas=
e&gt;.opt.&lt;format&gt;</span></code></p>
<p>where <code class=3D"docutils literal notranslate"><span class=3D"pre">&=
lt;base&gt;</span></code> is based on the output file of the compilation (w=
hether
it=E2=80=99s explicitly specified through <cite>-o</cite> or not) when used=
 with <cite>-c</cite> or <cite>-S</cite>.
For example:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng</span> <span class=3D"pre">-fsave-optimization-record</span> <span class=
=3D"pre">-c</span> <span class=3D"pre">in.c</span> <span class=3D"pre">-o</=
span> <span class=3D"pre">out.o</span></code> will generate
<code class=3D"docutils literal notranslate"><span class=3D"pre">out.opt.ya=
ml</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng</span> <span class=3D"pre">-fsave-optimization-record</span> <span class=
=3D"pre">-c</span> <span class=3D"pre">in.c</span></code> will generate
<code class=3D"docutils literal notranslate"><span class=3D"pre">in.opt.yam=
l</span></code></p></li>
</ul>
<p>When targeting (Thin)LTO, the base is derived from the output filename, =
and
the extension is not dropped.</p>
<p>When targeting ThinLTO, the following scheme is used:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;bas=
e&gt;.opt.&lt;format&gt;.thin.&lt;num&gt;.&lt;format&gt;</span></code></p>
<p>Darwin-only: when used for generating a linked binary from a source file
(through an intermediate object file), the driver will invoke <cite>cc1</ci=
te> to
generate a temporary object file. The temporary remark file will be emitted
next to the object file, which will then be picked up by <cite>dsymutil</ci=
te> and
emitted in the .dSYM bundle. This is available for all formats except YAML.=
</p>
<p>For example:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">clang</=
span> <span class=3D"pre">-fsave-optimization-record=3Dbitstream</span> <sp=
an class=3D"pre">in.c</span> <span class=3D"pre">-o</span> <span class=3D"p=
re">out</span></code> will generate</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">/va=
r/folders/43/9y164hh52tv_2nrdxrj31nyw0000gn/T/a-9be59b.o</span></code></p><=
/li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">/va=
r/folders/43/9y164hh52tv_2nrdxrj31nyw0000gn/T/a-9be59b.opt.bitstream</span>=
</code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">out=
</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">out=
.dSYM/Contents/Resources/Remarks/out</span></code></p></li>
</ul>
<p>Darwin-only: compiling for multiple architectures will use the following
scheme:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;bas=
e&gt;-&lt;arch&gt;.opt.&lt;format&gt;</span></code></p>
<p>Note that this is incompatible with passing the
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#cmdoption-foptimization-record-file"><code class=3D"xref std std-=
option docutils literal notranslate"><span class=3D"pre">-foptimization-rec=
ord-file</span></code></a> option.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-foptimization-record-file"=
>
<span class=3D"sig-name descname"><span class=3D"pre">-foptimization-record=
-file</span></span><span class=3D"sig-prename descclassname"></span><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdop=
tion-foptimization-record-file" title=3D"Link to this definition">=C2=B6</a=
></dt>
<dd><p>Control the file to which optimization reports are written. This imp=
lies
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#opt-fsave-optimization-record"><span class=3D"std std-ref">-fsave=
-optimization-record</span></a>.</p>
<blockquote>
<div><p>On Darwin platforms, this is incompatible with passing multiple
<code class=3D"docutils literal notranslate"><span class=3D"pre">-arch</spa=
n> <span class=3D"pre">&lt;arch&gt;</span></code> options.</p>
</div></blockquote>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-foptimization-record-passe=
s">
<span class=3D"sig-name descname"><span class=3D"pre">-foptimization-record=
-passes</span></span><span class=3D"sig-prename descclassname"></span><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmd=
option-foptimization-record-passes" title=3D"Link to this definition">=C2=
=B6</a></dt>
<dd><p>Only include passes which match a specified regular expression.</p>
<p>When optimization reports are being output (see
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#opt-fsave-optimization-record"><span class=3D"std std-ref">-fsave=
-optimization-record</span></a>), this
option controls the passes that will be included in the final report.</p>
<p>If this option is not used, all the passes are included in the optimizat=
ion
record.</p>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fdiagnostics-show-hotness">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-diagnostics-show-hotn=
ess">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]diagnostics-sh=
ow-hotness</span></span><span class=3D"sig-prename descclassname"></span><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
cmdoption-f-no-diagnostics-show-hotness" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Enable profile hotness information in diagnostic line.</p>
<p>This option controls whether Clang prints the profile hotness associated
with diagnostics in the presence of profile-guided optimization information=
.
This is currently supported with optimization remarks (see
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#rpass"><span class=3D"std std-ref">Options to Emit Optimization R=
eports</span></a>). The hotness information
allows users to focus on the hot optimization remarks that are likely to be
more relevant for run-time performance.</p>
<p>For example, in this output, the block containing the callsite of <cite>=
foo</cite> was
executed 3000 times according to the profile data:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">s</span><span class=3D"o">.</span><span clas=
s=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">7</span><span =
class=3D"p">:</span><span class=3D"mi">10</span><span class=3D"p">:</span> =
<span class=3D"n">remark</span><span class=3D"p">:</span> <span class=3D"n"=
>foo</span> <span class=3D"n">inlined</span> <span class=3D"n">into</span> =
<span class=3D"n">bar</span> <span class=3D"p">(</span><span class=3D"n">ho=
tness</span><span class=3D"p">:</span> <span class=3D"mi">3000</span><span =
class=3D"p">)</span> <span class=3D"p">[</span><span class=3D"o">-</span><s=
pan class=3D"n">Rpass</span><span class=3D"o">-</span><span class=3D"n">ana=
lysis</span><span class=3D"o">=3D</span><span class=3D"n">inline</span><spa=
n class=3D"p">]</span>
  <span class=3D"nb">sum</span> <span class=3D"o">+=3D</span> <span class=
=3D"n">foo</span><span class=3D"p">(</span><span class=3D"n">x</span><span =
class=3D"p">,</span> <span class=3D"n">x</span> <span class=3D"o">-</span> =
<span class=3D"mi">2</span><span class=3D"p">);</span>
         <span class=3D"o">^</span>
</pre></div>
</div>
<p>This option is implied when
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#opt-fsave-optimization-record"><span class=3D"std std-ref">-fsave=
-optimization-record</span></a> is used.
Otherwise, it defaults to off.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-hotness-thres=
hold">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-hotness=
-threshold</span></span><span class=3D"sig-prename descclassname"></span><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
cmdoption-fdiagnostics-hotness-threshold" title=3D"Link to this definition"=
>=C2=B6</a></dt>
<dd><p>Prevent optimization remarks from being output if they do not have a=
t least
this hotness value.</p>
<p>This option, which defaults to zero, controls the minimum hotness an
optimization remark would need in order to be output by Clang. This is
currently supported with optimization remarks (see <a class=3D"reference in=
ternal" href=3D"https://clang.llvm.org/docs/UsersManual.html#rpass"><span c=
lass=3D"std std-ref">Options to Emit
Optimization Reports</span></a>) when profile hotness information in
diagnostics is enabled (see
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#opt-fdiagnostics-show-hotness"><span class=3D"std std-ref">-fdiag=
nostics-show-hotness</span></a>).</p>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fdiagnostics-fixit-info">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-diagnostics-fixit-inf=
o">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]diagnostics-fi=
xit-info</span></span><span class=3D"sig-prename descclassname"></span><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cm=
doption-f-no-diagnostics-fixit-info" title=3D"Link to this definition">=C2=
=B6</a></dt>
<dd><p>Enable =E2=80=9CFixIt=E2=80=9D information in the diagnostics output=
.</p>
<p>This option, which defaults to on, controls whether or not Clang
prints the information on how to fix a specific diagnostic
underneath it when it knows. For example, in this output:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">28</span><s=
pan class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</spa=
n> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=
=3D"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</s=
pan> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=
=3D"c1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
       <span class=3D"o">//</span>
</pre></div>
</div>
<p>Passing <strong>-fno-diagnostics-fixit-info</strong> will prevent Clang =
from
printing the =E2=80=9C//=E2=80=9D line at the end of the message. This info=
rmation
is useful for users who may not understand what is wrong, but can be
confusing for machine parsing.</p>
</dd></dl>

<dl class=3D"std option" id=3D"opt-fdiagnostics-print-source-range-info">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-print-source-=
range-info">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-print-s=
ource-range-info</span></span><span class=3D"sig-prename descclassname"></s=
pan><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual=
.html#cmdoption-fdiagnostics-print-source-range-info" title=3D"Link to this=
 definition">=C2=B6</a></dt>
<dd><p>Print machine parsable information about source ranges.
This option makes Clang print information about source ranges in a machine
parsable format after the file/line/column number information. The
information is a simple sequence of brace enclosed ranges, where each range
lists the start and end line/column locations. For example, in this output:=
</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">exprs</span><span class=3D"o">.</span><span =
class=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">47</span><=
span class=3D"p">:</span><span class=3D"mi">15</span><span class=3D"p">:{</=
span><span class=3D"mi">47</span><span class=3D"p">:</span><span class=3D"m=
i">8</span><span class=3D"o">-</span><span class=3D"mi">47</span><span clas=
s=3D"p">:</span><span class=3D"mi">14</span><span class=3D"p">}{</span><spa=
n class=3D"mi">47</span><span class=3D"p">:</span><span class=3D"mi">17</sp=
an><span class=3D"o">-</span><span class=3D"mi">47</span><span class=3D"p">=
:</span><span class=3D"mi">24</span><span class=3D"p">}:</span> <span class=
=3D"n">error</span><span class=3D"p">:</span> <span class=3D"n">invalid</sp=
an> <span class=3D"n">operands</span> <span class=3D"n">to</span> <span cla=
ss=3D"n">binary</span> <span class=3D"n">expression</span> <span class=3D"p=
">(</span><span class=3D"s1">'int *'</span> <span class=3D"ow">and</span> <=
span class=3D"s1">'_Complex float'</span><span class=3D"p">)</span>
   <span class=3D"n">P</span> <span class=3D"o">=3D</span> <span class=3D"p=
">(</span><span class=3D"n">P</span><span class=3D"o">-</span><span class=
=3D"mi">42</span><span class=3D"p">)</span> <span class=3D"o">+</span> <spa=
n class=3D"n">Gamma</span><span class=3D"o">*</span><span class=3D"mi">4</s=
pan><span class=3D"p">;</span>
       <span class=3D"o">~~~~~~</span> <span class=3D"o">^</span> <span cla=
ss=3D"o">~~~~~~~</span>
</pre></div>
</div>
<p>The {}=E2=80=99s are generated by -fdiagnostics-print-source-range-info.=
</p>
<p>The printed column numbers count bytes from the beginning of the
line; take care if your source contains multibyte characters.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-parseable-fix=
its">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-parseab=
le-fixits</span></span><span class=3D"sig-prename descclassname"></span><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#c=
mdoption-fdiagnostics-parseable-fixits" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Print Fix-Its in a machine parseable form.</p>
<p>This option makes Clang print available Fix-Its in a machine
parseable format at the end of diagnostics. The following example
illustrates the format:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">fix</span><span class=3D"o">-</span><span cl=
ass=3D"n">it</span><span class=3D"p">:</span><span class=3D"s2">"t.cpp"</sp=
an><span class=3D"p">:{</span><span class=3D"mi">7</span><span class=3D"p">=
:</span><span class=3D"mi">25</span><span class=3D"o">-</span><span class=
=3D"mi">7</span><span class=3D"p">:</span><span class=3D"mi">29</span><span=
 class=3D"p">}:</span><span class=3D"s2">"Gamma"</span>
</pre></div>
</div>
<p>The range printed is a half-open range, so in this example the
characters at column 25 up to but not including column 29 on line 7
in t.cpp should be replaced with the string =E2=80=9CGamma=E2=80=9D. Either=
 the
range or the replacement string may be empty (representing strict
insertions and strict erasures, respectively). Both the file name
and the insertion string escape backslash (as =E2=80=9C\\=E2=80=9D), tabs (=
as
=E2=80=9C\t=E2=80=9D), newlines (as =E2=80=9C\n=E2=80=9D), double quotes(as=
 =E2=80=9C\=E2=80=9D=E2=80=9D) and
non-printable characters (as octal =E2=80=9C\xxx=E2=80=9D).</p>
<p>The printed column numbers count bytes from the beginning of the
line; take care if your source contains multibyte characters.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-elide-type">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-elide-type</span=
></span><span class=3D"sig-prename descclassname"></span><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fno-el=
ide-type" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Turns off elision in template type printing.</p>
<p>The default for template type printing is to elide as many template
arguments as possible, removing those which are the same in both
template types, leaving only the differences. Adding this flag will
print all the template arguments. If supported by the terminal,
highlighting will still appear on differing arguments.</p>
<p>Default:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">t</span><span class=3D"o">.</span><span clas=
s=3D"n">cc</span><span class=3D"p">:</span><span class=3D"mi">4</span><span=
 class=3D"p">:</span><span class=3D"mi">5</span><span class=3D"p">:</span> =
<span class=3D"n">note</span><span class=3D"p">:</span> <span class=3D"n">c=
andidate</span> <span class=3D"n">function</span> <span class=3D"ow">not</s=
pan> <span class=3D"n">viable</span><span class=3D"p">:</span> <span class=
=3D"n">no</span> <span class=3D"n">known</span> <span class=3D"n">conversio=
n</span> <span class=3D"kn">from</span> <span class=3D"s1">'vector&lt;map&l=
t;[...], map&lt;float, [...]&gt;&gt;&gt;'</span> <span class=3D"n">to</span=
> <span class=3D"s1">'vector&lt;map&lt;[...], map&lt;double, [...]&gt;&gt;&=
gt;'</span> <span class=3D"k">for</span> <span class=3D"mi">1</span><span c=
lass=3D"n">st</span> <span class=3D"n">argument</span><span class=3D"p">;</=
span>
</pre></div>
</div>
<p>-fno-elide-type:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">t</span><span class=3D"o">.</span><span clas=
s=3D"n">cc</span><span class=3D"p">:</span><span class=3D"mi">4</span><span=
 class=3D"p">:</span><span class=3D"mi">5</span><span class=3D"p">:</span> =
<span class=3D"n">note</span><span class=3D"p">:</span> <span class=3D"n">c=
andidate</span> <span class=3D"n">function</span> <span class=3D"ow">not</s=
pan> <span class=3D"n">viable</span><span class=3D"p">:</span> <span class=
=3D"n">no</span> <span class=3D"n">known</span> <span class=3D"n">conversio=
n</span> <span class=3D"kn">from</span> <span class=3D"s1">'vector&lt;map&l=
t;int, map&lt;float, int&gt;&gt;&gt;'</span> <span class=3D"n">to</span> <s=
pan class=3D"s1">'vector&lt;map&lt;int, map&lt;double, int&gt;&gt;&gt;'</sp=
an> <span class=3D"k">for</span> <span class=3D"mi">1</span><span class=3D"=
n">st</span> <span class=3D"n">argument</span><span class=3D"p">;</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-show-template=
-tree">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-show-te=
mplate-tree</span></span><span class=3D"sig-prename descclassname"></span><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html=
#cmdoption-fdiagnostics-show-template-tree" title=3D"Link to this definitio=
n">=C2=B6</a></dt>
<dd><p>Template type diffing prints a text tree.</p>
<p>For diffing large templated types, this option will cause Clang to
display the templates as an indented text tree, one argument per
line, with differences marked inline. This is compatible with
-fno-elide-type.</p>
<p>Default:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">t</span><span class=3D"o">.</span><span clas=
s=3D"n">cc</span><span class=3D"p">:</span><span class=3D"mi">4</span><span=
 class=3D"p">:</span><span class=3D"mi">5</span><span class=3D"p">:</span> =
<span class=3D"n">note</span><span class=3D"p">:</span> <span class=3D"n">c=
andidate</span> <span class=3D"n">function</span> <span class=3D"ow">not</s=
pan> <span class=3D"n">viable</span><span class=3D"p">:</span> <span class=
=3D"n">no</span> <span class=3D"n">known</span> <span class=3D"n">conversio=
n</span> <span class=3D"kn">from</span> <span class=3D"s1">'vector&lt;map&l=
t;[...], map&lt;float, [...]&gt;&gt;&gt;'</span> <span class=3D"n">to</span=
> <span class=3D"s1">'vector&lt;map&lt;[...], map&lt;double, [...]&gt;&gt;&=
gt;'</span> <span class=3D"k">for</span> <span class=3D"mi">1</span><span c=
lass=3D"n">st</span> <span class=3D"n">argument</span><span class=3D"p">;</=
span>
</pre></div>
</div>
<p>With <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs=
/UsersManual.html#cmdoption-fdiagnostics-show-template-tree"><code class=3D=
"xref std std-option docutils literal notranslate"><span class=3D"pre">-fdi=
agnostics-show-template-tree</span></code></a>:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">t</span><span class=3D"o">.</span><span clas=
s=3D"n">cc</span><span class=3D"p">:</span><span class=3D"mi">4</span><span=
 class=3D"p">:</span><span class=3D"mi">5</span><span class=3D"p">:</span> =
<span class=3D"n">note</span><span class=3D"p">:</span> <span class=3D"n">c=
andidate</span> <span class=3D"n">function</span> <span class=3D"ow">not</s=
pan> <span class=3D"n">viable</span><span class=3D"p">:</span> <span class=
=3D"n">no</span> <span class=3D"n">known</span> <span class=3D"n">conversio=
n</span> <span class=3D"k">for</span> <span class=3D"mi">1</span><span clas=
s=3D"n">st</span> <span class=3D"n">argument</span><span class=3D"p">;</spa=
n>
  <span class=3D"n">vector</span><span class=3D"o">&lt;</span>
    <span class=3D"nb">map</span><span class=3D"o">&lt;</span>
      <span class=3D"p">[</span><span class=3D"o">...</span><span class=3D"=
p">],</span>
      <span class=3D"nb">map</span><span class=3D"o">&lt;</span>
        <span class=3D"p">[</span><span class=3D"nb">float</span> <span cla=
ss=3D"o">!=3D</span> <span class=3D"n">double</span><span class=3D"p">],</s=
pan>
        <span class=3D"p">[</span><span class=3D"o">...</span><span class=
=3D"p">]</span><span class=3D"o">&gt;&gt;&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcaret-diagnostics-max-lin=
es">
<span class=3D"sig-name descname"><span class=3D"pre">-fcaret-diagnostics-m=
ax-lines:</span></span><span class=3D"sig-prename descclassname"></span><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#c=
mdoption-fcaret-diagnostics-max-lines" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Controls how many lines of code clang prints for diagnostics. By def=
ault,
clang prints a maximum of 16 lines of code.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiagnostics-show-line-num=
bers">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiagnostics-show-li=
ne-numbers:</span></span><span class=3D"sig-prename descclassname"></span><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html=
#cmdoption-fdiagnostics-show-line-numbers" title=3D"Link to this definition=
">=C2=B6</a></dt>
<dd><p>Controls whether clang will print a margin containing the line numbe=
r on
the left of each line of code it prints for diagnostics.</p>
<p>Default:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"n">test</span><span class=3D"o">.</span><s=
pan class=3D"n">cpp</span><span class=3D"p">:</span><span class=3D"mi">5</s=
pan><span class=3D"p">:</span><span class=3D"mi">1</span><span class=3D"p">=
:</span> <span class=3D"n">error</span><span class=3D"p">:</span> <span cla=
ss=3D"s1">'main'</span> <span class=3D"n">must</span> <span class=3D"k">ret=
urn</span> <span class=3D"s1">'int'</span>
    <span class=3D"mi">5</span> <span class=3D"o">|</span> <span class=3D"n=
">void</span> <span class=3D"n">main</span><span class=3D"p">()</span> <spa=
n class=3D"p">{}</span>
      <span class=3D"o">|</span> <span class=3D"o">^~~~</span>
      <span class=3D"o">|</span> <span class=3D"nb">int</span>
</pre></div>
</div>
</div></blockquote>
<p>With -fno-diagnostics-show-line-numbers:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"n">test</span><span class=3D"o">.</span><s=
pan class=3D"n">cpp</span><span class=3D"p">:</span><span class=3D"mi">5</s=
pan><span class=3D"p">:</span><span class=3D"mi">1</span><span class=3D"p">=
:</span> <span class=3D"n">error</span><span class=3D"p">:</span> <span cla=
ss=3D"s1">'main'</span> <span class=3D"n">must</span> <span class=3D"k">ret=
urn</span> <span class=3D"s1">'int'</span>
<span class=3D"n">void</span> <span class=3D"n">main</span><span class=3D"p=
">()</span> <span class=3D"p">{}</span>
<span class=3D"o">^~~~</span>
<span class=3D"nb">int</span>
</pre></div>
</div>
</div></blockquote>
</dd></dl>

</section>
<section id=3D"individual-warning-groups">
<span id=3D"cl-diag-warning-groups"></span><h4><a class=3D"toc-backref" hre=
f=3D"https://clang.llvm.org/docs/UsersManual.html#id22" role=3D"doc-backlin=
k">Individual Warning Groups</a><a class=3D"headerlink" href=3D"https://cla=
ng.llvm.org/docs/UsersManual.html#individual-warning-groups" title=3D"Link =
to this heading">=C2=B6</a></h4>
<p>TODO: Generate this from tblgen. Define one anchor per warning group.</p=
>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wextra-tokens">
<span class=3D"sig-name descname"><span class=3D"pre">-Wextra-tokens</span>=
</span><span class=3D"sig-prename descclassname"></span><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Wextra-=
tokens" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Warn about excess tokens at the end of a preprocessor directive.</p>
<p>This option, which defaults to on, enables warnings about extra
tokens at the end of preprocessor directives. For example:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">test</span><span class=3D"o">.</span><span c=
lass=3D"n">c</span><span class=3D"p">:</span><span class=3D"mi">28</span><s=
pan class=3D"p">:</span><span class=3D"mi">8</span><span class=3D"p">:</spa=
n> <span class=3D"n">warning</span><span class=3D"p">:</span> <span class=
=3D"n">extra</span> <span class=3D"n">tokens</span> <span class=3D"n">at</s=
pan> <span class=3D"n">end</span> <span class=3D"n">of</span> <span class=
=3D"c1">#endif directive [-Wextra-tokens]</span>
<span class=3D"c1">#endif bad</span>
       <span class=3D"o">^</span>
</pre></div>
</div>
<p>These extra tokens are not strictly conforming, and are usually best
handled by commenting them out.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wambiguous-member-template=
">
<span class=3D"sig-name descname"><span class=3D"pre">-Wambiguous-member-te=
mplate</span></span><span class=3D"sig-prename descclassname"></span><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdo=
ption-Wambiguous-member-template" title=3D"Link to this definition">=C2=B6<=
/a></dt>
<dd><p>Warn about unqualified uses of a member template whose name resolves=
 to
another template at the location of the use.</p>
<p>This option, which defaults to on, enables a warning in the
following code:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">template</span><span class=3D"o">&lt;</span>=
<span class=3D"n">typename</span> <span class=3D"n">T</span><span class=3D"=
o">&gt;</span> <span class=3D"n">struct</span> <span class=3D"nb">set</span=
><span class=3D"p">{};</span>
<span class=3D"n">template</span><span class=3D"o">&lt;</span><span class=
=3D"n">typename</span> <span class=3D"n">T</span><span class=3D"o">&gt;</sp=
an> <span class=3D"n">struct</span> <span class=3D"n">trait</span> <span cl=
ass=3D"p">{</span> <span class=3D"n">typedef</span> <span class=3D"n">const=
</span> <span class=3D"n">T</span><span class=3D"o">&amp;</span> <span clas=
s=3D"nb">type</span><span class=3D"p">;</span> <span class=3D"p">};</span>
<span class=3D"n">struct</span> <span class=3D"n">Value</span> <span class=
=3D"p">{</span>
  <span class=3D"n">template</span><span class=3D"o">&lt;</span><span class=
=3D"n">typename</span> <span class=3D"n">T</span><span class=3D"o">&gt;</sp=
an> <span class=3D"n">void</span> <span class=3D"nb">set</span><span class=
=3D"p">(</span><span class=3D"n">typename</span> <span class=3D"n">trait</s=
pan><span class=3D"o">&lt;</span><span class=3D"n">T</span><span class=3D"o=
">&gt;</span><span class=3D"p">::</span><span class=3D"nb">type</span> <spa=
n class=3D"n">value</span><span class=3D"p">)</span> <span class=3D"p">{}</=
span>
<span class=3D"p">};</span>
<span class=3D"n">void</span> <span class=3D"n">foo</span><span class=3D"p"=
>()</span> <span class=3D"p">{</span>
  <span class=3D"n">Value</span> <span class=3D"n">v</span><span class=3D"p=
">;</span>
  <span class=3D"n">v</span><span class=3D"o">.</span><span class=3D"n">set=
</span><span class=3D"o">&lt;</span><span class=3D"n">double</span><span cl=
ass=3D"o">&gt;</span><span class=3D"p">(</span><span class=3D"mf">3.2</span=
><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>C++ [basic.lookup.classref] requires this to be an error, but,
because it=E2=80=99s hard to work around, Clang downgrades it to a warning
as an extension.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wbind-to-temporary-copy">
<span class=3D"sig-name descname"><span class=3D"pre">-Wbind-to-temporary-c=
opy</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-Wbind-to-temporary-copy" title=3D"Link to this definition">=C2=B6</a></=
dt>
<dd><p>Warn about an unusable copy constructor when binding a reference to =
a
temporary.</p>
<p>This option enables warnings about binding a
reference to a temporary when the temporary doesn=E2=80=99t have a usable
copy constructor. For example:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">struct</span> <span class=3D"n">NonCopyable<=
/span> <span class=3D"p">{</span>
  <span class=3D"n">NonCopyable</span><span class=3D"p">();</span>
<span class=3D"n">private</span><span class=3D"p">:</span>
  <span class=3D"n">NonCopyable</span><span class=3D"p">(</span><span class=
=3D"n">const</span> <span class=3D"n">NonCopyable</span><span class=3D"o">&=
amp;</span><span class=3D"p">);</span>
<span class=3D"p">};</span>
<span class=3D"n">void</span> <span class=3D"n">foo</span><span class=3D"p"=
>(</span><span class=3D"n">const</span> <span class=3D"n">NonCopyable</span=
><span class=3D"o">&amp;</span><span class=3D"p">);</span>
<span class=3D"n">void</span> <span class=3D"n">bar</span><span class=3D"p"=
>()</span> <span class=3D"p">{</span>
  <span class=3D"n">foo</span><span class=3D"p">(</span><span class=3D"n">N=
onCopyable</span><span class=3D"p">());</span>  <span class=3D"o">//</span>=
 <span class=3D"n">Disallowed</span> <span class=3D"ow">in</span> <span cla=
ss=3D"n">C</span><span class=3D"o">++</span><span class=3D"mi">98</span><sp=
an class=3D"p">;</span> <span class=3D"n">allowed</span> <span class=3D"ow"=
>in</span> <span class=3D"n">C</span><span class=3D"o">++</span><span class=
=3D"mf">11.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">struct</span> <span class=3D"n">NonCopyable2=
</span> <span class=3D"p">{</span>
  <span class=3D"n">NonCopyable2</span><span class=3D"p">();</span>
  <span class=3D"n">NonCopyable2</span><span class=3D"p">(</span><span clas=
s=3D"n">NonCopyable2</span><span class=3D"o">&amp;</span><span class=3D"p">=
);</span>
<span class=3D"p">};</span>
<span class=3D"n">void</span> <span class=3D"n">foo</span><span class=3D"p"=
>(</span><span class=3D"n">const</span> <span class=3D"n">NonCopyable2</spa=
n><span class=3D"o">&amp;</span><span class=3D"p">);</span>
<span class=3D"n">void</span> <span class=3D"n">bar</span><span class=3D"p"=
>()</span> <span class=3D"p">{</span>
  <span class=3D"n">foo</span><span class=3D"p">(</span><span class=3D"n">N=
onCopyable2</span><span class=3D"p">());</span>  <span class=3D"o">//</span=
> <span class=3D"n">Disallowed</span> <span class=3D"ow">in</span> <span cl=
ass=3D"n">C</span><span class=3D"o">++</span><span class=3D"mi">98</span><s=
pan class=3D"p">;</span> <span class=3D"n">allowed</span> <span class=3D"ow=
">in</span> <span class=3D"n">C</span><span class=3D"o">++</span><span clas=
s=3D"mf">11.</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Note that if <code class=3D"docutils literal notranslate"><span class=3D=
"pre">NonCopyable2::NonCopyable2()</span></code> has a default argument
whose instantiation produces a compile error, that error will still
be a hard error in C++98 mode even if this warning is turned off.</p>
</dd></dl>

</section>
</section>
<section id=3D"options-to-control-clang-crash-diagnostics">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id23" role=3D"doc-backlink">Options to Control Clang Crash Diagnosti=
cs</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#options-to-control-clang-crash-diagnostics" title=3D"Link to this h=
eading">=C2=B6</a></h3>
<p>As unbelievable as it may sound, Clang does crash from time to time.
Generally, this only occurs to those living on the <a class=3D"reference ex=
ternal" href=3D"https://llvm.org/releases/download.html#svn">bleeding
edge</a>. Clang goes to great
lengths to assist you in filing a bug report. Specifically, Clang
generates preprocessed source file(s) and associated run script(s) upon
a crash. These files should be attached to a bug report to ease
reproducibility of the failure. Below are the command line options to
control the crash diagnostics.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcrash-diagnostics">
<span class=3D"sig-name descname"><span class=3D"pre">-fcrash-diagnostics</=
span></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3D&lt;val&gt;</span></span><a class=3D"headerlink" href=3D"https://clang.l=
lvm.org/docs/UsersManual.html#cmdoption-fcrash-diagnostics" title=3D"Link t=
o this definition">=C2=B6</a></dt>
<dd><p>Valid values are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">off=
</span></code> (Disable auto-generation of preprocessed source files during=
 a clang crash.)</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">com=
piler</span></code> (Generate diagnostics for compiler crashes (default))</=
p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">all=
</span></code> (Generate diagnostics for all tools which support it)</p></l=
i>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-crash-diagnostics">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-crash-diagnostic=
s</span></span><span class=3D"sig-prename descclassname"></span><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption=
-fno-crash-diagnostics" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Disable auto-generation of preprocessed source files during a clang =
crash.</p>
<p>The -fno-crash-diagnostics flag can be helpful for speeding the process
of generating a delta reduced test case.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcrash-diagnostics-dir">
<span class=3D"sig-name descname"><span class=3D"pre">-fcrash-diagnostics-d=
ir</span></span><span class=3D"sig-prename descclassname"><span class=3D"pr=
e">=3D&lt;dir&gt;</span></span><a class=3D"headerlink" href=3D"https://clan=
g.llvm.org/docs/UsersManual.html#cmdoption-fcrash-diagnostics-dir" title=3D=
"Link to this definition">=C2=B6</a></dt>
<dd><p>Specify where to write the crash diagnostics files; defaults to the
usual location for temporary files.</p>
</dd></dl>

<dl class=3D"std envvar">
<dt class=3D"sig sig-object std" id=3D"envvar-CLANG_CRASH_DIAGNOSTICS_DIR-d=
ir">
<span class=3D"sig-name descname"><span class=3D"pre">CLANG_CRASH_DIAGNOSTI=
CS_DIR=3D&lt;dir&gt;</span></span><a class=3D"headerlink" href=3D"https://c=
lang.llvm.org/docs/UsersManual.html#envvar-CLANG_CRASH_DIAGNOSTICS_DIR-dir"=
 title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Like <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fcrash-diagnostics-dir=3D&lt;dir&gt;</span></code>, specifies where to w=
rite the
crash diagnostics files, but with lower precedence than the option.</p>
</dd></dl>

<p>Clang is also capable of generating preprocessed source file(s) and asso=
ciated
run script(s) even without a crash. This is specially useful when trying to
generate a reproducer for warnings or errors while using modules.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-gen-reproducer">
<span class=3D"sig-name descname"><span class=3D"pre">-gen-reproducer</span=
></span><span class=3D"sig-prename descclassname"></span><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-gen-re=
producer" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generates preprocessed source files, a reproducer script and if rele=
vant, a
cache containing: built module pcm=E2=80=99s and all headers needed to rebu=
ild the
same modules.</p>
</dd></dl>

</section>
<section id=3D"options-to-emit-optimization-reports">
<span id=3D"rpass"></span><h3><a class=3D"toc-backref" href=3D"https://clan=
g.llvm.org/docs/UsersManual.html#id24" role=3D"doc-backlink">Options to Emi=
t Optimization Reports</a><a class=3D"headerlink" href=3D"https://clang.llv=
m.org/docs/UsersManual.html#options-to-emit-optimization-reports" title=3D"=
Link to this heading">=C2=B6</a></h3>
<p>Optimization reports trace, at a high-level, all the major decisions
done by compiler transformations. For instance, when the inliner
decides to inline function <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">foo()</span></code> into <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">bar()</span></code>, or the loop unroller
decides to unroll a loop N times, or the vectorizer decides to
vectorize a loop body.</p>
<p>Clang offers a family of flags which the optimizers can use to emit
a diagnostic in three cases:</p>
<ol class=3D"arabic simple">
<li><p>When the pass makes a transformation (<cite>-Rpass</cite>).</p></li>
<li><p>When the pass fails to make a transformation (<cite>-Rpass-missed</c=
ite>).</p></li>
<li><p>When the pass determines whether or not to make a transformation
(<cite>-Rpass-analysis</cite>).</p></li>
</ol>
<p>NOTE: Although the discussion below focuses on <cite>-Rpass</cite>, the =
exact
same options apply to <cite>-Rpass-missed</cite> and <cite>-Rpass-analysis<=
/cite>.</p>
<p>Since there are dozens of passes inside the compiler, each of these flag=
s
take a regular expression that identifies the name of the pass which should
emit the associated diagnostic. For example, to get a report from the inlin=
er,
compile the code with:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-O2=
<span class=3D"w"> </span>-Rpass<span class=3D"o">=3D</span>inline<span cla=
ss=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span class=3D"w"> </sp=
an>code
<span class=3D"go">code.cc:4:25: remark: foo inlined into bar [-Rpass=3Dinl=
ine]</span>
<span class=3D"go">int bar(int j) { return foo(j, j - 2); }</span>
<span class=3D"go">                        ^</span>
</pre></div>
</div>
<p>Note that remarks from the inliner are identified with <cite>[-Rpass=3Di=
nline]</cite>.
To request a report from every optimization pass, you should use
<cite>-Rpass=3D.*</cite> (in fact, you can use any valid POSIX regular
expression). However, do not expect a report from every transformation
made by the compiler. Optimization remarks do not really make sense
outside of the major transformations (e.g., inlining, vectorization,
loop optimizations) and not every optimization pass supports this
feature.</p>
<p>Note that when using profile-guided optimization information, profile ho=
tness
information can be included in the remarks (see
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#opt-fdiagnostics-show-hotness"><span class=3D"std std-ref">-fdiag=
nostics-show-hotness</span></a>).</p>
<section id=3D"current-limitations">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id25" role=3D"doc-backlink">Current limitations</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#current-limitat=
ions" title=3D"Link to this heading">=C2=B6</a></h4>
<ol class=3D"arabic simple">
<li><p>Optimization remarks that refer to function names will display the
mangled name of the function. Since these remarks are emitted by the
back end of the compiler, it does not know anything about the input
language, nor its mangling rules.</p></li>
<li><p>Some source locations are not displayed correctly. The front end has
a more detailed source location tracking than the locations included
in the debug info (e.g., the front end can locate code inside macro
expansions). However, the locations used by <cite>-Rpass</cite> are
translated from debug annotations. That translation can be lossy,
which results in some remarks having no location information.</p></li>
</ol>
</section>
</section>
<section id=3D"options-to-emit-resource-consumption-reports">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id26" role=3D"doc-backlink">Options to Emit Resource Consumption Rep=
orts</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#options-to-emit-resource-consumption-reports" title=3D"Link to th=
is heading">=C2=B6</a></h3>
<p>These are options that report execution time and consumed memory of diff=
erent
compilations steps.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fproc-stat-report">
<span class=3D"sig-name descname"><span class=3D"pre">-fproc-stat-report</s=
pan></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3D</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/UsersManual.html#cmdoption-fproc-stat-report" title=3D"Link to this defin=
ition">=C2=B6</a></dt>
<dd><p>This option requests driver to print used memory and execution time =
of each
compilation step. The <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">clang</span></code> driver during execution calls different too=
ls,
like compiler, assembler, linker etc. With this option the driver reports
total execution time, the execution time spent in user mode and peak memory
usage of each the called tool. Value of the option specifies where the repo=
rt
is sent to. If it specifies a regular file, the data are saved to this file=
 in
CSV format:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-fp=
roc-stat-report<span class=3D"o">=3D</span>abc<span class=3D"w"> </span>foo=
.c
<span class=3D"gp">$ </span>cat<span class=3D"w"> </span>abc
<span class=3D"go">clang-11,"/tmp/foo-123456.o",92000,84000,87536</span>
<span class=3D"go">ld,"a.out",900,8000,53568</span>
</pre></div>
</div>
<p>The data on each row represent:</p>
<ul class=3D"simple">
<li><p>file name of the tool executable,</p></li>
<li><p>output file name in quotes,</p></li>
<li><p>total execution time in microseconds,</p></li>
<li><p>execution time in user mode in microseconds,</p></li>
<li><p>peak memory usage in Kb.</p></li>
</ul>
<p>It is possible to specify this option without any value. In this case st=
atistics
are printed on standard output in human readable format:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-fp=
roc-stat-report<span class=3D"w"> </span>foo.c
<span class=3D"go">clang-11: output=3D/tmp/foo-855a8e.o, total=3D68.000 ms,=
 user=3D60.000 ms, mem=3D86920 Kb</span>
<span class=3D"go">ld: output=3Da.out, total=3D8.000 ms, user=3D4.000 ms, m=
em=3D52320 Kb</span>
</pre></div>
</div>
<p>The report file specified in the option is locked for write, so this opt=
ion
can be used to collect statistics in parallel builds. The report file is no=
t
cleared, new data is appended to it, thus making possible to accumulate bui=
ld
statistics.</p>
<p>You can also use environment variables to control the process statistics=
 reporting.
Setting <code class=3D"docutils literal notranslate"><span class=3D"pre">CC=
_PRINT_PROC_STAT</span></code> to <code class=3D"docutils literal notransla=
te"><span class=3D"pre">1</span></code> enables the feature, the report goe=
s to
stdout in human readable format.
Setting <code class=3D"docutils literal notranslate"><span class=3D"pre">CC=
_PRINT_PROC_STAT_FILE</span></code> to a fully qualified file path makes it=
 report
process statistics to the given file in the CSV format. Specifying a relati=
ve
path will likely lead to multiple files with the same name created in diffe=
rent
directories, since the path is relative to a changing working directory.</p=
>
<p>These environment variables are handy when you need to request the stati=
stics
report without changing your build scripts or alter the existing set of com=
piler
options. Note that <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-fproc-stat-report</span></code> take precedence over <code class=
=3D"docutils literal notranslate"><span class=3D"pre">CC_PRINT_PROC_STAT</s=
pan></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">CC_PRI=
NT_PROC_STAT_FILE</span></code>.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span><span class=3D"nb">export</span><s=
pan class=3D"w"> </span><span class=3D"nv">CC_PRINT_PROC_STAT</span><span c=
lass=3D"o">=3D</span><span class=3D"m">1</span>
<span class=3D"gp">$ </span><span class=3D"nb">export</span><span class=3D"=
w"> </span><span class=3D"nv">CC_PRINT_PROC_STAT_FILE</span><span class=3D"=
o">=3D</span>~/project-build-proc-stat.csv
<span class=3D"gp">$ </span>make
</pre></div>
</div>
</dd></dl>

</section>
<section id=3D"other-options">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id27" role=3D"doc-backlink">Other Options</a><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/UsersManual.html#other-options" title=
=3D"Link to this heading">=C2=B6</a></h3>
<p>Clang options that don=E2=80=99t fit neatly into other categories.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fgnuc-version">
<span class=3D"sig-name descname"><span class=3D"pre">-fgnuc-version</span>=
</span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D</s=
pan></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/User=
sManual.html#cmdoption-fgnuc-version" title=3D"Link to this definition">=C2=
=B6</a></dt>
<dd><p>This flag controls the value of <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">__GNUC__</span></code> and related macros. Thi=
s flag
does not enable or disable any GCC extensions implemented in Clang. Setting
the version to zero causes Clang to leave <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">__GNUC__</span></code> and other
GNU-namespaced macros, such as <code class=3D"docutils literal notranslate"=
><span class=3D"pre">__GXX_WEAK__</span></code>, undefined.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-MV">
<span class=3D"sig-name descname"><span class=3D"pre">-MV</span></span><spa=
n class=3D"sig-prename descclassname"></span><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-MV" title=3D"Lin=
k to this definition">=C2=B6</a></dt>
<dd><p>When emitting a dependency file, use formatting conventions appropri=
ate
for NMake or Jom. Ignored unless another option causes Clang to emit a
dependency file.</p>
<p>When Clang emits a dependency file (e.g., you supplied the -M option)
most filenames can be written to the file without any special formatting.
Different Make tools will treat different sets of characters as =E2=80=9Csp=
ecial=E2=80=9D
and use different conventions for telling the Make tool that the character
is actually part of the filename. Normally Clang uses backslash to =E2=80=
=9Cescape=E2=80=9D
a special character, which is the convention used by GNU Make. The -MV
option tells Clang to put double-quotes around the entire filename, which
is the convention used by NMake and Jom.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-femit-dwarf-unwind">
<span class=3D"sig-name descname"><span class=3D"pre">-femit-dwarf-unwind</=
span></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3D&lt;value&gt;</span></span><a class=3D"headerlink" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#cmdoption-femit-dwarf-unwind" title=3D"Link=
 to this definition">=C2=B6</a></dt>
<dd><p>When to emit DWARF unwind (EH frame) info. This is a Mach-O-specific=
 option.</p>
<p>Valid values are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">no-=
compact-unwind</span></code> - Only emit DWARF unwind when compact unwind e=
ncodings
aren=E2=80=99t available. This is the default for arm64.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">alw=
ays</span></code> - Always emit DWARF unwind regardless.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">def=
ault</span></code> - Use the platform-specific default (<code class=3D"docu=
tils literal notranslate"><span class=3D"pre">always</span></code> for all
non-arm64-platforms).</p></li>
</ul>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">no-comp=
act-unwind</span></code> is a performance optimization =E2=80=93 Clang will=
 emit smaller
object files that are more quickly processed by the linker. This may cause
binary compatibility issues on older x86_64 targets, however, so use it wit=
h
caution.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdisable-block-signature-s=
tring">
<span class=3D"sig-name descname"><span class=3D"pre">-fdisable-block-signa=
ture-string</span></span><span class=3D"sig-prename descclassname"></span><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html=
#cmdoption-fdisable-block-signature-string" title=3D"Link to this definitio=
n">=C2=B6</a></dt>
<dd><p>Instruct clang not to emit the signature string for blocks. Disablin=
g the
string can potentially break existing code that relies on it. Users should
carefully consider this possibility when using the flag.</p>
</dd></dl>

</section>
<section id=3D"configuration-files">
<span id=3D"id2"></span><h3><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id28" role=3D"doc-backlink">Configuration fi=
les</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersMan=
ual.html#configuration-files" title=3D"Link to this heading">=C2=B6</a></h3=
>
<p>Configuration files group command-line options and allow all of them to =
be
specified just by referencing the configuration file. They may be used, for
example, to collect options required to tune compilation for particular
target, such as <code class=3D"docutils literal notranslate"><span class=3D=
"pre">-L</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-I</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">-l</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">--sysroot</span></code>, codegen options, etc=
.</p>
<p>Configuration files can be either specified on the command line or loade=
d
from default locations. If both variants are present, the default configura=
tion
files are loaded first.</p>
<p>The command line option <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">--config=3D</span></code> can be used to specify explicit
configuration files in a Clang invocation. If the option is used multiple t=
imes,
all specified files are loaded, in order. For example:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">clang</span> <span class=3D"o">--</span><spa=
n class=3D"n">config</span><span class=3D"o">=3D/</span><span class=3D"n">h=
ome</span><span class=3D"o">/</span><span class=3D"n">user</span><span clas=
s=3D"o">/</span><span class=3D"n">cfgs</span><span class=3D"o">/</span><spa=
n class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">txt=
</span>
<span class=3D"n">clang</span> <span class=3D"o">--</span><span class=3D"n"=
>config</span><span class=3D"o">=3D</span><span class=3D"n">debug</span><sp=
an class=3D"o">.</span><span class=3D"n">cfg</span> <span class=3D"o">--</s=
pan><span class=3D"n">config</span><span class=3D"o">=3D</span><span class=
=3D"n">runtimes</span><span class=3D"o">.</span><span class=3D"n">cfg</span=
>
</pre></div>
</div>
<p>If the provided argument contains a directory separator, it is considere=
d as
a file path, and options are read from that file. Otherwise the argument is
treated as a file name and is searched for sequentially in the directories:=
</p>
<blockquote>
<div><ul class=3D"simple">
<li><p>user directory,</p></li>
<li><p>system directory,</p></li>
<li><p>the directory where Clang executable resides.</p></li>
</ul>
</div></blockquote>
<p>Both user and system directories for configuration files can be specifie=
d
either during build or during runtime. At build time, use
<code class=3D"docutils literal notranslate"><span class=3D"pre">CLANG_CONF=
IG_FILE_USER_DIR</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">CLANG_CONFIG_FILE_SYSTEM_DIR</span></code>. At run
time use the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">--config-user-dir=3D</span></code> and <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">--config-system-dir=3D</span></code> comman=
d line
options. Specifying config directories at runtime overrides the config
directories set at build time The first file found is used. It is an error =
if
the required file cannot be found.</p>
<p>The default configuration files are searched for in the same directories
following the rules described in the next paragraphs. Loading default
configuration files can be disabled entirely via passing
the <code class=3D"docutils literal notranslate"><span class=3D"pre">--no-d=
efault-config</span></code> flag.</p>
<p>First, the algorithm searches for a configuration file named
<code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;triple=
&gt;-&lt;driver&gt;.cfg</span></code> where <cite>triple</cite> is the trip=
le for the target being
built for, and <cite>driver</cite> is the name of the currently used driver=
. The algorithm
first attempts to use the canonical name for the driver used, then falls ba=
ck
to the one found in the executable name.</p>
<p>The following canonical driver names are used:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng</span></code> for the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">gcc</span></code> driver (used to compile C programs)</p></l=
i>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng++</span></code> for the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">gxx</span></code> driver (used to compile C++ programs)</p=
></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng-cpp</span></code> for the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">cpp</span></code> driver (pure preprocessor)</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng-cl</span></code> for the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">cl</span></code> driver</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fla=
ng</span></code> for the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">flang</span></code> driver</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng-dxc</span></code> for the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">dxc</span></code> driver</p></li>
</ul>
<p>For example, when calling <code class=3D"docutils literal notranslate"><=
span class=3D"pre">x86_64-pc-linux-gnu-clang-g++</span></code>,
the driver will first attempt to use the configuration file named:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">x86_64</span><span class=3D"o">-</span><span=
 class=3D"n">pc</span><span class=3D"o">-</span><span class=3D"n">linux</sp=
an><span class=3D"o">-</span><span class=3D"n">gnu</span><span class=3D"o">=
-</span><span class=3D"n">clang</span><span class=3D"o">++.</span><span cla=
ss=3D"n">cfg</span>
</pre></div>
</div>
<p>If this file is not found, it will attempt to use the name found
in the executable instead:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">x86_64</span><span class=3D"o">-</span><span=
 class=3D"n">pc</span><span class=3D"o">-</span><span class=3D"n">linux</sp=
an><span class=3D"o">-</span><span class=3D"n">gnu</span><span class=3D"o">=
-</span><span class=3D"n">clang</span><span class=3D"o">-</span><span class=
=3D"n">g</span><span class=3D"o">++.</span><span class=3D"n">cfg</span>
</pre></div>
</div>
<p>Note that options such as <code class=3D"docutils literal notranslate"><=
span class=3D"pre">--driver-mode=3D</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">--target=3D</span></code>, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">-m32</span></code=
> affect
the search algorithm. For example, the aforementioned executable called wit=
h
<code class=3D"docutils literal notranslate"><span class=3D"pre">-m32</span=
></code> argument will instead search for:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">i386</span><span class=3D"o">-</span><span c=
lass=3D"n">pc</span><span class=3D"o">-</span><span class=3D"n">linux</span=
><span class=3D"o">-</span><span class=3D"n">gnu</span><span class=3D"o">-<=
/span><span class=3D"n">clang</span><span class=3D"o">++.</span><span class=
=3D"n">cfg</span>
</pre></div>
</div>
<p>If none of the aforementioned files are found, the driver will instead s=
earch
for separate driver and target configuration files and attempt to load both=
.
The former is named <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">&lt;driver&gt;.cfg</span></code> while the latter is named
<code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;triple=
&gt;.cfg</span></code>. Similarly to the previous variants, the canonical d=
river name
will be preferred, and the compiler will fall back to the actual name.</p>
<p>For example, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">x86_64-pc-linux-gnu-clang-g++</span></code> will attempt to load two
configuration files named respectively:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">clang</span><span class=3D"o">++.</span><spa=
n class=3D"n">cfg</span>
<span class=3D"n">x86_64</span><span class=3D"o">-</span><span class=3D"n">=
pc</span><span class=3D"o">-</span><span class=3D"n">linux</span><span clas=
s=3D"o">-</span><span class=3D"n">gnu</span><span class=3D"o">.</span><span=
 class=3D"n">cfg</span>
</pre></div>
</div>
<p>with fallback to trying:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"n">clang</span><span class=3D"o">-</span><span =
class=3D"n">g</span><span class=3D"o">++.</span><span class=3D"n">cfg</span=
>
<span class=3D"n">x86_64</span><span class=3D"o">-</span><span class=3D"n">=
pc</span><span class=3D"o">-</span><span class=3D"n">linux</span><span clas=
s=3D"o">-</span><span class=3D"n">gnu</span><span class=3D"o">.</span><span=
 class=3D"n">cfg</span>
</pre></div>
</div>
<p>It is not an error if either of these files is not found.</p>
<p>The configuration file consists of command-line options specified on one=
 or
more lines. Lines composed of whitespace characters only are ignored as wel=
l as
lines in which the first non-blank character is <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">#</span></code>. Long options may be =
split
between several lines by a trailing backslash. Here is example of a
configuration file:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"c1"># Several options on line</span>
<span class=3D"o">-</span><span class=3D"n">c</span> <span class=3D"o">--</=
span><span class=3D"n">target</span><span class=3D"o">=3D</span><span class=
=3D"n">x86_64</span><span class=3D"o">-</span><span class=3D"n">unknown</sp=
an><span class=3D"o">-</span><span class=3D"n">linux</span><span class=3D"o=
">-</span><span class=3D"n">gnu</span>

<span class=3D"c1"># Long option split between lines</span>
<span class=3D"o">-</span><span class=3D"n">I</span><span class=3D"o">/</sp=
an><span class=3D"n">usr</span><span class=3D"o">/</span><span class=3D"n">=
lib</span><span class=3D"o">/</span><span class=3D"n">gcc</span><span class=
=3D"o">/</span><span class=3D"n">x86_64</span><span class=3D"o">-</span><sp=
an class=3D"n">linux</span><span class=3D"o">-</span><span class=3D"n">gnu<=
/span><span class=3D"o">/</span><span class=3D"mf">5.4.0</span><span class=
=3D"o">/../../../../</span>\
<span class=3D"n">include</span><span class=3D"o">/</span><span class=3D"n"=
>c</span><span class=3D"o">++/</span><span class=3D"mf">5.4.0</span>

<span class=3D"c1"># other config files may be included</span>
<span class=3D"nd">@linux</span><span class=3D"o">.</span><span class=3D"n"=
>options</span>
</pre></div>
</div>
<p>Files included by <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">@file</span></code> directives in configuration files are resolv=
ed
relative to the including file. For example, if a configuration file
<code class=3D"docutils literal notranslate"><span class=3D"pre">~/.llvm/ta=
rget.cfg</span></code> contains the directive <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">@os/linux.opts</span></code>, the file
<code class=3D"docutils literal notranslate"><span class=3D"pre">linux.opts=
</span></code> is searched for in the directory <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">~/.llvm/os</span></code>. Another way=
 to
include a file content is using the command line option <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">--config=3D</span></code>. It=
 works
similarly but the included file is searched for using the rules for configu=
ration
files.</p>
<p>To generate paths relative to the configuration file, the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">&lt;CFGDIR&gt;</span></c=
ode> token may
be used. This will expand to the absolute path of the directory containing =
the
configuration file.</p>
<p>In cases where a configuration file is deployed alongside SDK contents, =
the
SDK directory can remain fully portable by using <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">&lt;CFGDIR&gt;</span></code> prefixe=
d paths.
In this way, the user may only need to specify a root configuration file wi=
th
<code class=3D"docutils literal notranslate"><span class=3D"pre">--config=
=3D</span></code> to establish every aspect of the SDK with the compiler:</=
p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"o">--</span><span class=3D"n">target</span><spa=
n class=3D"o">=3D</span><span class=3D"n">foo</span>
<span class=3D"o">-</span><span class=3D"n">isystem</span> <span class=3D"o=
">&lt;</span><span class=3D"n">CFGDIR</span><span class=3D"o">&gt;/</span><=
span class=3D"n">include</span>
<span class=3D"o">-</span><span class=3D"n">L</span> <span class=3D"o">&lt;=
</span><span class=3D"n">CFGDIR</span><span class=3D"o">&gt;/</span><span c=
lass=3D"n">lib</span>
<span class=3D"o">-</span><span class=3D"n">T</span> <span class=3D"o">&lt;=
</span><span class=3D"n">CFGDIR</span><span class=3D"o">&gt;/</span><span c=
lass=3D"n">ldscripts</span><span class=3D"o">/</span><span class=3D"n">link=
</span><span class=3D"o">.</span><span class=3D"n">ld</span>
</pre></div>
</div>
<p>Usually, config file options are placed before command-line options, reg=
ardless
of the actual operation to be performed. The exception is being made for th=
e
options prefixed with the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">$</span></code> character. These will be used only when lin=
ker
is being invoked, and added after all of the command-line specified linker
inputs. Here is some example of <code class=3D"docutils literal notranslate=
"><span class=3D"pre">$</span></code>-prefixed options:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span>$-Wl,-Bstatic $-lm
$-Wl,-Bshared
</pre></div>
</div>
</section>
</section>
<section id=3D"language-and-target-independent-features">
<h2><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id29" role=3D"doc-backlink">Language and Target-Independent Features=
</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual=
.html#language-and-target-independent-features" title=3D"Link to this headi=
ng">=C2=B6</a></h2>
<section id=3D"freestanding-builds">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id30" role=3D"doc-backlink">Freestanding Builds</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#freestanding-bu=
ilds" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Passing the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-ffreestanding</span></code> flag causes Clang to build for a freestan=
ding
(rather than a hosted) environment. The flag has the following effects:</p>
<ul class=3D"simple">
<li><p>the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__STDC_HOSTED__</span></code> predefined macro will expand to <code class=
=3D"docutils literal notranslate"><span class=3D"pre">0</span></code>,</p><=
/li>
<li><p>builtin functions are disabled by default (<code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">-fno-builtins</span></code>),</p></=
li>
<li><p>unwind tables are disabled by default
(<code class=3D"docutils literal notranslate"><span class=3D"pre">fno-async=
hronous-unwind-tables</span> <span class=3D"pre">-fno-unwind-tables</span><=
/code>), and</p></li>
<li><p>does not treat the global <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">main</span></code> function as a special function.</=
p></li>
</ul>
<p>An implementation of the following runtime library functions must always=
 be
provided with the usual semantics, as Clang will generate calls to them:</p=
>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
cpy</span></code>,</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
move</span></code>, and</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
set</span></code>.</p></li>
</ul>
<p>Clang does not, by itself, provide a full =E2=80=9Cconforming freestandi=
ng
implementation=E2=80=9D. If you wish to have a conforming freestanding impl=
ementation,
you must provide a freestanding C library. While Clang provides some of the
required header files, it does not provide all of them, nor any library
implementations.</p>
<p>Conversely, when <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">-ffreestanding</span></code> is specified, Clang does not require=
 you to
provide a conforming freestanding implementation library. Clang will not ma=
ke
any assumptions as to the availability or semantics of standard-library
functions other than those mentioned above.</p>
</section>
<section id=3D"controlling-errors-and-warnings">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id31" role=3D"doc-backlink">Controlling Errors and Warnings</a><a cl=
ass=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#con=
trolling-errors-and-warnings" title=3D"Link to this heading">=C2=B6</a></h3=
>
<p>Clang provides a number of ways to control which code constructs cause
it to emit errors and warning messages, and how they are displayed to
the console.</p>
<section id=3D"controlling-how-clang-displays-diagnostics">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id32" role=3D"doc-backlink">Controlling How Clang Displays Diagnosti=
cs</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#controlling-how-clang-displays-diagnostics" title=3D"Link to this h=
eading">=C2=B6</a></h4>
<p>When Clang emits a diagnostic, it includes rich information in the
output, and gives you fine-grain control over which information is
printed. Clang has the ability to print this information, and these are
the options that control it:</p>
<ol class=3D"arabic simple">
<li><p>A file/line/column indicator that shows exactly where the diagnostic
occurs in your code [<a class=3D"reference internal" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#opt-fshow-column"><span class=3D"std std-ref=
">-fshow-column</span></a>,
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#opt-fshow-source-location"><span class=3D"std std-ref">-fshow-sou=
rce-location</span></a>].</p></li>
<li><p>A categorization of the diagnostic as a note, warning, error, or
fatal error.</p></li>
<li><p>A text string that describes what the problem is.</p></li>
<li><p>An option that indicates how to control the diagnostic (for
diagnostics that support it)
[<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#opt-fdiagnostics-show-option"><span class=3D"std std-ref">-fdiag=
nostics-show-option</span></a>].</p></li>
<li><p>A <a class=3D"reference internal" href=3D"https://clang.llvm.org/doc=
s/UsersManual.html#diagnostics-categories"><span class=3D"std std-ref">high=
-level category</span></a> for the diagnostic
for clients that want to group diagnostics by class (for diagnostics
that support it)
[<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#cmdoption-fdiagnostics-show-category"><code class=3D"xref std st=
d-option docutils literal notranslate"><span class=3D"pre">-fdiagnostics-sh=
ow-category</span></code></a>].</p></li>
<li><p>The line of source code that the issue occurs on, along with a caret
and ranges that indicate the important locations
[<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#opt-fcaret-diagnostics"><span class=3D"std std-ref">-fcaret-diag=
nostics</span></a>].</p></li>
<li><p>=E2=80=9CFixIt=E2=80=9D information, which is a concise explanation =
of how to fix the
problem (when Clang is certain it knows)
[<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#opt-fdiagnostics-fixit-info"><span class=3D"std std-ref">-fdiagn=
ostics-fixit-info</span></a>].</p></li>
<li><p>A machine-parsable representation of the ranges involved (off by
default)
[<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#opt-fdiagnostics-print-source-range-info"><span class=3D"std std=
-ref">-fdiagnostics-print-source-range-info</span></a>].</p></li>
</ol>
<p>For more information please see <a class=3D"reference internal" href=3D"=
https://clang.llvm.org/docs/UsersManual.html#cl-diag-formatting"><span clas=
s=3D"std std-ref">Formatting of
Diagnostics</span></a>.</p>
</section>
<section id=3D"diagnostic-mappings">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id33" role=3D"doc-backlink">Diagnostic Mappings</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#diagnostic-mapp=
ings" title=3D"Link to this heading">=C2=B6</a></h4>
<p>All diagnostics are mapped into one of these 6 classes:</p>
<ul class=3D"simple">
<li><p>Ignored</p></li>
<li><p>Note</p></li>
<li><p>Remark</p></li>
<li><p>Warning</p></li>
<li><p>Error</p></li>
<li><p>Fatal</p></li>
</ul>
</section>
<section id=3D"diagnostic-categories">
<span id=3D"diagnostics-categories"></span><h4><a class=3D"toc-backref" hre=
f=3D"https://clang.llvm.org/docs/UsersManual.html#id34" role=3D"doc-backlin=
k">Diagnostic Categories</a><a class=3D"headerlink" href=3D"https://clang.l=
lvm.org/docs/UsersManual.html#diagnostic-categories" title=3D"Link to this =
heading">=C2=B6</a></h4>
<p>Though not shown by default, diagnostics may each be associated with a
high-level category. This category is intended to make it possible to
triage builds that produce a large number of errors or warnings in a
grouped way.</p>
<p>Categories are not shown by default, but they can be turned on with the
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#cmdoption-fdiagnostics-show-category"><code class=3D"xref std std=
-option docutils literal notranslate"><span class=3D"pre">-fdiagnostics-sho=
w-category</span></code></a> option.
When set to =E2=80=9C<code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">name</span></code>=E2=80=9D, the category is printed textually i=
n the
diagnostic output. When it is set to =E2=80=9C<code class=3D"docutils liter=
al notranslate"><span class=3D"pre">id</span></code>=E2=80=9D, a category n=
umber is
printed. The mapping of category names to category id=E2=80=99s can be obta=
ined
by running =E2=80=98<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">clang</span>&nbsp;&nbsp; <span class=3D"pre">--print-diagnostic-c=
ategories</span></code>=E2=80=99.</p>
</section>
<section id=3D"controlling-diagnostics-via-command-line-flags">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id35" role=3D"doc-backlink">Controlling Diagnostics via Command Line=
 Flags</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Users=
Manual.html#controlling-diagnostics-via-command-line-flags" title=3D"Link t=
o this heading">=C2=B6</a></h4>
<p>TODO: -W flags, -pedantic, etc</p>
</section>
<section id=3D"controlling-diagnostics-via-pragmas">
<span id=3D"pragma-gcc-diagnostic"></span><h4><a class=3D"toc-backref" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#id36" role=3D"doc-backlink=
">Controlling Diagnostics via Pragmas</a><a class=3D"headerlink" href=3D"ht=
tps://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-prag=
mas" title=3D"Link to this heading">=C2=B6</a></h4>
<p>Clang can also control what diagnostics are enabled through the use of
pragmas in the source code. This is useful for turning off specific
warnings in a section of source code. Clang supports GCC=E2=80=99s pragma f=
or
compatibility with existing source code, so <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">#pragma</span> <span class=3D"pre">GCC</s=
pan> <span class=3D"pre">diagnostic</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">#pragm=
a</span> <span class=3D"pre">clang</span> <span class=3D"pre">diagnostic</s=
pan></code> are synonyms for Clang. GCC will ignore
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">clang</span> <span class=3D"pre">diagnostic</span>=
</code>, though.</p>
<p>The pragma may control any warning that can be used from the command
line. Warnings may be set to ignored, warning, error, or fatal. The
following example code will tell Clang or GCC to ignore the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">-Wall</span></code>
warnings:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#pragma GCC diagnostic ignored "-Wall"</span>
</pre></div>
</div>
<p>Clang also allows you to push and pop the current warning state. This is
particularly useful when writing a header file that will be compiled by
other people, because you don=E2=80=99t know what warning flags they build =
with.</p>
<p>In the below example <a class=3D"reference internal" href=3D"https://cla=
ng.llvm.org/docs/UsersManual.html#cmdoption-Wextra-tokens"><code class=3D"x=
ref std std-option docutils literal notranslate"><span class=3D"pre">-Wextr=
a-tokens</span></code></a> is ignored for only a single line
of code, after which the diagnostics return to whatever state had previousl=
y
existed.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#if foo</span>
<span class=3D"cp">#endif foo </span><span class=3D"c1">// warning: extra t=
okens at end of #endif directive</span>

<span class=3D"cp">#pragma GCC diagnostic push</span>
<span class=3D"cp">#pragma GCC diagnostic ignored "-Wextra-tokens"</span>

<span class=3D"cp">#if foo</span>
<span class=3D"cp">#endif foo </span><span class=3D"c1">// no warning</span=
>

<span class=3D"cp">#pragma GCC diagnostic pop</span>
</pre></div>
</div>
<p>The push and pop pragmas will save and restore the full diagnostic state
of the compiler, regardless of how it was set. It should be noted that whil=
e Clang
supports the GCC pragma, Clang and GCC do not support the exact same set
of warnings, so even when using GCC compatible #pragmas there is no
guarantee that they will have identical behaviour on both compilers.</p>
<p>Clang also doesn=E2=80=99t yet support GCC behavior for <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">#pragma</span> <span class=
=3D"pre">diagnostic</span> <span class=3D"pre">pop</span></code>
that doesn=E2=80=99t have a corresponding <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">#pragma</span> <span class=3D"pre">diagnost=
ic</span> <span class=3D"pre">push</span></code>. In this case
GCC pretends that there is a <code class=3D"docutils literal notranslate"><=
span class=3D"pre">#pragma</span> <span class=3D"pre">diagnostic</span> <sp=
an class=3D"pre">push</span></code> at the very beginning
of the source file, so =E2=80=9Cunpaired=E2=80=9D <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">#pragma</span> <span class=3D"pre">=
diagnostic</span> <span class=3D"pre">pop</span></code> matches that
implicit push. This makes a difference for <code class=3D"docutils literal =
notranslate"><span class=3D"pre">#pragma</span> <span class=3D"pre">GCC</sp=
an> <span class=3D"pre">diagnostic</span> <span class=3D"pre">ignored</span=
></code>
which are not guarded by push and pop. Refer to
<a class=3D"reference external" href=3D"https://gcc.gnu.org/onlinedocs/gcc/=
Diagnostic-Pragmas.html">GCC documentation</a>
for details.</p>
<p>Like GCC, Clang accepts <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">ignored</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">warning</span></code>, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">error</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">fatal</span></cod=
e>
severity levels. They can be used to change severity of a particular diagno=
stic
for a region of source file. A notable difference from GCC is that diagnost=
ic
not enabled via command line arguments can=E2=80=99t be enabled this way ye=
t.</p>
<p>Some diagnostics associated with a <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-W</span></code> flag have the error severity b=
y
default. They can be ignored or downgraded to warnings:</p>
<div class=3D"highlight-cpp notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"c1">// C only</span>
<span class=3D"cp">#pragma GCC diagnostic warning "-Wimplicit-function-decl=
aration"</span>
<span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">m=
ain</span><span class=3D"p">(</span><span class=3D"kt">void</span><span cla=
ss=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span =
class=3D"w"> </span><span class=3D"n">puts</span><span class=3D"p">(</span>=
<span class=3D"s">""</span><span class=3D"p">);</span><span class=3D"w"> </=
span><span class=3D"p">}</span>
</pre></div>
</div>
<p>In addition to controlling warnings and errors generated by the compiler=
, it is
possible to generate custom warning and error messages through the followin=
g
pragmas:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"c1">// The following will produce warning messages</s=
pan>
<span class=3D"cp">#pragma message "some diagnostic message"</span>
<span class=3D"cp">#pragma GCC warning "TODO: replace deprecated feature"</=
span>

<span class=3D"c1">// The following will produce an error message</span>
<span class=3D"cp">#pragma GCC error "Not supported"</span>
</pre></div>
</div>
<p>These pragmas operate similarly to the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">#warning</span></code> and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">#error</span></code> prepr=
ocessor
directives, except that they may also be embedded into preprocessor macros =
via
the C99 <code class=3D"docutils literal notranslate"><span class=3D"pre">_P=
ragma</span></code> operator, for example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define STR(X) #X</span>
<span class=3D"cp">#define DEFER(M,...) M(__VA_ARGS__)</span>
<span class=3D"cp">#define CUSTOM_ERROR(X) _Pragma(STR(GCC error(X " at lin=
e " DEFER(STR,__LINE__))))</span>

<span class=3D"n">CUSTOM_ERROR</span><span class=3D"p">(</span><span class=
=3D"s">"Feature not available"</span><span class=3D"p">);</span>
</pre></div>
</div>
</section>
<section id=3D"controlling-diagnostics-in-system-headers">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id37" role=3D"doc-backlink">Controlling Diagnostics in System Header=
s</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#controlling-diagnostics-in-system-headers" title=3D"Link to this hea=
ding">=C2=B6</a></h4>
<p>Warnings are suppressed when they occur in system headers. By default,
an included file is treated as a system header if it is found in an
include path specified by <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">-isystem</span></code>, but this can be overridden in
several ways.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sys=
tem_header</span></code> pragma can be used to mark the current file as
being a system header. No warnings will be produced from the location of
the pragma onwards within the same file.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#if foo</span>
<span class=3D"cp">#endif foo </span><span class=3D"c1">// warning: extra t=
okens at end of #endif directive</span>

<span class=3D"cp">#pragma clang system_header</span>

<span class=3D"cp">#if foo</span>
<span class=3D"cp">#endif foo </span><span class=3D"c1">// no warning</span=
>
</pre></div>
</div>
<p>The <cite>=E2=80=93system-header-prefix=3D</cite> and <cite>=E2=80=93no-=
system-header-prefix=3D</cite>
command-line arguments can be used to override whether subsets of an includ=
e
path are treated as system headers. When the name in a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">#include</span></code> directi=
ve
is found within a header search path and starts with a system prefix, the
header is treated as a system header. The last prefix on the
command-line which matches the specified header name takes precedence.
For instance:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-If=
oo<span class=3D"w"> </span>-isystem<span class=3D"w"> </span>bar<span clas=
s=3D"w"> </span>--system-header-prefix<span class=3D"o">=3D</span>x/<span c=
lass=3D"w"> </span><span class=3D"se">\</span>
<span class=3D"w">    </span>--no-system-header-prefix<span class=3D"o">=3D=
</span>x/y/
</pre></div>
</div>
<p>Here, <code class=3D"docutils literal notranslate"><span class=3D"pre">#=
include</span> <span class=3D"pre">"x/a.h"</span></code> is treated as incl=
uding a system header, even
if the header is found in <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">foo</span></code>, and <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">#include</span> <span class=3D"pre">"x/y/b.h"<=
/span></code> is treated
as not including a system header, even if the header is found in
<code class=3D"docutils literal notranslate"><span class=3D"pre">bar</span>=
</code>.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">#incl=
ude</span></code> directive which finds a file relative to the current
directory is treated as including a system header if the including file
is treated as a system header.</p>
</section>
<section id=3D"controlling-deprecation-diagnostics-in-clang-provided-c-runt=
ime-headers">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id38" role=3D"doc-backlink">Controlling Deprecation Diagnostics in C=
lang-Provided C Runtime Headers</a><a class=3D"headerlink" href=3D"https://=
clang.llvm.org/docs/UsersManual.html#controlling-deprecation-diagnostics-in=
-clang-provided-c-runtime-headers" title=3D"Link to this heading">=C2=B6</a=
></h4>
<p>Clang is responsible for providing some of the C runtime headers that ca=
nnot be
provided by a platform CRT, such as implementation limits or when compiling=
 in
freestanding mode. Define the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">_CLANG_DISABLE_CRT_DEPRECATION_WARNINGS</span></code> m=
acro
prior to including such a C runtime header to disable the deprecation warni=
ngs.
Note that the C Standard Library headers are allowed to transitively includ=
e
other standard library headers (see 7.1.2p5), and so the most appropriate u=
se
of this macro is to set it within the build system using <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">-D</span></code> or before a=
ny
include directives in the translation unit.</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#define _CLANG_DISABLE_CRT_DEPRECATION_WARNINGS</=
span>
<span class=3D"cp">#include</span><span class=3D"w"> </span><span class=3D"=
cpf">&lt;stdint.h&gt;</span><span class=3D"c1">    // Clang CRT deprecation=
 warnings are disabled.</span>
<span class=3D"cp">#include</span><span class=3D"w"> </span><span class=3D"=
cpf">&lt;stdatomic.h&gt;</span><span class=3D"c1"> // Clang CRT deprecation=
 warnings are disabled.</span>
</pre></div>
</div>
</section>
<section id=3D"enabling-all-diagnostics">
<span id=3D"diagnostics-enable-everything"></span><h4><a class=3D"toc-backr=
ef" href=3D"https://clang.llvm.org/docs/UsersManual.html#id39" role=3D"doc-=
backlink">Enabling All Diagnostics</a><a class=3D"headerlink" href=3D"https=
://clang.llvm.org/docs/UsersManual.html#enabling-all-diagnostics" title=3D"=
Link to this heading">=C2=B6</a></h4>
<p>In addition to the traditional <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-W</span></code> flags, one can enable <strong>all<=
/strong> diagnostics
by passing <a class=3D"reference internal" href=3D"https://clang.llvm.org/d=
ocs/UsersManual.html#cmdoption-Weverything"><code class=3D"xref std std-opt=
ion docutils literal notranslate"><span class=3D"pre">-Weverything</span></=
code></a>. This works as expected with
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#cmdoption-Werror"><code class=3D"xref std std-option docutils lit=
eral notranslate"><span class=3D"pre">-Werror</span></code></a>, and also i=
ncludes the warnings from <a class=3D"reference internal" href=3D"https://c=
lang.llvm.org/docs/UsersManual.html#cmdoption-pedantic"><code class=3D"xref=
 std std-option docutils literal notranslate"><span class=3D"pre">-pedantic=
</span></code></a>. Some
diagnostics contradict each other, therefore, users of <a class=3D"referenc=
e internal" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-=
Weverything"><code class=3D"xref std std-option docutils literal notranslat=
e"><span class=3D"pre">-Weverything</span></code></a>
often disable many diagnostics such as <cite>-Wno-c++98-compat</cite> and <=
cite>-Wno-c++-compat</cite>
because they contradict recent C++ standards.</p>
<p>Since <a class=3D"reference internal" href=3D"https://clang.llvm.org/doc=
s/UsersManual.html#cmdoption-Weverything"><code class=3D"xref std std-optio=
n docutils literal notranslate"><span class=3D"pre">-Weverything</span></co=
de></a> enables every diagnostic, we generally don=E2=80=99t
recommend using it. <cite>-Wall</cite> <cite>-Wextra</cite> are a better ch=
oice for most projects.
Using <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/U=
sersManual.html#cmdoption-Weverything"><code class=3D"xref std std-option d=
ocutils literal notranslate"><span class=3D"pre">-Weverything</span></code>=
</a> means that updating your compiler is more difficult
because you=E2=80=99re exposed to experimental diagnostics which might be o=
f lower
quality than the default ones. If you do use <a class=3D"reference internal=
" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Weverythin=
g"><code class=3D"xref std std-option docutils literal notranslate"><span c=
lass=3D"pre">-Weverything</span></code></a> then we
advise that you address all new compiler diagnostics as they get added to C=
lang,
either by fixing everything they find or explicitly disabling that diagnost=
ic
with its corresponding <cite>Wno-</cite> option.</p>
<p>Note that when combined with <a class=3D"reference internal" href=3D"htt=
ps://clang.llvm.org/docs/UsersManual.html#cmdoption-w"><code class=3D"xref =
std std-option docutils literal notranslate"><span class=3D"pre">-w</span><=
/code></a> (which disables all warnings),
disabling all warnings wins.</p>
</section>
<section id=3D"controlling-diagnostics-via-suppression-mappings">
<span id=3D"warning-suppression-mappings"></span><h4><a class=3D"toc-backre=
f" href=3D"https://clang.llvm.org/docs/UsersManual.html#id40" role=3D"doc-b=
acklink">Controlling Diagnostics via Suppression Mappings</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#controlling-=
diagnostics-via-suppression-mappings" title=3D"Link to this heading">=C2=B6=
</a></h4>
<p>Warning suppression mappings enable users to suppress Clang=E2=80=99s di=
agnostics at a
per-file granularity. This allows enforcing diagnostics in specific parts o=
f the
project even if there are violations in some headers.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>cat<span class=3D"w"> </span>mappi=
ngs.txt
<span class=3D"go">[unused]</span>
<span class=3D"go">src:foo/*</span>

<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--warning-suppre=
ssion-mappings<span class=3D"o">=3D</span>mapping.txt<span class=3D"w"> </s=
pan>-Wunused<span class=3D"w"> </span>foo/bar.cc
<span class=3D"gp"># </span>This<span class=3D"w"> </span>compilation<span =
class=3D"w"> </span>won<span class=3D"s1">'t emit any unused findings for s=
ources under foo/</span>
<span class=3D"gp"># </span><span class=3D"s1">directory. But it'</span>ll<=
span class=3D"w"> </span>still<span class=3D"w"> </span>complain<span class=
=3D"w"> </span><span class=3D"k">for</span><span class=3D"w"> </span>all<sp=
an class=3D"w"> </span>the<span class=3D"w"> </span>other<span class=3D"w">=
 </span>sources,<span class=3D"w"> </span>e.g:
<span class=3D"gp">$ </span>cat<span class=3D"w"> </span>foo/bar.cc
<span class=3D"gp">#</span>include<span class=3D"w"> </span><span class=3D"=
s2">"dir/include.h"</span><span class=3D"w"> </span>//<span class=3D"w"> </=
span>Clang<span class=3D"w"> </span>flags<span class=3D"w"> </span>unused<s=
pan class=3D"w"> </span>declarations<span class=3D"w"> </span>here.
<span class=3D"gp">#</span>include<span class=3D"w"> </span><span class=3D"=
s2">"foo/include.h"</span><span class=3D"w"> </span>//<span class=3D"w"> </=
span>but<span class=3D"w"> </span>unused<span class=3D"w"> </span>warnings<=
span class=3D"w"> </span>under<span class=3D"w"> </span>this<span class=3D"=
w"> </span><span class=3D"nb">source</span><span class=3D"w"> </span>is<spa=
n class=3D"w"> </span>omitted.
<span class=3D"gp">#</span>include<span class=3D"w"> </span><span class=3D"=
s2">"next_to_bar_cc.h"</span><span class=3D"w"> </span>//<span class=3D"w">=
 </span>as<span class=3D"w"> </span>are<span class=3D"w"> </span>unused<spa=
n class=3D"w"> </span>warnings<span class=3D"w"> </span>from<span class=3D"=
w"> </span>this<span class=3D"w"> </span>header<span class=3D"w"> </span>fi=
le.
<span class=3D"go">// Further, unused warnings in the remainder of bar.cc a=
re also omitted.</span>
</pre></div>
</div>
<p>See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
WarningSuppressionMappings.html"><span class=3D"doc">Warning suppression ma=
ppings</span></a> for details about the file format and
functionality.</p>
</section>
<section id=3D"controlling-static-analyzer-diagnostics">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id41" role=3D"doc-backlink">Controlling Static Analyzer Diagnostics<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.=
html#controlling-static-analyzer-diagnostics" title=3D"Link to this heading=
">=C2=B6</a></h4>
<p>While not strictly part of the compiler, the diagnostics from Clang=E2=
=80=99s
<a class=3D"reference external" href=3D"https://clang-analyzer.llvm.org/">s=
tatic analyzer</a> can also be
influenced by the user via changes to the source code. See the available
<a class=3D"reference external" href=3D"https://clang.llvm.org/docs/analyze=
r/user-docs/Annotations.html">annotations</a> and the analyzer=E2=80=99s
<a class=3D"reference external" href=3D"https://clang.llvm.org/docs/analyze=
r/user-docs/FAQ.html#exclude-code">FAQ page</a> for more information.</p>
</section>
</section>
<section id=3D"precompiled-headers">
<span id=3D"usersmanual-precompiled-headers"></span><h3><a class=3D"toc-bac=
kref" href=3D"https://clang.llvm.org/docs/UsersManual.html#id42" role=3D"do=
c-backlink">Precompiled Headers</a><a class=3D"headerlink" href=3D"https://=
clang.llvm.org/docs/UsersManual.html#precompiled-headers" title=3D"Link to =
this heading">=C2=B6</a></h3>
<p><a class=3D"reference external" href=3D"https://en.wikipedia.org/wiki/Pr=
ecompiled_header">Precompiled headers</a>
are a general approach employed by many compilers to reduce compilation
time. The underlying motivation of the approach is that it is common for
the same (and often large) header files to be included by multiple
source files. Consequently, compile times can often be greatly improved
by caching some of the (redundant) work done by a compiler to process
headers. Precompiled header files, which represent one of many ways to
implement this optimization, are literally files that represent an
on-disk cache that contains the vital information necessary to reduce
some of the work needed to process a corresponding header file. While
details of precompiled headers vary between compilers, precompiled
headers have been shown to be highly effective at speeding up program
compilation on systems with very large system headers (e.g., macOS).</p>
<section id=3D"generating-a-pch-file">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id43" role=3D"doc-backlink">Generating a PCH File</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#generating-a-=
pch-file" title=3D"Link to this heading">=C2=B6</a></h4>
<p>To generate a PCH file using Clang, one invokes Clang with the
<cite>-x &lt;language&gt;-header</cite> option. This mirrors the interface =
in GCC
for generating PCH files:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>gcc<span class=3D"w"> </span>-x<sp=
an class=3D"w"> </span>c-header<span class=3D"w"> </span>test.h<span class=
=3D"w"> </span>-o<span class=3D"w"> </span>test.h.gch
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-x<span class=3D=
"w"> </span>c-header<span class=3D"w"> </span>test.h<span class=3D"w"> </sp=
an>-o<span class=3D"w"> </span>test.h.pch
</pre></div>
</div>
</section>
<section id=3D"using-a-pch-file">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id44" role=3D"doc-backlink">Using a PCH File</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/UsersManual.html#using-a-pch-file" =
title=3D"Link to this heading">=C2=B6</a></h4>
<p>A PCH file can then be used as a prefix header when a <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">-include-pch</span></code>
option is passed to <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">clang</span></code>:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-in=
clude-pch<span class=3D"w"> </span>test.h.pch<span class=3D"w"> </span>test=
.c<span class=3D"w"> </span>-o<span class=3D"w"> </span><span class=3D"nb">=
test</span>
</pre></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng</span></code> driver will check if the PCH file <code class=3D"docutils =
literal notranslate"><span class=3D"pre">test.h.pch</span></code> is
available; if so, the contents of <code class=3D"docutils literal notransla=
te"><span class=3D"pre">test.h</span></code> (and the files it includes)
will be processed from the PCH file. Otherwise, Clang will report an error.=
</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>Clang does <em>not</em> automatically use PCH files for headers that are=
 directly
included within a source file or indirectly via <a class=3D"reference inter=
nal" href=3D"https://clang.llvm.org/docs/CommandGuide/clang.html#cmdoption-=
include"><code class=3D"xref std std-option docutils literal notranslate"><=
span class=3D"pre">-include</span></code></a>.
For example:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-x<=
span class=3D"w"> </span>c-header<span class=3D"w"> </span>test.h<span clas=
s=3D"w"> </span>-o<span class=3D"w"> </span>test.h.pch
<span class=3D"gp">$ </span>cat<span class=3D"w"> </span>test.c
<span class=3D"gp">#</span>include<span class=3D"w"> </span><span class=3D"=
s2">"test.h"</span>
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>test.c<span clas=
s=3D"w"> </span>-o<span class=3D"w"> </span><span class=3D"nb">test</span>
</pre></div>
</div>
<p>In this example, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">clang</span></code> will not automatically use the PCH file for
<code class=3D"docutils literal notranslate"><span class=3D"pre">test.h</sp=
an></code> since <code class=3D"docutils literal notranslate"><span class=
=3D"pre">test.h</span></code> was included directly in the source file and =
not
specified on the command line using <code class=3D"docutils literal notrans=
late"><span class=3D"pre">-include-pch</span></code>.</p>
</div>
</section>
<section id=3D"relocatable-pch-files">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id45" role=3D"doc-backlink">Relocatable PCH Files</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#relocatable-p=
ch-files" title=3D"Link to this heading">=C2=B6</a></h4>
<p>It is sometimes necessary to build a precompiled header from headers
that are not yet in their final, installed locations. For example, one
might build a precompiled header within the build tree that is then
meant to be installed alongside the headers. Clang permits the creation
of =E2=80=9Crelocatable=E2=80=9D precompiled headers, which are built with =
a given path
(into the build directory) and can later be used from an installed
location.</p>
<p>To build a relocatable precompiled header, place your headers into a
subdirectory whose structure mimics the installed location. For example,
if you want to build a precompiled header for the header <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">mylib.h</span></code>
that will be installed into <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">/usr/include</span></code>, create a subdirectory
<code class=3D"docutils literal notranslate"><span class=3D"pre">build/usr/=
include</span></code> and place the header <code class=3D"docutils literal =
notranslate"><span class=3D"pre">mylib.h</span></code> into that
subdirectory. If <code class=3D"docutils literal notranslate"><span class=
=3D"pre">mylib.h</span></code> depends on other headers, then they can be
stored within <code class=3D"docutils literal notranslate"><span class=3D"p=
re">build/usr/include</span></code> in a way that mimics the installed
location.</p>
<p>Building a relocatable precompiled header requires two additional
arguments. First, pass the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">--relocatable-pch</span></code> flag to indicate that
the resulting PCH file should be relocatable. Second, pass
<code class=3D"docutils literal notranslate"><span class=3D"pre">-isysroot<=
/span> <span class=3D"pre">/path/to/build</span></code>, which makes all in=
cludes for your library
relative to the build directory. For example:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp"># </span>clang<span class=3D"w"> </span>-x<=
span class=3D"w"> </span>c-header<span class=3D"w"> </span>--relocatable-pc=
h<span class=3D"w"> </span>-isysroot<span class=3D"w"> </span>/path/to/buil=
d<span class=3D"w"> </span>/path/to/build/mylib.h<span class=3D"w"> </span>=
mylib.h.pch
</pre></div>
</div>
<p>When loading the relocatable PCH file, the various headers used in the
PCH file are found from the system header root. For example, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">mylib.h</span></code>
can be found in <code class=3D"docutils literal notranslate"><span class=3D=
"pre">/usr/include/mylib.h</span></code>. If the headers are installed
in some other system root, the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">-isysroot</span></code> option can be used provide
a different system root from which the headers will be based. For
example, <code class=3D"docutils literal notranslate"><span class=3D"pre">-=
isysroot</span> <span class=3D"pre">/Developer/SDKs/MacOSX10.4u.sdk</span><=
/code> will look for
<code class=3D"docutils literal notranslate"><span class=3D"pre">mylib.h</s=
pan></code> in <code class=3D"docutils literal notranslate"><span class=3D"=
pre">/Developer/SDKs/MacOSX10.4u.sdk/usr/include/mylib.h</span></code>.</p>
<p>Relocatable precompiled headers are intended to be used in a limited
number of cases where the compilation environment is tightly controlled
and the precompiled header cannot be generated after headers have been
installed.</p>
</section>
</section>
<section id=3D"controlling-floating-point-behavior">
<span id=3D"controlling-fp-behavior"></span><h3><a class=3D"toc-backref" hr=
ef=3D"https://clang.llvm.org/docs/UsersManual.html#id46" role=3D"doc-backli=
nk">Controlling Floating Point Behavior</a><a class=3D"headerlink" href=3D"=
https://clang.llvm.org/docs/UsersManual.html#controlling-floating-point-beh=
avior" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Clang provides a number of ways to control floating point behavior, incl=
uding
with command line options and source pragmas. This section
describes the various floating point semantic modes and the corresponding o=
ptions.</p>
<table class=3D"docutils align-default" id=3D"id14">
<caption><span class=3D"caption-text">Floating Point Semantic Modes</span><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html=
#id14" title=3D"Link to this table">=C2=B6</a></caption>
<colgroup>
<col style=3D"width: 20.0%">
<col style=3D"width: 40.0%">
<col style=3D"width: 40.0%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Mode</p></th>
<th class=3D"head"><p>Values</p></th>
<th class=3D"head"></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p>ffp-exception-behavior</p></td>
<td><p>{ignore, strict, maytrap}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>fenv_access</p></td>
<td><p>{off, on}</p></td>
<td><p>(none)</p></td>
</tr>
<tr class=3D"row-even"><td><p>frounding-math</p></td>
<td><p>{dynamic, tonearest, downward, upward, towardzero}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>ffp-contract</p></td>
<td><p>{on, off, fast, fast-honor-pragmas}</p></td>
<td></td>
</tr>
<tr class=3D"row-even"><td><p>fdenormal-fp-math</p></td>
<td><p>{IEEE, PreserveSign, PositiveZero}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>fdenormal-fp-math-fp32</p></td>
<td><p>{IEEE, PreserveSign, PositiveZero}</p></td>
<td></td>
</tr>
<tr class=3D"row-even"><td><p>fmath-errno</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>fhonor-nans</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-even"><td><p>fhonor-infinities</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>fsigned-zeros</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-even"><td><p>freciprocal-math</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>fallow-approximate-fns</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-even"><td><p>fassociative-math</p></td>
<td><p>{on, off}</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p>fcomplex-arithmetic</p></td>
<td><p>{basic, improved, full, promoted}</p></td>
<td></td>
</tr>
</tbody>
</table>
<p>This table describes the option settings that correspond to the three
floating point semantic models: precise (the default), strict, and fast.</p=
>
<table class=3D"docutils align-default" id=3D"id15">
<caption><span class=3D"caption-text">Floating Point Models</span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#id15" =
title=3D"Link to this table">=C2=B6</a></caption>
<colgroup>
<col style=3D"width: 20.0%">
<col style=3D"width: 20.0%">
<col style=3D"width: 20.0%">
<col style=3D"width: 20.0%">
<col style=3D"width: 20.0%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Mode</p></th>
<th class=3D"head"><p>Precise</p></th>
<th class=3D"head"><p>Strict</p></th>
<th class=3D"head"><p>Fast</p></th>
<th class=3D"head"><p>Aggressive</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p>except_behavior</p></td>
<td><p>ignore</p></td>
<td><p>strict</p></td>
<td><p>ignore</p></td>
<td><p>ignore</p></td>
</tr>
<tr class=3D"row-odd"><td><p>fenv_access</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
</tr>
<tr class=3D"row-even"><td><p>rounding_mode</p></td>
<td><p>tonearest</p></td>
<td><p>dynamic</p></td>
<td><p>tonearest</p></td>
<td><p>tonearest</p></td>
</tr>
<tr class=3D"row-odd"><td><p>contract</p></td>
<td><p>on</p></td>
<td><p>off</p></td>
<td><p>fast</p></td>
<td><p>fast</p></td>
</tr>
<tr class=3D"row-even"><td><p>support_math_errno</p></td>
<td><p>on</p></td>
<td><p>on</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
</tr>
<tr class=3D"row-odd"><td><p>no_honor_nans</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
</tr>
<tr class=3D"row-even"><td><p>no_honor_infinities</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
</tr>
<tr class=3D"row-odd"><td><p>no_signed_zeros</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
<td><p>on</p></td>
</tr>
<tr class=3D"row-even"><td><p>allow_reciprocal</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
<td><p>on</p></td>
</tr>
<tr class=3D"row-odd"><td><p>allow_approximate_fns</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
<td><p>on</p></td>
</tr>
<tr class=3D"row-even"><td><p>allow_reassociation</p></td>
<td><p>off</p></td>
<td><p>off</p></td>
<td><p>on</p></td>
<td><p>on</p></td>
</tr>
<tr class=3D"row-odd"><td><p>complex_arithmetic</p></td>
<td><p>full</p></td>
<td><p>full</p></td>
<td><p>promoted</p></td>
<td><p>basic</p></td>
</tr>
</tbody>
</table>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
p-model</span></code> option does not modify the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">fdenormal-fp-math</span></code>
setting, but it does have an impact on whether <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">crtfastmath.o</span></code> is
linked. Because linking <code class=3D"docutils literal notranslate"><span =
class=3D"pre">crtfastmath.o</span></code> has a global effect on the
program, and because the global denormal handling can be changed in
other ways, the state of <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">fdenormal-fp-math</span></code> handling cannot
be assumed in any function based on fp-model. See <a class=3D"reference int=
ernal" href=3D"https://clang.llvm.org/docs/UsersManual.html#crtfastmath-o">=
<span class=3D"std std-ref">A note about crtfastmath.o</span></a>
for more details.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ffast-math">
<span class=3D"sig-name descname"><span class=3D"pre">-ffast-math</span></s=
pan><span class=3D"sig-prename descclassname"></span><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-ffast-math=
" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable fast-math mode.  This option lets the
compiler make aggressive, potentially-lossy assumptions about
floating-point math.  These include:</p>
<ul class=3D"simple">
<li><p>Floating-point math obeys regular algebraic rules for real numbers (=
e.g.
<code class=3D"docutils literal notranslate"><span class=3D"pre">+</span></=
code> and <code class=3D"docutils literal notranslate"><span class=3D"pre">=
*</span></code> are associative, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">x/y</span> <span class=3D"pre">=3D=3D</span> <span c=
lass=3D"pre">x</span> <span class=3D"pre">*</span> <span class=3D"pre">(1/y=
)</span></code>, and
<code class=3D"docutils literal notranslate"><span class=3D"pre">(a</span> =
<span class=3D"pre">+</span> <span class=3D"pre">b)</span> <span class=3D"p=
re">*</span> <span class=3D"pre">c</span> <span class=3D"pre">=3D=3D</span>=
 <span class=3D"pre">a</span> <span class=3D"pre">*</span> <span class=3D"p=
re">c</span> <span class=3D"pre">+</span> <span class=3D"pre">b</span> <spa=
n class=3D"pre">*</span> <span class=3D"pre">c</span></code>),</p></li>
<li><p>No <code class=3D"docutils literal notranslate"><span class=3D"pre">=
NaN</span></code> or infinite values will be operands or results of
floating-point operations,</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">+0<=
/span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-0</span></code> may be treated as interchangeable.</p></li>
</ul>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ffast-=
math</span></code> also defines the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__FAST_MATH__</span></code> preprocessor
macro. Some math libraries recognize this macro and change their behavior.
With the exception of <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">-ffp-contract=3Dfast</span></code>, using any of the options
below to disable any of the individual optimizations in <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">-ffast-math</span></code>
will cause <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>__FAST_MATH__</span></code> to no longer be set.
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffast-mat=
h</span></code> enables <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-fcx-limited-range</span></code>.</p>
<p>This option implies:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-honor-infinities</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-honor-nans</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fa=
pprox-func</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-math-errno</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
inite-math-only</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fa=
ssociative-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fr=
eciprocal-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-signed-zeros</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-trapping-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-rounding-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
p-contract=3Dfast</span></code></p></li>
</ul>
<p>Note: <code class=3D"docutils literal notranslate"><span class=3D"pre">-=
ffast-math</span></code> causes <code class=3D"docutils literal notranslate=
"><span class=3D"pre">crtfastmath.o</span></code> to be linked with code un=
less
<code class=3D"docutils literal notranslate"><span class=3D"pre">-shared</s=
pan></code> or <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-mno-daz-ftz</span></code> is present. See
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#crtfastmath-o"><span class=3D"std std-ref">A note about crtfastma=
th.o</span></a> for more details.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-fast-math">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-fast-math</span>=
</span><span class=3D"sig-prename descclassname"></span><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fno-fas=
t-math" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Disable fast-math mode.  This options disables unsafe floating-point
optimizations by preventing the compiler from making any transformations th=
at
could affect the results.</p>
<p>This option implies:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fh=
onor-infinities</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fh=
onor-nans</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-approx-func</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-finite-math-only</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-associative-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-reciprocal-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
igned-zeros</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
p-contract=3Don</span></code></p></li>
</ul>
<p>Also, this option resets following options to their target-dependent def=
aults.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-f[=
no-]math-errno</span></code></p></li>
</ul>
<p>There is ambiguity about how <code class=3D"docutils literal notranslate=
"><span class=3D"pre">-ffp-contract</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">-ffast-math</span></code>,
and <code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-f=
ast-math</span></code> behave when combined. To keep the value of
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-contr=
act</span></code> consistent, we define this set of rules:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
ast-math</span></code> sets <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">ffp-contract</span></code> to <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">fast</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-fast-math</span></code> sets <code class=3D"docutils literal notranslate"=
><span class=3D"pre">-ffp-contract</span></code> to <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">on</span></code> (<code class=3D"=
docutils literal notranslate"><span class=3D"pre">fast</span></code> for CU=
DA and
HIP).</p></li>
<li><p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">=
-ffast-math</span></code> and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-ffp-contract</span></code> are both seen, but
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffast-mat=
h</span></code> is not followed by <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-fno-fast-math</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">ffp-contract</span></code>
will be given the value of whichever option was last seen.</p></li>
<li><p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">=
-fno-fast-math</span></code> is seen and <code class=3D"docutils literal no=
translate"><span class=3D"pre">-ffp-contract</span></code> has been seen at=
 least
once, the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
ffp-contract</span></code> will get the value of the last seen value of
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-contr=
act</span></code>.</p></li>
<li><p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">=
-fno-fast-math</span></code> is seen and <code class=3D"docutils literal no=
translate"><span class=3D"pre">-ffp-contract</span></code> has not been see=
n, the
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-contr=
act</span></code> setting is determined by the default value of
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-contr=
act</span></code>.</p></li>
</ul>
<p>Note: <code class=3D"docutils literal notranslate"><span class=3D"pre">-=
fno-fast-math</span></code> causes <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">crtfastmath.o</span></code> to not be linked with =
code
unless <code class=3D"docutils literal notranslate"><span class=3D"pre">-md=
az-ftz</span></code> is present.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdenormal-fp-math">
<span class=3D"sig-name descname"><span class=3D"pre">-fdenormal-fp-math</s=
pan></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3D&lt;value&gt;</span></span><a class=3D"headerlink" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#cmdoption-fdenormal-fp-math" title=3D"Link =
to this definition">=C2=B6</a></dt>
<dd><p>Select which denormal numbers the code is permitted to require.</p>
<p>Valid values are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">iee=
e</span></code> - IEEE 754 denormal numbers</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pre=
serve-sign</span></code> - the sign of a flushed-to-zero number is preserve=
d in the sign of 0</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pos=
itive-zero</span></code> - denormals are flushed to positive zero</p></li>
</ul>
<p>The default value depends on the target. For most targets, defaults to
<code class=3D"docutils literal notranslate"><span class=3D"pre">ieee</span=
></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-strict-float-cast-ove=
rflow">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]strict-float-c=
ast-overflow</span></span><span class=3D"sig-prename descclassname"></span>=
<a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.htm=
l#cmdoption-f-no-strict-float-cast-overflow" title=3D"Link to this definiti=
on">=C2=B6</a></dt>
<dd><p>When a floating-point value is not representable in a destination in=
teger
type, the code has undefined behavior according to the language standard.
By default, Clang will not guarantee any particular result in that case.
With the =E2=80=98no-strict=E2=80=99 option, Clang will saturate towards th=
e smallest and
largest representable integer values instead. NaNs will be converted to zer=
o.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fstrict-float-cast-overflow</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-math-errno">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]math-errno</sp=
an></span><span class=3D"sig-prename descclassname"></span><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no=
-math-errno" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Require math functions to indicate errors by setting errno.
The default varies by ToolChain.  <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-fno-math-errno</span></code> allows optimizations
that might cause standard C math functions to not set <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">errno</span></code>.
For example, on some systems, the math function <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">sqrt</span></code> is specified
as setting <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>errno</span></code> to <code class=3D"docutils literal notranslate"><span =
class=3D"pre">EDOM</span></code> when the input is negative. On these
systems, the compiler cannot normally optimize a call to <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">sqrt</span></code> to use
inline code (e.g. the x86 <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">sqrtsd</span></code> instruction) without additional
checking to ensure that <code class=3D"docutils literal notranslate"><span =
class=3D"pre">errno</span></code> is set appropriately.
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-math-=
errno</span></code> permits these transformations.</p>
<p>On some targets, math library functions never set <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">errno</span></code>, and so
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-math-=
errno</span></code> is the default. This includes most BSD-derived
systems, including Darwin.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-trapping-math">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]trapping-math<=
/span></span><span class=3D"sig-prename descclassname"></span><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f=
-no-trapping-math" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Control floating point exception behavior. <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">-fno-trapping-math</span></code> al=
lows optimizations that assume that floating point operations cannot genera=
te traps such as divide-by-zero, overflow and underflow.</p>
<ul class=3D"simple">
<li><p>The option <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-ftrapping-math</span></code> behaves identically to <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-ffp-exception-behavi=
or=3Dstrict</span></code>.</p></li>
<li><p>The option <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-fno-trapping-math</span></code> behaves identically to <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">-ffp-exception-behav=
ior=3Dignore</span></code>.   This is the default.</p></li>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ffp-contract">
<span class=3D"sig-name descname"><span class=3D"pre">-ffp-contract</span><=
/span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D&lt;=
value&gt;</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.o=
rg/docs/UsersManual.html#cmdoption-ffp-contract" title=3D"Link to this defi=
nition">=C2=B6</a></dt>
<dd><p>Specify when the compiler is permitted to form fused floating-point
operations, such as fused multiply-add (FMA). Fused operations are
permitted to produce more precise results than performing the same
operations separately.</p>
<p>The C and C++ standards permit intermediate floating-point results withi=
n an
expression to be computed with more precision than their type would
normally allow. This permits operation fusing, and Clang takes advantage
of this by default (<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">on</span></code>). Fusion across statements is not compliant with
the C and C++ standards but can be enabled using <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">-ffp-contract=3Dfast</span></code>.<=
/p>
<p>Fusion can be controlled with the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">FP_CONTRACT</span></code> and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">clang</span> <span class=3D"=
pre">fp</span> <span class=3D"pre">contract</span></code>
pragmas. Please note that pragmas will be ingored with
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-contr=
act=3Dfast</span></code>, and refer to the pragma documentation for a
description of how the pragmas interact with the different <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">-ffp-contract</span></code=
>
option values.</p>
<p>Valid values are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fas=
t</span></code>: enable fusion across statements disregarding pragmas, brea=
king
compliance with the C and C++ standards (default for CUDA).</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">on<=
/span></code>: enable C and C++ standard complaint fusion in the same state=
ment
unless dictated by pragmas (default for languages other than CUDA/HIP)</p><=
/li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">off=
</span></code>: disable fusion</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fas=
t-honor-pragmas</span></code>: fuse across statements unless dictated by pr=
agmas
(default for HIP)</p></li>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-honor-infinities">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]honor-infiniti=
es</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-f-no-honor-infinities" title=3D"Link to this definition">=C2=B6</a></dt=
>
<dd><p>Allow floating-point optimizations that assume arguments and results=
 are
not +-Inf.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fhonor-infinities</span></code>.</p>
<p>If both <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-fno-honor-infinities</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">-fno-honor-nans</span></code> are used,
has the same effect as specifying <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-ffinite-math-only</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-honor-nans">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]honor-nans</sp=
an></span><span class=3D"sig-prename descclassname"></span><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no=
-honor-nans" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Allow floating-point optimizations that assume arguments and results=
 are
not NaNs.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fhonor-nans</span></code>.</p>
<p>If both <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-fno-honor-infinities</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">-fno-honor-nans</span></code> are used,
has the same effect as specifying <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-ffinite-math-only</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-approx-func">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]approx-func</s=
pan></span><span class=3D"sig-prename descclassname"></span><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-n=
o-approx-func" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Allow certain math function calls (such as <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">log</span></code>, <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">sqrt</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">pow</span></code=
>, etc)
to be replaced with an approximately equivalent set of instructions
or alternative math function calls. For example, a <code class=3D"docutils =
literal notranslate"><span class=3D"pre">pow(x,</span> <span class=3D"pre">=
0.25)</span></code>
may be replaced with <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">sqrt(sqrt(x))</span></code>, despite being an inexact result
in cases where <code class=3D"docutils literal notranslate"><span class=3D"=
pre">x</span></code> is <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-0.0</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">-inf</span></code>.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fno-approx-func</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-signed-zeros">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]signed-zeros</=
span></span><span class=3D"sig-prename descclassname"></span><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-=
no-signed-zeros" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Allow optimizations that ignore the sign of floating point zeros.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fsigned-zeros</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-associative-math">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]associative-ma=
th</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-f-no-associative-math" title=3D"Link to this definition">=C2=B6</a></dt=
>
<dd><p>Allow floating point operations to be reassociated.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fno-associative-math</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-reciprocal-math">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]reciprocal-mat=
h</span></span><span class=3D"sig-prename descclassname"></span><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption=
-f-no-reciprocal-math" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Allow division operations to be transformed into multiplication by a
reciprocal. This can be significantly faster than an ordinary division
but can also have significantly less precision. Defaults to
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-recip=
rocal-math</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-unsafe-math-optimizat=
ions">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]unsafe-math-op=
timizations</span></span><span class=3D"sig-prename descclassname"></span><=
a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html=
#cmdoption-f-no-unsafe-math-optimizations" title=3D"Link to this definition=
">=C2=B6</a></dt>
<dd><p>Allow unsafe floating-point optimizations.
<code class=3D"docutils literal notranslate"><span class=3D"pre">-funsafe-m=
ath-optimizations</span></code> also implies:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fa=
pprox-func</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fa=
ssociative-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fr=
eciprocal-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-signed-zeros</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-trapping-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
p-contract=3Dfast</span></code></p></li>
</ul>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-un=
safe-math-optimizations</span></code> implies:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-approx-func</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-associative-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-reciprocal-math</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
igned-zeros</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
p-contract=3Don</span></code></p></li>
</ul>
<p>There is ambiguity about how <code class=3D"docutils literal notranslate=
"><span class=3D"pre">-ffp-contract</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-funsafe-m=
ath-optimizations</span></code>, and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">-fno-unsafe-math-optimizations</span></code>
behave when combined. Explanation in <a class=3D"reference internal" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fno-fast-math"><=
code class=3D"xref std std-option docutils literal notranslate"><span class=
=3D"pre">-fno-fast-math</span></code></a> also applies
to these options.</p>
<p>Defaults to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-fno-unsafe-math-optimizations</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-finite-math-only">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]finite-math-on=
ly</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-f-no-finite-math-only" title=3D"Link to this definition">=C2=B6</a></dt=
>
<dd><p>Allow floating-point optimizations that assume arguments and results=
 are
not NaNs or +-Inf. <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-ffinite-math-only</span></code> defines the
<code class=3D"docutils literal notranslate"><span class=3D"pre">__FINITE_M=
ATH_ONLY__</span></code> preprocessor macro.
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffinite-m=
ath-only</span></code> implies:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-honor-infinities</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fn=
o-honor-nans</span></code></p></li>
</ul>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ffno-i=
nite-math-only</span></code> implies:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fh=
onor-infinities</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fh=
onor-nans</span></code></p></li>
</ul>
<p>Defaults to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-fno-finite-math-only</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-rounding-math">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]rounding-math<=
/span></span><span class=3D"sig-prename descclassname"></span><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f=
-no-rounding-math" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Force floating-point operations to honor the dynamically-set roundin=
g mode by default.</p>
<p>The result of a floating-point operation often cannot be exactly represe=
nted in the result type and therefore must be rounded.  IEEE 754 describes =
different rounding modes that control how to perform this rounding, not all=
 of which are supported by all implementations.  C provides interfaces (<co=
de class=3D"docutils literal notranslate"><span class=3D"pre">fesetround</s=
pan></code> and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">fesetenv</span></code>) for dynamically controlling the rounding mode=
, and while it also recommends certain conventions for changing the roundin=
g mode, these conventions are not typically enforced in the ABI.  Since the=
 rounding mode changes the numerical result of operations, the compiler mus=
t understand something about it in order to optimize floating point operati=
ons.</p>
<p>Note that floating-point operations performed as part of constant initia=
lization are formally performed prior to the start of the program and are t=
herefore not subject to the current rounding mode.  This includes the initi=
alization of global variables and local <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">static</span></code> variables.  Floating-poi=
nt operations in these contexts will be rounded using <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">FE_TONEAREST</span></code>.</p>
<ul class=3D"simple">
<li><p>The option <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-fno-rounding-math</span></code> allows the compiler to assume tha=
t the rounding mode is set to <code class=3D"docutils literal notranslate">=
<span class=3D"pre">FE_TONEAREST</span></code>.  This is the default.</p></=
li>
<li><p>The option <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-frounding-math</span></code> forces the compiler to honor the dyn=
amically-set rounding mode.  This prevents optimizations which might affect=
 results if the rounding mode changes or is different from the default; for=
 example, it prevents floating-point operations from being reordered across=
 most calls and prevents constant-folding when the result is not exactly re=
presentable.</p></li>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ffp-model">
<span class=3D"sig-name descname"><span class=3D"pre">-ffp-model</span></sp=
an><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D&lt;val=
ue&gt;</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/=
docs/UsersManual.html#cmdoption-ffp-model" title=3D"Link to this definition=
">=C2=B6</a></dt>
<dd><p>Specify floating point behavior. <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">-ffp-model</span></code> is an umbrella
option that encompasses functionality provided by other, single
purpose, floating point options.  Valid values are: <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">precise</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">strict</span></code>=
,
<code class=3D"docutils literal notranslate"><span class=3D"pre">fast</span=
></code>, and <code class=3D"docutils literal notranslate"><span class=3D"p=
re">aggressive</span></code>.
Details:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pre=
cise</span></code> Disables optimizations that are not value-safe on
floating-point data, although FP contraction (FMA) is enabled
(<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-cont=
ract=3Don</span></code>). This is the default behavior. This value resets
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fmath-err=
no</span></code> to its target-dependent default.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">str=
ict</span></code> Enables <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">-frounding-math</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-excep=
tion-behavior=3Dstrict</span></code>, and disables contractions (FMA).  All
of the <code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
ast-math</span></code> enablements are disabled. Enables
<code class=3D"docutils literal notranslate"><span class=3D"pre">STDC</span=
> <span class=3D"pre">FENV_ACCESS</span></code>: by default <code class=3D"=
docutils literal notranslate"><span class=3D"pre">FENV_ACCESS</span></code>=
 is disabled. This option
setting behaves as though <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">#pragma</span> <span class=3D"pre">STDC</span> <span class=
=3D"pre">FENV_ACCESS</span> <span class=3D"pre">ON</span></code> appeared a=
t the
top of the source file.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fas=
t</span></code> Behaves identically to specifying <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">-funsafe-math-optimizations</span><=
/code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-math-=
errno</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-fcomplex-arithmetic=3Dpromoted</span></code>
<code class=3D"docutils literal notranslate"><span class=3D"pre">ffp-contra=
ct=3Dfast</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">agg=
ressive</span></code> Behaves identically to specifying both <code class=3D=
"docutils literal notranslate"><span class=3D"pre">-ffast-math</span></code=
> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">ffp-contra=
ct=3Dfast</span></code></p></li>
</ul>
<p>Note: If your command line specifies multiple instances
of the <code class=3D"docutils literal notranslate"><span class=3D"pre">-ff=
p-model</span></code> option, or if your command line option specifies
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-model=
</span></code> and later on the command line selects a floating point
option that has the effect of negating part of the  <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">ffp-model</span></code> that
has been selected, then the compiler will issue a diagnostic warning
that the override has occurred.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ffp-exception-behavior">
<span class=3D"sig-name descname"><span class=3D"pre">-ffp-exception-behavi=
or</span></span><span class=3D"sig-prename descclassname"><span class=3D"pr=
e">=3D&lt;value&gt;</span></span><a class=3D"headerlink" href=3D"https://cl=
ang.llvm.org/docs/UsersManual.html#cmdoption-ffp-exception-behavior" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Specify the floating-point exception behavior.</p>
<p>Valid values are: <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">ignore</span></code>, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">maytrap</span></code>, and <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">strict</span></code>.
The default value is <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">ignore</span></code>.  Details:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ign=
ore</span></code> The compiler assumes that the exception status flags will=
 not be read and that floating point exceptions will be masked.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">may=
trap</span></code> The compiler avoids transformations that may raise excep=
tions that would not have been raised by the original code. Constant foldin=
g performed by the compiler is exempt from this option.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">str=
ict</span></code> The compiler ensures that all transformations strictly pr=
eserve the floating point exception semantics of the original code.</p></li=
>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ffp-eval-method">
<span class=3D"sig-name descname"><span class=3D"pre">-ffp-eval-method</spa=
n></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D&=
lt;value&gt;</span></span><a class=3D"headerlink" href=3D"https://clang.llv=
m.org/docs/UsersManual.html#cmdoption-ffp-eval-method" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>Specify the floating-point evaluation method for intermediate result=
s within
a single expression of the code.</p>
<p>Valid values are: <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">source</span></code>, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">double</span></code>, and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">extended</span></code>.
For 64-bit targets, the default value is <code class=3D"docutils literal no=
translate"><span class=3D"pre">source</span></code>. For 32-bit x86 targets
however, in the case of NETBSD 6.99.26 and under, the default value is
<code class=3D"docutils literal notranslate"><span class=3D"pre">double</sp=
an></code>; in the case of NETBSD greater than 6.99.26, with NoSSE, the
default value is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">extended</span></code>, with SSE the default value is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">source</span></code>.
Details:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sou=
rce</span></code> The compiler uses the floating-point type declared in the=
 source program as the evaluation method.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dou=
ble</span></code> The compiler uses <code class=3D"docutils literal notrans=
late"><span class=3D"pre">double</span></code> as the floating-point evalua=
tion method for all float expressions of type that is narrower than <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">double</span></co=
de>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ext=
ended</span></code> The compiler uses <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">long</span> <span class=3D"pre">double</span></=
code> as the floating-point evaluation method for all float expressions of =
type that is narrower than <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">long</span> <span class=3D"pre">double</span></code>.</p><=
/li>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-protect-parens">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]protect-parens=
</span></span><span class=3D"sig-prename descclassname"></span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-=
f-no-protect-parens" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>This option pertains to floating-point types, complex types with
floating-point components, and vectors of these types. Some arithmetic
expression transformations that are mathematically correct and permissible
according to the C and C++ language standards may be incorrect when dealing
with floating-point types, such as reassociation and distribution. Further,
the optimizer may ignore parentheses when computing arithmetic expressions
in circumstances where the parenthesized and unparenthesized expression
express the same mathematical value. For example (a+b)+c is the same
mathematical value as a+(b+c), but the optimizer is free to evaluate the
additions in any order regardless of the parentheses. When enabled, this
option forces the optimizer to honor the order of operations with respect
to parentheses in all circumstances.
Defaults to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fno-protect-parens</span></code>.</p>
<p>Note that floating-point contraction (option <cite>-ffp-contract=3D</cit=
e>) is disabled
when <cite>-fprotect-parens</cite> is enabled.  Also note that in safe floa=
ting-point
modes, such as <cite>-ffp-model=3Dprecise</cite> or <cite>-ffp-model=3Dstri=
ct</cite>, this option
has no effect because the optimizer is prohibited from making unsafe
transformations.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fexcess-precision">
<span class=3D"sig-name descname"><span class=3D"pre">-fexcess-precision:</=
span></span><span class=3D"sig-prename descclassname"></span><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fe=
xcess-precision" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>The C and C++ standards allow floating-point expressions to be compu=
ted as if
intermediate results had more precision (and/or a wider range) than the typ=
e
of the expression strictly allows.  This is called excess precision
arithmetic.
Excess precision arithmetic can improve the accuracy of results (although n=
ot
always), and it can make computation significantly faster if the target lac=
ks
direct hardware support for arithmetic in a particular type.  However, it c=
an
also undermine strict floating-point reproducibility.</p>
<p>Under the standards, assignments and explicit casts force the operand to=
 be
converted to its formal type, discarding any excess precision.  Because dat=
a
can only flow between statements via an assignment, this means that the use
of excess precision arithmetic is a reliable local property of a single
statement, and results do not change based on optimization.  However, when
excess precision arithmetic is in use, Clang does not guarantee strict
reproducibility, and future compiler releases may recognize more
opportunities to use excess precision arithmetic, e.g. with floating-point
builtins.</p>
<p>Clang does not use excess precision arithmetic for most types or on most
targets. For example, even on pre-SSE X86 targets where <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">float</span></code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">double</sp=
an></code> computations must be performed in the 80-bit X87 format, Clang
rounds all intermediate results correctly for their type.  Clang currently
uses excess precision arithmetic by default only for the following types an=
d
targets:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">_Fl=
oat16</span></code> on X86 targets without <code class=3D"docutils literal =
notranslate"><span class=3D"pre">AVX512-FP16</span></code>.</p></li>
</ul>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">-fe=
xcess-precision=3D&lt;value&gt;</span></code> option can be used to control=
 the use of
excess precision arithmetic.  Valid values are:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
ndard</span></code> - The default.  Allow the use of excess precision arith=
metic
under the constraints of the C and C++ standards. Has no effect except on
the types and targets listed above.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fas=
t</span></code> - Accepted for GCC compatibility, but currently treated as =
an
alias for <code class=3D"docutils literal notranslate"><span class=3D"pre">=
standard</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">16<=
/span></code> - Forces <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">_Float16</span></code> operations to be emitted without using =
excess
precision arithmetic.</p></li>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcomplex-arithmetic">
<span class=3D"sig-name descname"><span class=3D"pre">-fcomplex-arithmetic<=
/span></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3D&lt;value&gt;:</span></span><a class=3D"headerlink" href=3D"https://clan=
g.llvm.org/docs/UsersManual.html#cmdoption-fcomplex-arithmetic" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>This option specifies the implementation for complex multiplication =
and division.</p>
<p>Valid values are: <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">basic</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">improved</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">full</span></code> and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">promoted</span></code>.</p=
>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">bas=
ic</span></code> Implementation of complex division and multiplication usin=
g
algebraic formulas at source precision. No special handling to avoid
overflow. NaN and infinite values are not handled.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">imp=
roved</span></code> Implementation of complex division using the Smith algo=
rithm
at source precision. Smith=E2=80=99s algorithm for complex division.
See SMITH, R. L. Algorithm 116: Complex division. Commun. ACM 5, 8 (1962).
This value offers improved handling for overflow in intermediate
calculations, but overflow may occur. NaN and infinite values are not
handled in some cases.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ful=
l</span></code> Implementation of complex division and multiplication using=
 a
call to runtime library functions (generally the case, but the BE might
sometimes replace the library call if it knows enough about the potential
range of the inputs). Overflow and non-finite values are handled by the
library implementation. For the case of multiplication overflow will occur =
in
accordance with normal floating-point rules. This is the default value.</p>=
</li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pro=
moted</span></code> Implementation of complex division using algebraic form=
ulas at
higher precision. Overflow is handled. Non-finite values are handled in som=
e
cases. If the target does not have native support for a higher precision
data type, the implementation for the complex operation using the Smith
algorithm will be used. Overflow may still occur in some cases. NaN and
infinite values are not handled.</p></li>
</ul>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcx-limited-range">
<span class=3D"sig-name descname"><span class=3D"pre">-fcx-limited-range:</=
span></span><span class=3D"sig-prename descclassname"></span><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fc=
x-limited-range" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>This option is aliased to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-fcomplex-arithmetic=3Dbasic</span></code>. It enabl=
es the
naive mathematical formulas for complex division and multiplication with no
NaN checking of results. The default is <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">-fno-cx-limited-range</span></code> aliased t=
o
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fcomplex-=
arithmetic=3Dfull</span></code>. This option is enabled by the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-ffast-math</span></c=
ode>
option.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcx-fortran-rules">
<span class=3D"sig-name descname"><span class=3D"pre">-fcx-fortran-rules:</=
span></span><span class=3D"sig-prename descclassname"></span><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fc=
x-fortran-rules" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>This option is aliased to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-fcomplex-arithmetic=3Dimproved</span></code>. It en=
ables the
naive mathematical formulas for complex multiplication and enables applicat=
ion
of Smith=E2=80=99s algorithm for complex division. See SMITH, R. L. Algorit=
hm 116:
Complex division. Commun. ACM 5, 8 (1962).
The default is <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-fno-cx-fortran-rules</span></code> aliased to
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fcomplex-=
arithmetic=3Dfull</span></code>.</p>
</dd></dl>

<section id=3D"accessing-the-floating-point-environment">
<span id=3D"floating-point-environment"></span><h4><a class=3D"toc-backref"=
 href=3D"https://clang.llvm.org/docs/UsersManual.html#id47" role=3D"doc-bac=
klink">Accessing the floating point environment</a><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/UsersManual.html#accessing-the-floating=
-point-environment" title=3D"Link to this heading">=C2=B6</a></h4>
<p>Many targets allow floating point operations to be configured to control=
 things
such as how inexact results should be rounded and how exceptional condition=
s
should be handled. This configuration is called the floating point environm=
ent.
C and C++ restrict access to the floating point environment by default, and=
 the
compiler is allowed to assume that all operations are performed in the defa=
ult
environment. When code is compiled in this default mode, operations that de=
pend
on the environment (such as floating-point arithmetic and <cite>FLT_ROUNDS<=
/cite>) may have
undefined behavior if the dynamic environment is not the default environmen=
t; for
example, <cite>FLT_ROUNDS</cite> may or may not simply return its default v=
alue for the target
instead of reading the dynamic environment, and floating-point operations m=
ay be
optimized as if the dynamic environment were the default.  Similarly, it is=
 undefined
behavior to change the floating point environment in this default mode, for=
 example
by calling the <cite>fesetround</cite> function.
C provides two pragmas to allow code to dynamically modify the floating poi=
nt environment:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">#pr=
agma</span> <span class=3D"pre">STDC</span> <span class=3D"pre">FENV_ACCESS=
</span> <span class=3D"pre">ON</span></code> allows dynamic changes to the =
entire floating
point environment.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">#pr=
agma</span> <span class=3D"pre">STDC</span> <span class=3D"pre">FENV_ROUND<=
/span> <span class=3D"pre">FE_DYNAMIC</span></code> allows dynamic changes =
to just the floating
point rounding mode.  This may be more optimizable than <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">FENV_ACCESS</span> <span clas=
s=3D"pre">ON</span></code> because
the compiler can still ignore the possibility of floating-point exceptions =
by default.</p></li>
</ul>
<p>Both of these can be used either at the start of a block scope, in which=
 case
they cover all code in that scope (unless they=E2=80=99re turned off in a c=
hild scope),
or at the top level in a file, in which case they cover all subsequent func=
tion
bodies until they=E2=80=99re turned off.  Note that it is undefined behavio=
r to enter
code that is <em>not</em> covered by one of these pragmas from code that <e=
m>is</em> covered
by one of these pragmas unless the floating point environment has been rest=
ored
to its default state.  See the C standard for more information about these =
pragmas.</p>
<p>The command line option <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">-frounding-math</span></code> behaves as if the translatio=
n unit
began with <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>#pragma</span> <span class=3D"pre">STDC</span> <span class=3D"pre">FENV_RO=
UND</span> <span class=3D"pre">FE_DYNAMIC</span></code>. The command line o=
ption
<code class=3D"docutils literal notranslate"><span class=3D"pre">-ffp-model=
=3Dstrict</span></code> behaves as if the translation unit began with <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</span> =
<span class=3D"pre">STDC</span> <span class=3D"pre">FENV_ACCESS</span> <spa=
n class=3D"pre">ON</span></code>.</p>
<p>Code that just wants to use a specific rounding mode for specific floati=
ng point
operations can avoid most of the hazards of the dynamic floating point envi=
ronment
by using <code class=3D"docutils literal notranslate"><span class=3D"pre">#=
pragma</span> <span class=3D"pre">STDC</span> <span class=3D"pre">FENV_ROUN=
D</span></code> with a value other than <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">FE_DYNAMIC</span></code>.</p>
</section>
<section id=3D"a-note-about-crtfastmath-o">
<span id=3D"crtfastmath-o"></span><h4><a class=3D"toc-backref" href=3D"http=
s://clang.llvm.org/docs/UsersManual.html#id48" role=3D"doc-backlink">A note=
 about <code class=3D"docutils literal notranslate"><span class=3D"pre">crt=
fastmath.o</span></code></a><a class=3D"headerlink" href=3D"https://clang.l=
lvm.org/docs/UsersManual.html#a-note-about-crtfastmath-o" title=3D"Link to =
this heading">=C2=B6</a></h4>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ffast-=
math</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">-funsafe-math-optimizations</span></code> without the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">-shared</span></co=
de>
option cause <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">crtfastmath.o</span></code> to be
automatically linked, which adds a static constructor that sets the FTZ/DAZ
bits in MXCSR, affecting not only the current compilation unit but all stat=
ic
and shared libraries included in the program. This decision can be overridd=
en
by using either the flag <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-mdaz-ftz</span></code> or <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">-mno-daz-ftz</span></code> to respectively
link or not link <code class=3D"docutils literal notranslate"><span class=
=3D"pre">crtfastmath.o</span></code>.</p>
</section>
<section id=3D"a-note-about-flt-eval-method">
<span id=3D"flt-eval-method"></span><h4><a class=3D"toc-backref" href=3D"ht=
tps://clang.llvm.org/docs/UsersManual.html#id49" role=3D"doc-backlink">A no=
te about <code class=3D"docutils literal notranslate"><span class=3D"pre">_=
_FLT_EVAL_METHOD__</span></code></a><a class=3D"headerlink" href=3D"https:/=
/clang.llvm.org/docs/UsersManual.html#a-note-about-flt-eval-method" title=
=3D"Link to this heading">=C2=B6</a></h4>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">__F=
LT_EVAL_METHOD__</span></code> is not defined as a traditional macro, and s=
o it
will not appear when dumping preprocessor macros. Instead, the value
<code class=3D"docutils literal notranslate"><span class=3D"pre">__FLT_EVAL=
_METHOD__</span></code> expands to is determined at the point of expansion
either from the value set by the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-ffp-eval-method</span></code> command line option o=
r
from the target. This is because the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">__FLT_EVAL_METHOD__</span></code> macro
cannot expand to the correct evaluation method in the presence of a <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">#pragma</span></c=
ode>
which alters the evaluation method. An error is issued if
<code class=3D"docutils literal notranslate"><span class=3D"pre">__FLT_EVAL=
_METHOD__</span></code> is expanded inside a scope modified by
<code class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</s=
pan> <span class=3D"pre">clang</span> <span class=3D"pre">fp</span> <span c=
lass=3D"pre">eval_method</span></code>.</p>
</section>
<section id=3D"a-note-about-floating-point-constant-evaluation">
<span id=3D"fp-constant-eval"></span><h4><a class=3D"toc-backref" href=3D"h=
ttps://clang.llvm.org/docs/UsersManual.html#id50" role=3D"doc-backlink">A n=
ote about Floating Point Constant Evaluation</a><a class=3D"headerlink" hre=
f=3D"https://clang.llvm.org/docs/UsersManual.html#a-note-about-floating-poi=
nt-constant-evaluation" title=3D"Link to this heading">=C2=B6</a></h4>
<p>In C, the only place floating point operations are guaranteed to be eval=
uated
during translation is in the initializers of variables of static storage
duration, which are all notionally initialized before the program begins
executing (and thus before a non-default floating point environment can be
entered).  But C++ has many more contexts where floating point constant
evaluation occurs.  Specifically: for static/thread-local variables,
first try evaluating the initializer in a constant context, including in th=
e
constant floating point environment (just like in C), and then, if that fai=
ls,
fall back to emitting runtime code to perform the initialization (which mig=
ht
in general be in a different floating point environment).</p>
<p>Consider this example when compiled with <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">-frounding-math</span></code></p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"go">constexpr float func_01(float x, float=
 y) {</span>
<span class=3D"go">  return x + y;</span>
<span class=3D"go">}</span>
<span class=3D"go">float V1 =3D func_01(1.0F, 0x0.000001p0F);</span>
</pre></div>
</div>
</div></blockquote>
<p>The C++ rule is that initializers for static storage duration variables =
are
first evaluated during translation (therefore, in the default rounding mode=
),
and only evaluated at runtime (and therefore in the runtime rounding mode) =
if
the compile-time evaluation fails. This is in line with the C rules;
C11 F.8.5 says: <em>All computation for automatic initialization is done (a=
s if)
at execution time; thus, it is affected by any operative modes and raises
floating-point exceptions as required by IEC 60559 (provided the state for =
the
FENV_ACCESS pragma is =E2=80=98=E2=80=98on=E2=80=99=E2=80=99). All computat=
ion for initialization of objects
that have static or thread storage duration is done (as if) at translation
time.</em> C++ generalizes this by adding another phase of initialization
(at runtime) if the translation-time initialization fails, but the
translation-time evaluation of the initializer of succeeds, it will be
treated as a constant initializer.</p>
</section>
</section>
<section id=3D"controlling-code-generation">
<span id=3D"id4"></span><h3><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id51" role=3D"doc-backlink">Controlling Code=
 Generation</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#controlling-code-generation" title=3D"Link to this heading=
">=C2=B6</a></h3>
<p>Clang provides a number of ways to control code generation. The options
are listed below.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-sanitize">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize</span=
></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3Dch=
eck1,check2,...</span></span><a class=3D"headerlink" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#cmdoption-f-no-sanitize" title=3D"Link to th=
is definition">=C2=B6</a></dt>
<dd><p>Turn on runtime checks for various forms of undefined or suspicious
behavior.</p>
<p>This option controls whether Clang adds runtime checks for various
forms of undefined or suspicious behavior, and is disabled by
default. If a check fails, a diagnostic message is produced at
runtime explaining the problem. The main checks are:</p>
<ul class=3D"simple">
<li><p id=3D"opt-fsanitize-address"><code class=3D"docutils literal notrans=
late"><span class=3D"pre">-fsanitize=3Daddress</span></code>:
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Address=
Sanitizer.html"><span class=3D"doc">AddressSanitizer</span></a>, a memory e=
rror
detector.</p>
</li>
<li><p id=3D"opt-fsanitize-thread"><code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-fsanitize=3Dthread</span></code>: <a class=3D"ref=
erence internal" href=3D"https://clang.llvm.org/docs/ThreadSanitizer.html">=
<span class=3D"doc">ThreadSanitizer</span></a>, a data race detector.</p>
</li>
<li><p id=3D"opt-fsanitize-memory"><code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-fsanitize=3Dmemory</span></code>: <a class=3D"ref=
erence internal" href=3D"https://clang.llvm.org/docs/MemorySanitizer.html">=
<span class=3D"doc">MemorySanitizer</span></a>,
a detector of uninitialized reads. Requires instrumentation of all
program code.</p>
</li>
<li><p id=3D"opt-fsanitize-undefined"><code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-fsanitize=3Dundefined</span></code>: <a class=
=3D"reference internal" href=3D"https://clang.llvm.org/docs/UndefinedBehavi=
orSanitizer.html"><span class=3D"doc">UndefinedBehaviorSanitizer</span></a>=
,
a fast and compatible undefined behavior checker.</p>
</li>
<li><p id=3D"opt-fsanitize-type"><code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-fsanitize=3Dtype</span></code>: <a class=3D"referen=
ce internal" href=3D"https://clang.llvm.org/docs/TypeSanitizer.html"><span =
class=3D"doc">TypeSanitizer</span></a>, a detector for strict
aliasing violations.</p>
</li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3Ddataflow</span></code>: <a class=3D"reference internal" href=3D"h=
ttps://clang.llvm.org/docs/DataFlowSanitizer.html"><span class=3D"doc">Data=
FlowSanitizer</span></a>, a general data
flow analysis.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3Dcfi</span></code>: <a class=3D"reference internal" href=3D"https:=
//clang.llvm.org/docs/ControlFlowIntegrity.html"><span class=3D"doc">contro=
l flow integrity</span></a>
checks. Requires <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-flto</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3Dkcfi</span></code>: kernel indirect call forward-edge control flo=
w
integrity.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3Dsafe-stack</span></code>: <a class=3D"reference internal" href=3D=
"https://clang.llvm.org/docs/SafeStack.html"><span class=3D"doc">safe stack=
</span></a>
protection against stack-based memory corruption errors.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3Drealtime</span></code>: <a class=3D"reference internal" href=3D"h=
ttps://clang.llvm.org/docs/RealtimeSanitizer.html"><span class=3D"doc">Real=
timeSanitizer</span></a>,
a real-time safety checker.</p></li>
</ul>
<p>There are more fine-grained checks available: see
the <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Und=
efinedBehaviorSanitizer.html#ubsan-checks"><span class=3D"std std-ref">list=
</span></a> of specific kinds of
undefined behavior that can be detected and the <a class=3D"reference inter=
nal" href=3D"https://clang.llvm.org/docs/ControlFlowIntegrity.html#cfi-sche=
mes"><span class=3D"std std-ref">list</span></a>
of control flow integrity schemes.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3D</span></code> argument must also be provided when linking, in
order to link to the appropriate runtime library.</p>
<p>It is not possible to combine more than one of the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">-fsanitize=3Daddress</span></co=
de>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fsanitize=
=3Dthread</span></code>, and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">-fsanitize=3Dmemory</span></code> checkers in the same
program.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-sanitize-recover">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-recov=
er</span></span><span class=3D"sig-prename descclassname"><span class=3D"pr=
e">=3Dcheck1,check2,...</span></span><a class=3D"headerlink" href=3D"https:=
//clang.llvm.org/docs/UsersManual.html#cmdoption-f-no-sanitize-recover" tit=
le=3D"Link to this definition">=C2=B6</a></dt>
<dd></dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-0">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-recov=
er</span></span><span class=3D"sig-prename descclassname"><span class=3D"pr=
e">[=3Dall]</span></span><a class=3D"headerlink" href=3D"https://clang.llvm=
.org/docs/UsersManual.html#cmdoption-0" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Controls which checks enabled by <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">-fsanitize=3D</span></code> flag are non-fata=
l.
If the check is fatal, program will halt after the first error
of this kind is detected and error report is printed.</p>
<p>By default, non-fatal checks are those enabled by
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Undefin=
edBehaviorSanitizer.html"><span class=3D"doc">UndefinedBehaviorSanitizer</s=
pan></a>,
except for <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-fsanitize=3Dreturn</span></code> and <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">-fsanitize=3Dunreachable</span></code>. Some
sanitizers may not support recovery (or not support it by default
e.g. <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Ad=
dressSanitizer.html"><span class=3D"doc">AddressSanitizer</span></a>), and =
always crash the program after the issue
is detected.</p>
<p>Note that the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-fsanitize-trap</span></code> flag has precedence over this flag.
This means that if a check has been configured to trap elsewhere on the
command line, or if the check traps by default, this flag will not have
any effect unless that sanitizer=E2=80=99s trapping behavior is disabled wi=
th
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-sanit=
ize-trap</span></code>.</p>
<p>For example, if a command line contains the flags <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">-fsanitize=3Dundefined</span>
<span class=3D"pre">-fsanitize-trap=3Dundefined</span></code>, the flag <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">-fsanitize-re=
cover=3Dalignment</span></code>
will have no effect on its own; it will need to be accompanied by
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-sanit=
ize-trap=3Dalignment</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-sanitize-trap">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-trap<=
/span></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3Dcheck1,check2,...</span></span><a class=3D"headerlink" href=3D"https://c=
lang.llvm.org/docs/UsersManual.html#cmdoption-f-no-sanitize-trap" title=3D"=
Link to this definition">=C2=B6</a></dt>
<dd></dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-1">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-trap<=
/span></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
[=3Dall]</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.or=
g/docs/UsersManual.html#cmdoption-1" title=3D"Link to this definition">=C2=
=B6</a></dt>
<dd><p>Controls which checks enabled by the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">-fsanitize=3D</span></code> flag trap. Th=
is
option is intended for use in cases where the sanitizer runtime cannot
be used (for instance, when building libc or a kernel module), or where
the binary size increase caused by the sanitizer runtime is a concern.</p>
<p>This flag is only compatible with <a class=3D"reference internal" href=
=3D"https://clang.llvm.org/docs/ControlFlowIntegrity.html"><span class=3D"d=
oc">control flow integrity</span></a> schemes and <a class=3D"reference int=
ernal" href=3D"https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html"=
><span class=3D"doc">UndefinedBehaviorSanitizer</span></a>
checks other than <code class=3D"docutils literal notranslate"><span class=
=3D"pre">vptr</span></code>.</p>
<p>This flag is enabled by default for sanitizers in the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">cfi</span></code> group.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fsanitize-ignorelist">
<span class=3D"sig-name descname"><span class=3D"pre">-fsanitize-ignorelist=
</span></span><span class=3D"sig-prename descclassname"><span class=3D"pre"=
>=3D/path/to/ignorelist/file</span></span><a class=3D"headerlink" href=3D"h=
ttps://clang.llvm.org/docs/UsersManual.html#cmdoption-fsanitize-ignorelist"=
 title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Disable or modify sanitizer checks for objects (source files, functi=
ons,
variables, types) listed in the file. See
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Sanitiz=
erSpecialCaseList.html"><span class=3D"doc">Sanitizer special case list</sp=
an></a> for file format description.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-sanitize-ignorelist">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-sanitize-ignorel=
ist</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-fno-sanitize-ignorelist" title=3D"Link to this definition">=C2=B6</a></=
dt>
<dd><p>Don=E2=80=99t use ignorelist file, if it was specified earlier in th=
e command line.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-sanitize-coverage">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-cover=
age</span></span><span class=3D"sig-prename descclassname"><span class=3D"p=
re">=3D[type,features,...]</span></span><a class=3D"headerlink" href=3D"htt=
ps://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no-sanitize-coverage"=
 title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable simple code coverage in addition to certain sanitizers.
See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/San=
itizerCoverage.html"><span class=3D"doc">SanitizerCoverage</span></a> for m=
ore details.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-sanitize-address-outl=
ine-instrumentation">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-addre=
ss-outline-instrumentation</span></span><span class=3D"sig-prename descclas=
sname"></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/U=
sersManual.html#cmdoption-f-no-sanitize-address-outline-instrumentation" ti=
tle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Controls how address sanitizer code is generated. If enabled will al=
ways use
a function call instead of inlining the code. Turning this option on could
reduce the binary size, but might result in a worse run-time performance.</=
p>
<p>See :doc: <cite>AddressSanitizer</cite> for more details.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-sanitize-stats">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]sanitize-stats=
</span></span><span class=3D"sig-prename descclassname"></span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-=
f-no-sanitize-stats" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable simple statistics gathering for the enabled sanitizers.
See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/San=
itizerStats.html"><span class=3D"doc">SanitizerStats</span></a> for more de=
tails.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fsanitize-undefined-trap-o=
n-error">
<span class=3D"sig-name descname"><span class=3D"pre">-fsanitize-undefined-=
trap-on-error</span></span><span class=3D"sig-prename descclassname"></span=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.ht=
ml#cmdoption-fsanitize-undefined-trap-on-error" title=3D"Link to this defin=
ition">=C2=B6</a></dt>
<dd><p>Deprecated alias for <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">-fsanitize-trap=3Dundefined</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fsanitize-cfi-cross-dso">
<span class=3D"sig-name descname"><span class=3D"pre">-fsanitize-cfi-cross-=
dso</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-fsanitize-cfi-cross-dso" title=3D"Link to this definition">=C2=B6</a></=
dt>
<dd><p>Enable cross-DSO control flow integrity checks. This flag modifies
the behavior of sanitizers in the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">cfi</span></code> group to allow checking
of cross-DSO virtual and indirect calls.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fsanitize-cfi-icall-genera=
lize-pointers">
<span class=3D"sig-name descname"><span class=3D"pre">-fsanitize-cfi-icall-=
generalize-pointers</span></span><span class=3D"sig-prename descclassname">=
</span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersMan=
ual.html#cmdoption-fsanitize-cfi-icall-generalize-pointers" title=3D"Link t=
o this definition">=C2=B6</a></dt>
<dd><p>Generalize pointers in return and argument types in function type si=
gnatures
checked by Control Flow Integrity indirect call checking. See
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Control=
FlowIntegrity.html"><span class=3D"doc">Control Flow Integrity</span></a> f=
or more details.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fsanitize-cfi-icall-experi=
mental-normalize-integers">
<span class=3D"sig-name descname"><span class=3D"pre">-fsanitize-cfi-icall-=
experimental-normalize-integers</span></span><span class=3D"sig-prename des=
cclassname"></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/d=
ocs/UsersManual.html#cmdoption-fsanitize-cfi-icall-experimental-normalize-i=
ntegers" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Normalize integers in return and argument types in function type sig=
natures
checked by Control Flow Integrity indirect call checking. See
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Control=
FlowIntegrity.html"><span class=3D"doc">Control Flow Integrity</span></a> f=
or more details.</p>
<p>This option is currently experimental.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fsanitize-kcfi-arity">
<span class=3D"sig-name descname"><span class=3D"pre">-fsanitize-kcfi-arity=
</span></span><span class=3D"sig-prename descclassname"></span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-=
fsanitize-kcfi-arity" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Extends kernel indirect call forward-edge control flow integrity wit=
h
additional function arity information (for supported targets). See
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Control=
FlowIntegrity.html"><span class=3D"doc">Control Flow Integrity</span></a> f=
or more details.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fstrict-vtable-pointers">
<span class=3D"sig-name descname"><span class=3D"pre">-fstrict-vtable-point=
ers</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-fstrict-vtable-pointers" title=3D"Link to this definition">=C2=B6</a></=
dt>
<dd><p>Enable optimizations based on the strict rules for overwriting polym=
orphic
C++ objects, i.e. the vptr is invariant during an object=E2=80=99s lifetime=
.
This enables better devirtualization. Turned off by default, because it is
still experimental.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fwhole-program-vtables">
<span class=3D"sig-name descname"><span class=3D"pre">-fwhole-program-vtabl=
es</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-fwhole-program-vtables" title=3D"Link to this definition">=C2=B6</a></d=
t>
<dd><p>Enable whole-program vtable optimizations, such as single-implementa=
tion
devirtualization and virtual constant propagation, for classes with
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/LTOVisi=
bility.html"><span class=3D"doc">hidden LTO visibility</span></a>. Requires=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">-flto</sp=
an></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-split-lto-unit">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no]split-lto-unit<=
/span></span><span class=3D"sig-prename descclassname"></span><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f=
-no-split-lto-unit" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Controls splitting the <a class=3D"reference internal" href=3D"https=
://clang.llvm.org/docs/LTOVisibility.html"><span class=3D"doc">LTO unit</sp=
an></a> into regular LTO and
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/ThinLTO=
.html"><span class=3D"doc">ThinLTO</span></a> portions, when compiling with=
 -flto=3Dthin. Defaults to false
unless <code class=3D"docutils literal notranslate"><span class=3D"pre">-fs=
anitize=3Dcfi</span></code> or <code class=3D"docutils literal notranslate"=
><span class=3D"pre">-fwhole-program-vtables</span></code> are specified, i=
n
which case it defaults to true. Splitting is required with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">fsanitize=3Dcfi</span></co=
de>,
and it is an error to disable via <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-fno-split-lto-unit</span></code>. Splitting is
optional with <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-fwhole-program-vtables</span></code>, however, it enables more
aggressive whole program vtable optimizations (specifically virtual constan=
t
propagation).</p>
<p>When enabled, vtable definitions and select virtual functions are placed
in the split regular LTO module, enabling more aggressive whole program
vtable optimizations required for CFI and virtual constant propagation.
However, this can increase the LTO link time and memory requirements over
pure ThinLTO, as all split regular LTO modules are merged and LTO linked
with regular LTO.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-unique-source-file-na=
mes">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]unique-source-=
file-names</span></span><span class=3D"sig-prename descclassname"></span><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
cmdoption-f-no-unique-source-file-names" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>When enabled, allows the compiler to assume that each object file
passed to the linker has a unique identifier. The identifier for
an object file is either the source file path or the value of the
argument <cite>-funique-source-file-identifier</cite> if specified. This is
useful for reducing link times when doing ThinLTO in combination with
whole-program devirtualization or CFI.</p>
<p>The full source path or identifier passed to the compiler must be
unique. This means that, for example, the following is a usage error:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span><span class=3D"nb">cd</span><span =
class=3D"w"> </span>foo
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-funique-source-=
file-names<span class=3D"w"> </span>-c<span class=3D"w"> </span>foo.c
<span class=3D"gp">$ </span><span class=3D"nb">cd</span><span class=3D"w"> =
</span>../bar
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-funique-source-=
file-names<span class=3D"w"> </span>-c<span class=3D"w"> </span>foo.c
<span class=3D"gp">$ </span><span class=3D"nb">cd</span><span class=3D"w"> =
</span>..
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>foo/foo.o<span c=
lass=3D"w"> </span>bar/foo.o
</pre></div>
</div>
<p>but this is not:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-fu=
nique-source-file-names<span class=3D"w"> </span>-c<span class=3D"w"> </spa=
n>foo/foo.c
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-funique-source-=
file-names<span class=3D"w"> </span>-c<span class=3D"w"> </span>bar/foo.c
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>foo/foo.o<span c=
lass=3D"w"> </span>bar/foo.o
</pre></div>
</div>
<p>A misuse of this flag may result in a duplicate symbol error at
link time.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-funique-source-file-identi=
fier">
<span class=3D"sig-name descname"><span class=3D"pre">-funique-source-file-=
identifier</span></span><span class=3D"sig-prename descclassname"><span cla=
ss=3D"pre">=3DIDENTIFIER</span></span><a class=3D"headerlink" href=3D"https=
://clang.llvm.org/docs/UsersManual.html#cmdoption-funique-source-file-ident=
ifier" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Used with <cite>-funique-source-file-names</cite> to specify a sourc=
e file
identifier.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fforce-emit-vtables">
<span class=3D"sig-name descname"><span class=3D"pre">-fforce-emit-vtables<=
/span></span><span class=3D"sig-prename descclassname"></span><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f=
force-emit-vtables" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>In order to improve devirtualization, forces emitting of vtables eve=
n in
modules where it isn=E2=80=99t necessary. It causes more inline virtual fun=
ctions
to be emitted.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-assume-sane-operator-n=
ew">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-assume-sane-oper=
ator-new</span></span><span class=3D"sig-prename descclassname"></span><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cm=
doption-fno-assume-sane-operator-new" title=3D"Link to this definition">=C2=
=B6</a></dt>
<dd><p>Don=E2=80=99t assume that the C++=E2=80=99s new operator is sane.</p=
>
<p>This option tells the compiler to do not assume that C++=E2=80=99s globa=
l
new operator will always return a pointer that does not alias any
other pointer when the function returns.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fassume-nothrow-exception-=
dtor">
<span class=3D"sig-name descname"><span class=3D"pre">-fassume-nothrow-exce=
ption-dtor</span></span><span class=3D"sig-prename descclassname"></span><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
cmdoption-fassume-nothrow-exception-dtor" title=3D"Link to this definition"=
>=C2=B6</a></dt>
<dd><p>Assume that an exception object=E2=80=99 destructor will not throw, =
and generate
less code for catch handlers. A throw expression of a type with a
potentially-throwing destructor will lead to an error.</p>
<p>By default, Clang assumes that the exception object may have a throwing
destructor. For the Itanium C++ ABI, Clang generates a landing pad to
destroy local variables and call <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">_Unwind_Resume</span></code> for the code
<code class=3D"docutils literal notranslate"><span class=3D"pre">catch</spa=
n> <span class=3D"pre">(...)</span> <span class=3D"pre">{</span> <span clas=
s=3D"pre">...</span> <span class=3D"pre">}</span></code>. This option tells=
 Clang that an exception object=E2=80=99s
destructor will not throw and code simplification is possible.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ftrap-function">
<span class=3D"sig-name descname"><span class=3D"pre">-ftrap-function</span=
></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D[n=
ame]</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/do=
cs/UsersManual.html#cmdoption-ftrap-function" title=3D"Link to this definit=
ion">=C2=B6</a></dt>
<dd><p>Instruct code generator to emit a function call to the specified
function name for <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__builtin_trap()</span></code>.</p>
<p>LLVM code generator translates <code class=3D"docutils literal notransla=
te"><span class=3D"pre">__builtin_trap()</span></code> to a trap
instruction if it is supported by the target ISA. Otherwise, the
builtin is translated into a call to <code class=3D"docutils literal notran=
slate"><span class=3D"pre">abort</span></code>. If this option is
set, then the code generator will always lower the builtin to a call
to the specified function regardless of whether the target ISA has a
trap instruction. This option is useful for environments (e.g.
deeply embedded) where a trap cannot be properly handled, or when
some custom behavior is desired.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ftls-model">
<span class=3D"sig-name descname"><span class=3D"pre">-ftls-model</span></s=
pan><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D[model=
]</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cmdoption-ftls-model" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Select which TLS model to use.</p>
<p>Valid values are: <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">global-dynamic</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">local-dynamic</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">initial-ex=
ec</span></code> and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">local-exec</span></code>. The default value is
<code class=3D"docutils literal notranslate"><span class=3D"pre">global-dyn=
amic</span></code>. The compiler may use a different model if the
selected model is not supported by the target, or if a more
efficient model can be used. The TLS model can be overridden per
variable using the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">tls_model</span></code> attribute.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-femulated-tls">
<span class=3D"sig-name descname"><span class=3D"pre">-femulated-tls</span>=
</span><span class=3D"sig-prename descclassname"></span><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-femulat=
ed-tls" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Select emulated TLS model, which overrides all -ftls-model choices.<=
/p>
<p>In emulated TLS mode, all access to TLS variables are converted to
calls to __emutls_get_address in the runtime library.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-mhwdiv">
<span class=3D"sig-name descname"><span class=3D"pre">-mhwdiv</span></span>=
<span class=3D"sig-prename descclassname"><span class=3D"pre">=3D[values]</=
span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Use=
rsManual.html#cmdoption-mhwdiv" title=3D"Link to this definition">=C2=B6</a=
></dt>
<dd><p>Select the ARM modes (arm or thumb) that support hardware division
instructions.</p>
<p>Valid values are: <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">arm</span></code>, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">thumb</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">arm,thumb</span></code>.
This option is used to indicate which mode (arm or thumb) supports
hardware division instructions. This only applies to the ARM
architecture.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-m-no-crc">
<span class=3D"sig-name descname"><span class=3D"pre">-m[no-]crc</span></sp=
an><span class=3D"sig-prename descclassname"></span><a class=3D"headerlink"=
 href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-m-no-crc" t=
itle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enable or disable CRC instructions.</p>
<p>This option is used to indicate whether CRC instructions are to
be generated. This only applies to the ARM architecture.</p>
<p>CRC instructions are enabled by default on ARMv8.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-mgeneral-regs-only">
<span class=3D"sig-name descname"><span class=3D"pre">-mgeneral-regs-only</=
span></span><span class=3D"sig-prename descclassname"></span><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-mg=
eneral-regs-only" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generate code which only uses the general purpose registers.</p>
<p>This option restricts the generated code to use general registers
only. This only applies to the AArch64 architecture.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-mcompact-branches">
<span class=3D"sig-name descname"><span class=3D"pre">-mcompact-branches</s=
pan></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=
=3D[values]</span></span><a class=3D"headerlink" href=3D"https://clang.llvm=
.org/docs/UsersManual.html#cmdoption-mcompact-branches" title=3D"Link to th=
is definition">=C2=B6</a></dt>
<dd><p>Control the usage of compact branches for MIPSR6.</p>
<p>Valid values are: <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">never</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">optimal</span></code> and <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">always</span></code>.
The default value is <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">optimal</span></code> which generates compact branches
when a delay slot cannot be filled. <code class=3D"docutils literal notrans=
late"><span class=3D"pre">never</span></code> disables the usage of
compact branches and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">always</span></code> generates compact branches whenever
possible.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-max-type-align">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no-]max-type-align=
</span></span><span class=3D"sig-prename descclassname"><span class=3D"pre"=
>=3D[number]</span></span><a class=3D"headerlink" href=3D"https://clang.llv=
m.org/docs/UsersManual.html#cmdoption-f-no-max-type-align" title=3D"Link to=
 this definition">=C2=B6</a></dt>
<dd><p>Instruct the code generator to not enforce a higher alignment than t=
he given
number (of bytes) when accessing memory via an opaque pointer or reference.
This cap is ignored when directly accessing a variable or when the pointee
type has an explicit =E2=80=9Caligned=E2=80=9D attribute.</p>
<p>The value should usually be determined by the properties of the system a=
llocator.
Some builtin types, especially vector types, have very high natural alignme=
nts;
when working with values of those types, Clang usually wants to use instruc=
tions
that take advantage of that alignment.  However, many system allocators do
not promise to return memory that is more than 8-byte or 16-byte-aligned.  =
Use
this option to limit the alignment that the compiler can assume for an arbi=
trary
pointer, which may point onto the heap.</p>
<p>This option does not affect the ABI alignment of types; the layout of st=
ructs and
unions and the value returned by the alignof operator remain the same.</p>
<p>This option can be overridden on a case-by-case basis by putting an expl=
icit
=E2=80=9Caligned=E2=80=9D alignment on a struct, union, or typedef.  For ex=
ample:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">#</span>include<span class=3D"w"> </span>&l=
t;immintrin.h&gt;
<span class=3D"go">// Make an aligned typedef of the AVX-512 16-int vector =
type.</span>
<span class=3D"go">typedef __v16si __aligned_v16si __attribute__((aligned(6=
4)));</span>

<span class=3D"go">void initialize_vector(__aligned_v16si *v) {</span>
<span class=3D"go">  // The compiler may assume that =E2=80=98v=E2=80=99 is=
 64-byte aligned, regardless of the</span>
<span class=3D"go">  // value of -fmax-type-align.</span>
<span class=3D"go">}</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-faddrsig">
<span id=3D"cmdoption-fno-addrsig"></span><span class=3D"sig-name descname"=
><span class=3D"pre">-faddrsig</span></span><span class=3D"sig-prename desc=
classname"></span><span class=3D"sig-prename descclassname"><span class=3D"=
pre">,</span> </span><span class=3D"sig-name descname"><span class=3D"pre">=
-fno-addrsig</span></span><span class=3D"sig-prename descclassname"></span>=
<a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.htm=
l#cmdoption-faddrsig" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Controls whether Clang emits an address-significance table into the =
object
file. Address-significance tables allow linkers to implement <a class=3D"re=
ference external" href=3D"https://research.google.com/pubs/archive/36912.pd=
f">safe ICF</a> without the false
positives that can result from other implementation techniques such as
relocation scanning. Address-significance tables are enabled by default
on ELF targets when using the integrated assembler. This flag currently
only has an effect on ELF targets.</p>
</dd></dl>

<dl class=3D"std option" id=3D"funique-internal-linkage-names">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-unique-internal-linka=
ge-names">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no]-unique-interna=
l-linkage-names</span></span><span class=3D"sig-prename descclassname"></sp=
an><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.=
html#cmdoption-f-no-unique-internal-linkage-names" title=3D"Link to this de=
finition">=C2=B6</a></dt>
<dd><p>Controls whether Clang emits a unique (best-effort) symbol name for =
internal
linkage symbols.  When this option is set, compiler hashes the main source
file path from the command line and appends it to all internal symbols. If =
a
program contains multiple objects compiled with the same command-line sourc=
e
file path, the symbols are not guaranteed to be unique.  This option is
particularly useful in attributing profile information to the correct
function when multiple functions with the same private linkage name exist
in the binary.</p>
<p>It should be noted that this option cannot guarantee uniqueness and the
following is an example where it is not unique when two modules contain
symbols with the same private linkage name:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span><span class=3D"nb">cd</span><span =
class=3D"w"> </span><span class=3D"nv">$P</span>/foo<span class=3D"w"> </sp=
an><span class=3D"o">&amp;&amp;</span><span class=3D"w"> </span>clang<span =
class=3D"w"> </span>-c<span class=3D"w"> </span>-funique-internal-linkage-n=
ames<span class=3D"w"> </span>name_conflict.c
<span class=3D"gp">$ </span><span class=3D"nb">cd</span><span class=3D"w"> =
</span><span class=3D"nv">$P</span>/bar<span class=3D"w"> </span><span clas=
s=3D"o">&amp;&amp;</span><span class=3D"w"> </span>clang<span class=3D"w"> =
</span>-c<span class=3D"w"> </span>-funique-internal-linkage-names<span cla=
ss=3D"w"> </span>name_conflict.c
<span class=3D"gp">$ </span><span class=3D"nb">cd</span><span class=3D"w"> =
</span><span class=3D"nv">$P</span><span class=3D"w"> </span><span class=3D=
"o">&amp;&amp;</span><span class=3D"w"> </span>clang<span class=3D"w"> </sp=
an>foo/name_conflict.o<span class=3D"w"> </span><span class=3D"o">&amp;&amp=
;</span><span class=3D"w"> </span>bar/name_conflict.o
</pre></div>
</div>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-f-no-basic-block-address-m=
ap">
<span class=3D"sig-name descname"><span class=3D"pre">-f[no]-basic-block-ad=
dress-map:</span></span><span class=3D"sig-prename descclassname"></span><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
cmdoption-f-no-basic-block-address-map" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dt class=3D"sig sig-object std" id=3D"cmdoption-arg-Emits">
<span class=3D"sig-name descname"><span class=3D"pre">Emits</span></span><s=
pan class=3D"sig-prename descclassname"> <span class=3D"pre">a</span> <span=
 class=3D"pre">``SHT_LLVM_BB_ADDR_MAP``</span> <span class=3D"pre">section<=
/span> <span class=3D"pre">which</span> <span class=3D"pre">includes</span>=
 <span class=3D"pre">address</span> <span class=3D"pre">offsets</span> <spa=
n class=3D"pre">for</span> <span class=3D"pre">each</span></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-arg-Emits" title=3D"Link to this definition">=C2=B6</a></dt>
<dt class=3D"sig sig-object std" id=3D"cmdoption-arg-basic">
<span id=3D"cmdoption-arg-relative"></span><span class=3D"sig-name descname=
"><span class=3D"pre">basic</span></span><span class=3D"sig-prename desccla=
ssname"> <span class=3D"pre">block</span> <span class=3D"pre">in</span> <sp=
an class=3D"pre">the</span> <span class=3D"pre">program</span></span><span =
class=3D"sig-prename descclassname"><span class=3D"pre">,</span> </span><sp=
an class=3D"sig-name descname"><span class=3D"pre">relative</span></span><s=
pan class=3D"sig-prename descclassname"> <span class=3D"pre">to</span> <spa=
n class=3D"pre">the</span> <span class=3D"pre">parent</span> <span class=3D=
"pre">function</span> <span class=3D"pre">address.</span></span><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption=
-arg-basic" title=3D"Link to this definition">=C2=B6</a></dt>
<dd></dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fbasic-block-sections">
<span id=3D"cmdoption-arg-list"></span><span id=3D"cmdoption-arg-none"></sp=
an><span class=3D"sig-name descname"><span class=3D"pre">-fbasic-block-sect=
ions</span></span><span class=3D"sig-prename descclassname"><span class=3D"=
pre">=3D[all</span></span><span class=3D"sig-prename descclassname"><span c=
lass=3D"pre">,</span> </span><span class=3D"sig-name descname"><span class=
=3D"pre">list</span></span><span class=3D"sig-prename descclassname"><span =
class=3D"pre">=3D&lt;arg&gt;</span></span><span class=3D"sig-prename desccl=
assname"><span class=3D"pre">,</span> </span><span class=3D"sig-name descna=
me"><span class=3D"pre">none]</span></span><span class=3D"sig-prename descc=
lassname"></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/doc=
s/UsersManual.html#cmdoption-fbasic-block-sections" title=3D"Link to this d=
efinition">=C2=B6</a></dt>
<dd><p>Controls how Clang emits text sections for basic blocks. With values=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">all</span=
></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">list=
=3D&lt;arg&gt;</span></code>, each basic block or a subset of basic blocks =
can be placed
in its own unique section.</p>
<p>With the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">list=3D&lt;arg&gt;</span></code> option, a file containing the subset of =
basic blocks
that need to placed in unique sections can be specified.  The format of the
file is as follows.  For example, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">list=3Dspec.txt</span></code> where <code class=3D"=
docutils literal notranslate"><span class=3D"pre">spec.txt</span></code> is=
 the
following:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span>!foo
!!2
!_Z3barv
</pre></div>
</div>
<p>will place the machine basic block with <code class=3D"docutils literal =
notranslate"><span class=3D"pre">id</span> <span class=3D"pre">2</span></co=
de> in function <code class=3D"docutils literal notranslate"><span class=3D=
"pre">foo</span></code> in a
unique section.  It will also place all basic blocks of functions <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">bar</span></code>
in unique sections.</p>
<p>Further, section clusters can also be specified using the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">list=3D&lt;arg&gt;</span=
></code>
option.  For example, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">list=3Dspec.txt</span></code> where <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">spec.txt</span></code> contains:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span>!foo
!!1 !!3 !!5
!!2 !!4 !!6
</pre></div>
</div>
<p>will create two unique sections for function <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">foo</span></code> with the first
containing the odd numbered basic blocks and the second containing the
even numbered basic blocks.</p>
<p>Basic block sections allow the linker to reorder basic blocks and enable=
s
link-time optimizations like whole program inter-procedural basic block
reordering.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcodegen-data-generate">
<span class=3D"sig-name descname"><span class=3D"pre">-fcodegen-data-genera=
te</span></span><span class=3D"sig-prename descclassname"><span class=3D"pr=
e">[=3D&lt;path&gt;]</span></span><a class=3D"headerlink" href=3D"https://c=
lang.llvm.org/docs/UsersManual.html#cmdoption-fcodegen-data-generate" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Emit the raw codegen (CG) data into custom sections in the object fi=
le.
Currently, this option also combines the raw CG data from the object files
into an indexed CG data file specified by the &lt;path&gt;, for LLD MachO o=
nly.
When the &lt;path&gt; is not specified, <cite>default.cgdata</cite> is crea=
ted.
The CG data file combines all the outlining instances that occurred locally
in each object file.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-fu=
se-ld<span class=3D"o">=3D</span>lld<span class=3D"w"> </span>-Oz<span clas=
s=3D"w"> </span>-fcodegen-data-generate<span class=3D"w"> </span>code.cc
</pre></div>
</div>
<p>For linkers that do not yet support this feature, <cite>llvm-cgdata</cit=
e> can be used
manually to merge this CG data in object files.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-c<=
span class=3D"w"> </span>-fuse-ld<span class=3D"o">=3D</span>lld<span class=
=3D"w"> </span>-Oz<span class=3D"w"> </span>-fcodegen-data-generate<span cl=
ass=3D"w"> </span>code.cc
<span class=3D"gp">$ </span>llvm-cgdata<span class=3D"w"> </span>--merge<sp=
an class=3D"w"> </span>-o<span class=3D"w"> </span>default.cgdata<span clas=
s=3D"w"> </span>code.o
</pre></div>
</div>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcodegen-data-use">
<span class=3D"sig-name descname"><span class=3D"pre">-fcodegen-data-use</s=
pan></span><span class=3D"sig-prename descclassname"><span class=3D"pre">[=
=3D&lt;path&gt;]</span></span><a class=3D"headerlink" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#cmdoption-fcodegen-data-use" title=3D"Link =
to this definition">=C2=B6</a></dt>
<dd><p>Read the codegen data from the specified path to more effectively ou=
tline
functions across compilation units. When the &lt;path&gt; is not specified,
<cite>default.cgdata</cite> is used. This option can create many identicall=
y outlined
functions that can be optimized by the conventional linker=E2=80=99s identi=
cal code
folding (ICF).</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-fu=
se-ld<span class=3D"o">=3D</span>lld<span class=3D"w"> </span>-Oz<span clas=
s=3D"w"> </span>-Wl,--icf<span class=3D"o">=3D</span>safe<span class=3D"w">=
 </span>-fcodegen-data-use<span class=3D"w"> </span>code.cc
</pre></div>
</div>
</dd></dl>

</section>
<section id=3D"strict-aliasing">
<span id=3D"id5"></span><h3><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id52" role=3D"doc-backlink">Strict Aliasing<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.=
html#strict-aliasing" title=3D"Link to this heading">=C2=B6</a></h3>
<p>The C and C++ standards require accesses to objects in memory to use l-v=
alues of
an appropriate type for the object. This is called <em>strict aliasing</em>=
 or
<em>type-based alias analysis</em>. Strict aliasing enhances a variety of p=
owerful
memory optimizations, including reordering, combining, and eliminating memo=
ry
accesses. These optimizations can lead to unexpected behavior in code that
violates the strict aliasing rules. For example:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"w">  </span><span class=3D"kt">void</span><span cla=
ss=3D"w"> </span><span class=3D"nf">advance</span><span class=3D"p">(</span=
><span class=3D"kt">size_t</span><span class=3D"w"> </span><span class=3D"o=
">*</span><span class=3D"n">index</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"kt">double</span><span class=3D"w"> </span>=
<span class=3D"o">*</span><span class=3D"n">data</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">    </span><span class=3D"kt">double</span><span class=3D=
"w"> </span><span class=3D"n">value</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">data</span=
><span class=3D"p">[</span><span class=3D"o">*</span><span class=3D"n">inde=
x</span><span class=3D"p">];</span>
<span class=3D"w">    </span><span class=3D"cm">/* Clang may assume that th=
is store does not change the contents of `data`. */</span>
<span class=3D"w">    </span><span class=3D"o">*</span><span class=3D"n">in=
dex</span><span class=3D"w"> </span><span class=3D"o">+=3D</span><span clas=
s=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">;</span>
<span class=3D"w">    </span><span class=3D"cm">/* Clang may assume that th=
is store does not change the contents of `index`. */</span>
<span class=3D"w">    </span><span class=3D"n">data</span><span class=3D"p"=
>[</span><span class=3D"o">*</span><span class=3D"n">index</span><span clas=
s=3D"p">]</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span=
 class=3D"w"> </span><span class=3D"n">value</span><span class=3D"p">;</spa=
n>
<span class=3D"w">    </span><span class=3D"cm">/* Either of these facts ma=
y create significant optimization opportunities</span>
<span class=3D"cm">     if Clang is able to inline this function. */</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Strict aliasing can be explicitly enabled with <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">-fstrict-aliasing</span></code> and
disabled with <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-fno-strict-aliasing</span></code>. <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">clang-cl</span></code> defaults to
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-stric=
t-aliasing</span></code>; see . Otherwise, Clang defaults to <code class=3D=
"docutils literal notranslate"><span class=3D"pre">-fstrict-aliasing</span>=
</code>.</p>
<p>C and C++ specify slightly different rules for strict aliasing. To impro=
ve
language interoperability, Clang allows two types to alias if either langua=
ge
would permit it. This includes applying the C++ similar types rule to C,
allowing <code class=3D"docutils literal notranslate"><span class=3D"pre">i=
nt</span> <span class=3D"pre">**</span></code> to alias <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">int</span> <span class=3D"pre=
">const</span> <span class=3D"pre">*</span> <span class=3D"pre">const</span=
> <span class=3D"pre">*</span></code>. Clang also relaxes the
standard aliasing rules in the following ways:</p>
<ul class=3D"simple">
<li><p>All integer types of the same size are permitted to alias each other=
,
including signed and unsigned types.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">voi=
d*</span></code> is permitted to alias any pointer type, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">void**</span></code> is perm=
itted to
alias any pointer to pointer type, and so on.</p></li>
</ul>
<p>Code which violates strict aliasing has undefined behavior. A program th=
at
works in one version of Clang may not work in another because of changes to=
 the
optimizer. Clang provides a <a class=3D"reference internal" href=3D"https:/=
/clang.llvm.org/docs/TypeSanitizer.html"><span class=3D"doc">TypeSanitizer<=
/span></a> to help detect
violations of the strict aliasing rules, but it is currently still experime=
ntal.
Code that is known to violate strict aliasing should generally be built wit=
h
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-stric=
t-aliasing</span></code> if the violation cannot be fixed.</p>
<p>Clang supports several ways to fix a violation of strict aliasing:</p>
<ul class=3D"simple">
<li><p>L-values of the character types <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">char</span></code> and <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">unsigned</span> <span class=3D"pr=
e">char</span></code> (as well as
other types, depending on the standard) are permitted to access objects of
any type.</p></li>
<li><p>Library functions such as <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">memcpy</span></code> and <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">memset</span></code> are specified as=
 treating
memory as characters and therefore are not limited by strict aliasing. If a
value of one type must be reinterpreted as another (e.g. to read the bits o=
f a
floating-point number), use <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">memcpy</span></code> to copy the representation to an obj=
ect
of the destination type. This has no overhead over a direct l-value access
because Clang should reliably optimize calls to these functions to use simp=
le
loads and stores when they are used with small constant sizes.</p></li>
<li><p>The attribute <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">may_alias</span></code> can be added to a <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">typedef</span></code> to give l-=
values of
that type the same aliasing power as the character types.</p></li>
</ul>
<p>Clang makes a best effort to avoid obvious miscompilations from strict a=
liasing
by only considering type information when it cannot prove that two accesses=
 must
refer to the same memory. However, it is not recommended that programmers
intentionally rely on this instead of using one of the solutions above beca=
use
it is too easy for the compiler=E2=80=99s analysis to be blocked in surpris=
ing ways.</p>
<p>In Clang 20, Clang strengthened its implementation of strict aliasing fo=
r
accesses of pointer type. Previously, all accesses of pointer type were
permitted to alias each other, but Clang now distinguishes different pointe=
rs
by their pointee type, except as limited by the relaxations around qualifie=
rs
and <code class=3D"docutils literal notranslate"><span class=3D"pre">void*<=
/span></code> described above. The previous behavior of treating all pointe=
rs as
aliasing can be restored using <code class=3D"docutils literal notranslate"=
><span class=3D"pre">-fno-pointer-tbaa</span></code>.</p>
</section>
<section id=3D"profile-guided-optimization">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id53" role=3D"doc-backlink">Profile Guided Optimization</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#profil=
e-guided-optimization" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Profile information enables better optimization. For example, knowing th=
at a
branch is taken very frequently helps the compiler make better decisions wh=
en
ordering basic blocks. Knowing that a function <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">foo</span></code> is called more
frequently than another function <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">bar</span></code> helps the inliner. Optimization
levels <code class=3D"docutils literal notranslate"><span class=3D"pre">-O2=
</span></code> and above are recommended for use of profile guided optimiza=
tion.</p>
<p>Clang supports profile guided optimization with two different kinds of
profiling. A sampling profiler can generate a profile with very low runtime
overhead, or you can build an instrumented version of the code that collect=
s
more detailed profile information. Both kinds of profiles can provide execu=
tion
counts for instructions in the code and information on branches taken and
function invocation.</p>
<p>Regardless of which kind of profiling you use, be careful to collect pro=
files
by running your code with inputs that are representative of the typical
behavior. Code that is not exercised in the profile will be optimized as if=
 it
is unimportant, and the compiler may make poor optimization choices for cod=
e
that is disproportionately used while profiling.</p>
<section id=3D"differences-between-sampling-and-instrumentation">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id54" role=3D"doc-backlink">Differences Between Sampling and Instrum=
entation</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Use=
rsManual.html#differences-between-sampling-and-instrumentation" title=3D"Li=
nk to this heading">=C2=B6</a></h4>
<p>Although both techniques are used for similar purposes, there are import=
ant
differences between the two:</p>
<ol class=3D"arabic simple">
<li><p>Profile data generated with one cannot be used by the other, and the=
re is no
conversion tool that can convert one to the other. So, a profile generated
via <code class=3D"docutils literal notranslate"><span class=3D"pre">-fprof=
ile-generate</span></code> or <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-fprofile-instr-generate</span></code> must be used wit=
h
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
use</span></code> or <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">-fprofile-instr-use</span></code>.  Similarly, sampling profiles
generated by external profilers must be converted and used with <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-sample-use<=
/span></code>
or <code class=3D"docutils literal notranslate"><span class=3D"pre">-fauto-=
profile</span></code>.</p></li>
<li><p>Instrumentation profile data can be used for code coverage analysis =
and
optimization.</p></li>
<li><p>Sampling profiles can only be used for optimization. They cannot be =
used for
code coverage analysis. Although it would be technically possible to use
sampling profiles for code coverage, sample-based profiles are too
coarse-grained for code coverage purposes; it would yield poor results.</p>=
</li>
<li><p>Sampling profiles must be generated by an external tool. The profile
generated by that tool must then be converted into a format that can be rea=
d
by LLVM. The section on sampling profilers describes one of the supported
sampling profile formats.</p></li>
</ol>
</section>
<section id=3D"using-sampling-profilers">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id55" role=3D"doc-backlink">Using Sampling Profilers</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#using-samp=
ling-profilers" title=3D"Link to this heading">=C2=B6</a></h4>
<p>Sampling profilers are used to collect runtime information, such as
hardware counters, while your application executes. They are typically
very efficient and do not incur a large runtime overhead. The
sample data collected by the profiler can be used during compilation
to determine what the most executed areas of the code are.</p>
<p>Using the data from a sample profiler requires some changes in the way
a program is built. Before the compiler can use profiling information,
the code needs to execute under the profiler. The following is the
usual build cycle when using sample profilers for optimization:</p>
<ol class=3D"arabic">
<li><p>Build the code with source line table information. You can use all t=
he
usual build flags that you always build your application with. The only
requirement is that DWARF debug info including source line information is
generated. This DWARF information is important for the profiler to be able
to map instructions back to source line locations. The usefulness of this
DWARF information can be improved with the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">-fdebug-info-for-profiling</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">-funiq=
ue-internal-linkage-names</span></code> options.</p>
<p>On Linux:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-gline-tables-only<span class=3D"w"> </span><sp=
an class=3D"se">\</span>
<span class=3D"w">  </span>-fdebug-info-for-profiling<span class=3D"w"> </s=
pan>-funique-internal-linkage-names<span class=3D"w"> </span><span class=3D=
"se">\</span>
<span class=3D"w">  </span>code.cc<span class=3D"w"> </span>-o<span class=
=3D"w"> </span>code
</pre></div>
</div>
<p>While MSVC-style targets default to CodeView debug information, DWARF de=
bug
information is required to generate source-level LLVM profiles. Use
<code class=3D"docutils literal notranslate"><span class=3D"pre">-gdwarf</s=
pan></code> to include DWARF debug information:</p>
<div class=3D"highlight-winbatch notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"p">&gt;</span> clang-cl /O2 -gdwarf -gline-tab=
les-only <span class=3D"se">^</span>
<span class=3D"se"> </span> /clang:-fdebug-info-for-profiling /clang:-funiq=
ue-internal-linkage-names <span class=3D"se">^</span>
<span class=3D"se"> </span> code.cc /Fe:code /fuse-ld=3Dlld /link /debug:dw=
arf
</pre></div>
</div>
</li>
</ol>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p><a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/User=
sManual.html#funique-internal-linkage-names"><span class=3D"std std-ref">-f=
unique-internal-linkage-names</span></a>
generates unique names based on given command-line source file paths. If
your build system uses absolute source paths and these paths may change
between steps 1 and 4, then the uniqued function names may change and resul=
t
in unused profile data. Consider omitting this option in such cases.</p>
</div>
<ol class=3D"arabic" start=3D"2">
<li><p>Run the executable under a sampling profiler. The specific profiler
you use does not really matter, as long as its output can be converted
into the format that the LLVM optimizer understands.</p>
<p>Two such profilers are the Linux Perf profiler
(<a class=3D"reference external" href=3D"https://perf.wiki.kernel.org/">htt=
ps://perf.wiki.kernel.org/</a>) and Intel=E2=80=99s Sampling Enabling Produ=
ct (SEP),
available as part of <a class=3D"reference external" href=3D"https://softwa=
re.intel.com/content/www/us/en/develop/tools/oneapi/components/vtune-profil=
er.html">Intel VTune</a>.
While Perf is Linux-specific, SEP can be used on Linux, Windows, and FreeBS=
D.</p>
<p>The LLVM tool <code class=3D"docutils literal notranslate"><span class=
=3D"pre">llvm-profgen</span></code> can convert output of either Perf or SE=
P. An
external project, <a class=3D"reference external" href=3D"https://github.co=
m/google/autofdo">AutoFDO</a>, also
provides a <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>create_llvm_prof</span></code> tool which supports Linux Perf output.</p>
<p>When using Perf:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>perf<span class=3D"w"> </span>reco=
rd<span class=3D"w"> </span>-b<span class=3D"w"> </span>-e<span class=3D"w"=
> </span>BR_INST_RETIRED.NEAR_TAKEN:uppp<span class=3D"w"> </span>./code
</pre></div>
</div>
<p>If the event above is unavailable, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">branches:u</span></code> is probably next-best.=
</p>
<p>Note the use of the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">-b</span></code> flag. This tells Perf to use the Last Branch
Record (LBR) to record call chains. While this is not strictly required,
it provides better call information, which improves the accuracy of
the profile data.</p>
<p>When using SEP:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>sep<span class=3D"w"> </span>-star=
t<span class=3D"w"> </span>-out<span class=3D"w"> </span>code.tb7<span clas=
s=3D"w"> </span>-ec<span class=3D"w"> </span>BR_INST_RETIRED.NEAR_TAKEN:pre=
cise<span class=3D"o">=3D</span>yes:pdir<span class=3D"w"> </span>-lbr<span=
 class=3D"w"> </span>no_filter:usr<span class=3D"w"> </span>-perf-script<sp=
an class=3D"w"> </span>brstack<span class=3D"w"> </span>-app<span class=3D"=
w"> </span>./code
</pre></div>
</div>
<p>This produces a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">code.perf.data.script</span></code> output which can be used with
<code class=3D"docutils literal notranslate"><span class=3D"pre">llvm-profg=
en</span></code>=E2=80=99s <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">--perfscript</span></code> input option.</p>
</li>
<li><p>Convert the collected profile data to LLVM=E2=80=99s sample profile =
format. This is
currently supported via the <a class=3D"reference external" href=3D"https:/=
/github.com/google/autofdo">AutoFDO</a>
converter <code class=3D"docutils literal notranslate"><span class=3D"pre">=
create_llvm_prof</span></code>. Once built and installed, you can convert
the <code class=3D"docutils literal notranslate"><span class=3D"pre">perf.d=
ata</span></code> file to LLVM using the command:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>create_llvm_prof<span class=3D"w">=
 </span>--binary<span class=3D"o">=3D</span>./code<span class=3D"w"> </span=
>--out<span class=3D"o">=3D</span>code.prof
</pre></div>
</div>
<p>This will read <code class=3D"docutils literal notranslate"><span class=
=3D"pre">perf.data</span></code> and the binary file <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">./code</span></code> and emit
the profile data in <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">code.prof</span></code>. Note that if you ran <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">perf</span></code>
without the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-b</span></code> flag, you need to use <code class=3D"docutils literal no=
translate"><span class=3D"pre">--use_lbr=3Dfalse</span></code> when
calling <code class=3D"docutils literal notranslate"><span class=3D"pre">cr=
eate_llvm_prof</span></code>.</p>
<p>Alternatively, the LLVM tool <code class=3D"docutils literal notranslate=
"><span class=3D"pre">llvm-profgen</span></code> can also be used to genera=
te
the LLVM sample profile:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>llvm-profgen<span class=3D"w"> </s=
pan>--binary<span class=3D"o">=3D</span>./code<span class=3D"w"> </span>--o=
utput<span class=3D"o">=3D</span>code.prof<span class=3D"w"> </span>--perfd=
ata<span class=3D"o">=3D</span>perf.data
</pre></div>
</div>
<p>Please note, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">perf.data</span></code> must be collected with <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">-b</span></code> flag to Linux <=
code class=3D"docutils literal notranslate"><span class=3D"pre">perf</span>=
</code>
for the above step to work.</p>
<p>When using SEP the output is in the textual format corresponding to
<code class=3D"docutils literal notranslate"><span class=3D"pre">llvm-profg=
en</span> <span class=3D"pre">--perfscript</span></code>. For example:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>llvm-profgen<span class=3D"w"> </s=
pan>--binary<span class=3D"o">=3D</span>./code<span class=3D"w"> </span>--o=
utput<span class=3D"o">=3D</span>code.prof<span class=3D"w"> </span>--perfs=
cript<span class=3D"o">=3D</span>code.perf.data.script
</pre></div>
</div>
</li>
<li><p>Build the code again using the collected profile. This step feeds
the profile back to the optimizers. This should result in a binary
that executes faster than the original one. Note that you are not
required to build the code with the exact same arguments that you
used in the first step. The only requirement is that you build the code
with the same debug info options and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">-fprofile-sample-use</span></code>.</p>
<p>On Linux:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-gline-tables-only<span class=3D"w"> </span><sp=
an class=3D"se">\</span>
<span class=3D"w">  </span>-fdebug-info-for-profiling<span class=3D"w"> </s=
pan>-funique-internal-linkage-names<span class=3D"w"> </span><span class=3D=
"se">\</span>
<span class=3D"w">  </span>-fprofile-sample-use<span class=3D"o">=3D</span>=
code.prof<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span=
 class=3D"w"> </span>code
</pre></div>
</div>
<p>On Windows:</p>
<div class=3D"highlight-winbatch notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"p">&gt;</span> clang-cl /O2 -gdwarf -gline-tab=
les-only <span class=3D"se">^</span>
<span class=3D"se"> </span> /clang:-fdebug-info-for-profiling /clang:-funiq=
ue-internal-linkage-names <span class=3D"se">^</span>
<span class=3D"se"> </span> -fprofile-sample-use=3Dcode.prof code.cc /Fe:co=
de -fuse-ld=3Dlld /link /debug:dwarf
</pre></div>
</div>
<p>[OPTIONAL] Sampling-based profiles can have inaccuracies or missing bloc=
k/
edge counters. The profile inference algorithm (profi) can be used to infer
missing blocks and edge counts, and improve the quality of profile data.
Enable it with <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-fsample-profile-use-profi</span></code>. For example, on Linux:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
fsample-profile-use-profi<span class=3D"w"> </span>-O2<span class=3D"w"> </=
span>-gline-tables-only<span class=3D"w"> </span><span class=3D"se">\</span=
>
<span class=3D"w">  </span>-fdebug-info-for-profiling<span class=3D"w"> </s=
pan>-funique-internal-linkage-names<span class=3D"w"> </span><span class=3D=
"se">\</span>
<span class=3D"w">  </span>-fprofile-sample-use<span class=3D"o">=3D</span>=
code.prof<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span=
 class=3D"w"> </span>code
</pre></div>
</div>
<p>On Windows:</p>
<div class=3D"highlight-winbatch notranslate"><div class=3D"highlight"><pre=
><span></span><span class=3D"p">&gt;</span> clang-cl /clang:-fsample-profil=
e-use-profi /O2 -gdwarf -gline-tables-only <span class=3D"se">^</span>
<span class=3D"se"> </span> /clang:-fdebug-info-for-profiling /clang:-funiq=
ue-internal-linkage-names <span class=3D"se">^</span>
<span class=3D"se"> </span> -fprofile-sample-use=3Dcode.prof code.cc /Fe:co=
de -fuse-ld=3Dlld /link /debug:dwarf
</pre></div>
</div>
</li>
</ol>
<section id=3D"sample-profile-formats">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id56" role=3D"doc-backlink">Sample Profile Formats</a><a class=3D"he=
aderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#sample-profi=
le-formats" title=3D"Link to this heading">=C2=B6</a></h5>
<p>Since external profilers generate profile data in a variety of custom fo=
rmats,
the data generated by the profiler must be converted into a format that can=
 be
read by the backend. LLVM supports three different sample profile formats:<=
/p>
<ol class=3D"arabic simple">
<li><p>ASCII text. This is the easiest one to generate. The file is divided=
 into
sections, which correspond to each of the functions with profile
information. The format is described below. It can also be generated from
the binary or gcov formats using the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">llvm-profdata</span></code> tool.</p></li>
<li><p>Binary encoding. This uses a more efficient encoding that yields sma=
ller
profile files. This is the format generated by the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">create_llvm_prof</span></code> too=
l
in <a class=3D"reference external" href=3D"https://github.com/google/autofd=
o">https://github.com/google/autofdo</a>.</p></li>
<li><p>GCC encoding. This is based on the gcov format, which is accepted by=
 GCC. It
is only interesting in environments where GCC and Clang co-exist. This
encoding is only generated by the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">create_gcov</span></code> tool in
<a class=3D"reference external" href=3D"https://github.com/google/autofdo">=
https://github.com/google/autofdo</a>. It can be read by LLVM and
<code class=3D"docutils literal notranslate"><span class=3D"pre">llvm-profd=
ata</span></code>, but it cannot be generated by either.</p></li>
</ol>
<p>If you are using Linux Perf to generate sampling profiles, you can use t=
he
conversion tool <code class=3D"docutils literal notranslate"><span class=3D=
"pre">create_llvm_prof</span></code> described in the previous section.
Otherwise, you will need to write a conversion tool that converts your
profiler=E2=80=99s native format into one of these three.</p>
</section>
<section id=3D"sample-profile-text-format">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id57" role=3D"doc-backlink">Sample Profile Text Format</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#sample=
-profile-text-format" title=3D"Link to this heading">=C2=B6</a></h5>
<p>This section describes the ASCII text format for sampling profiles. It i=
s,
arguably, the easiest one to generate. If you are interested in generating =
any
of the other two, consult the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">ProfileData</span></code> library in LLVM=E2=80=99s sou=
rce tree
(specifically, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">include/llvm/ProfileData/SampleProfReader.h</span></code>).</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"go">function1:total_samples:total_head_samples<=
/span>
<span class=3D"go"> offset1[.discriminator]: number_of_samples [fn1:num fn2=
:num ... ]</span>
<span class=3D"go"> offset2[.discriminator]: number_of_samples [fn3:num fn4=
:num ... ]</span>
<span class=3D"go"> ...</span>
<span class=3D"go"> offsetN[.discriminator]: number_of_samples [fn5:num fn6=
:num ... ]</span>
<span class=3D"go"> offsetA[.discriminator]: fnA:num_of_total_samples</span=
>
<span class=3D"go">  offsetA1[.discriminator]: number_of_samples [fn7:num f=
n8:num ... ]</span>
<span class=3D"go">  offsetA1[.discriminator]: number_of_samples [fn9:num f=
n10:num ... ]</span>
<span class=3D"go">  offsetB[.discriminator]: fnB:num_of_total_samples</spa=
n>
<span class=3D"go">   offsetB1[.discriminator]: number_of_samples [fn11:num=
 fn12:num ... ]</span>
</pre></div>
</div>
<p>This is a nested tree in which the indentation represents the nesting le=
vel
of the inline stack. There are no blank lines in the file. And the spacing
within a single line is fixed. Additional spaces will result in an error
while reading the file.</p>
<p>Any line starting with the =E2=80=98#=E2=80=99 character is completely i=
gnored.</p>
<p>Inlined calls are represented with indentation. The Inline stack is a
stack of source locations in which the top of the stack represents the
leaf function, and the bottom of the stack represents the actual
symbol to which the instruction belongs.</p>
<p>Function names must be mangled in order for the profile loader to
match them in the current translation unit. The two numbers in the
function header specify how many total samples were accumulated in the
function (first number), and the total number of samples accumulated
in the prologue of the function (second number). This head sample
count provides an indicator of how frequently the function is invoked.</p>
<p>There are two types of lines in the function body.</p>
<ul class=3D"simple">
<li><p>Sampled line represents the profile information of a source location=
.
<code class=3D"docutils literal notranslate"><span class=3D"pre">offsetN[.d=
iscriminator]:</span> <span class=3D"pre">number_of_samples</span> <span cl=
ass=3D"pre">[fn5:num</span> <span class=3D"pre">fn6:num</span> <span class=
=3D"pre">...</span> <span class=3D"pre">]</span></code></p></li>
<li><p>Callsite line represents the profile information of an inlined calls=
ite.
<code class=3D"docutils literal notranslate"><span class=3D"pre">offsetA[.d=
iscriminator]:</span> <span class=3D"pre">fnA:num_of_total_samples</span></=
code></p></li>
</ul>
<p>Each sampled line may contain several items. Some are optional (marked
below):</p>
<ol class=3D"loweralpha">
<li><p>Source line offset. This number represents the line number
in the function where the sample was collected. The line number is
always relative to the line where symbol of the function is
defined. So, if the function has its header at line 280, the offset
13 is at line 293 in the file.</p>
<p>Note that this offset should never be a negative number. This could
happen in cases like macros. The debug machinery will register the
line number at the point of macro expansion. So, if the macro was
expanded in a line before the start of the function, the profile
converter should emit a 0 as the offset (this means that the optimizers
will not be able to associate a meaningful weight to the instructions
in the macro).</p>
</li>
<li><p>[OPTIONAL] Discriminator. This is used if the sampled program
was compiled with DWARF discriminator support
(<a class=3D"reference external" href=3D"http://wiki.dwarfstd.org/index.php=
?title=3DPath_Discriminators">http://wiki.dwarfstd.org/index.php?title=3DPa=
th_Discriminators</a>).
DWARF discriminators are unsigned integer values that allow the
compiler to distinguish between multiple execution paths on the
same source line location.</p>
<p>For example, consider the line of code <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">if</span> <span class=3D"pre">(cond)</span>=
 <span class=3D"pre">foo();</span> <span class=3D"pre">else</span> <span cl=
ass=3D"pre">bar();</span></code>.
If the predicate <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cond</span></code> is true 80% of the time, then the edge
into function <code class=3D"docutils literal notranslate"><span class=3D"p=
re">foo</span></code> should be considered to be taken most of the
time. But both calls to <code class=3D"docutils literal notranslate"><span =
class=3D"pre">foo</span></code> and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">bar</span></code> are at the same source
line, so a sample count at that line is not sufficient. The
compiler needs to know which part of that line is taken more
frequently.</p>
<p>This is what discriminators provide. In this case, the calls to
<code class=3D"docutils literal notranslate"><span class=3D"pre">foo</span>=
</code> and <code class=3D"docutils literal notranslate"><span class=3D"pre=
">bar</span></code> will be at the same line, but will have
different discriminator values. This allows the compiler to correctly
set edge weights into <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">foo</span></code> and <code class=3D"docutils literal notransla=
te"><span class=3D"pre">bar</span></code>.</p>
</li>
<li><p>Number of samples. This is an integer quantity representing the
number of samples collected by the profiler at this source
location.</p></li>
<li><p>[OPTIONAL] Potential call targets and samples. If present, this
line contains a call instruction. This models both direct and
number of samples. For example,</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"go">130: 7  foo:3  bar:2  baz:7</span>
</pre></div>
</div>
<p>The above means that at relative line offset 130 there is a call
instruction that calls one of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">foo()</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">bar()</span></code> and <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">baz()</span></code>,
with <code class=3D"docutils literal notranslate"><span class=3D"pre">baz()=
</span></code> being the relatively more frequently called target.</p>
</li>
</ol>
<p>As an example, consider a program with the call chain <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">main</span> <span class=3D"p=
re">-&gt;</span> <span class=3D"pre">foo</span> <span class=3D"pre">-&gt;</=
span> <span class=3D"pre">bar</span></code>.
When built with optimizations enabled, the compiler may inline the
calls to <code class=3D"docutils literal notranslate"><span class=3D"pre">b=
ar</span></code> and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">foo</span></code> inside <code class=3D"docutils literal notrans=
late"><span class=3D"pre">main</span></code>. The generated profile
could then be something like this:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"go">main:35504:0</span>
<span class=3D"go">1: _Z3foov:35504</span>
<span class=3D"go">  2: _Z32bari:31977</span>
<span class=3D"go">  1.1: 31977</span>
<span class=3D"go">2: 0</span>
</pre></div>
</div>
<p>This profile indicates that there were a total of 35,504 samples
collected in main. All of those were at line 1 (the call to <code class=3D"=
docutils literal notranslate"><span class=3D"pre">foo</span></code>).
Of those, 31,977 were spent inside the body of <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">bar</span></code>. The last line
of the profile (<code class=3D"docutils literal notranslate"><span class=3D=
"pre">2:</span> <span class=3D"pre">0</span></code>) corresponds to line 2 =
inside <code class=3D"docutils literal notranslate"><span class=3D"pre">mai=
n</span></code>. No
samples were collected there.</p>
</section>
</section>
<section id=3D"profiling-with-instrumentation">
<span id=3D"prof-instr"></span><h4><a class=3D"toc-backref" href=3D"https:/=
/clang.llvm.org/docs/UsersManual.html#id58" role=3D"doc-backlink">Profiling=
 with Instrumentation</a><a class=3D"headerlink" href=3D"https://clang.llvm=
.org/docs/UsersManual.html#profiling-with-instrumentation" title=3D"Link to=
 this heading">=C2=B6</a></h4>
<p>Clang also supports profiling via instrumentation. This requires buildin=
g a
special instrumented version of the code and has some runtime
overhead during the profiling, but it provides more detailed results than a
sampling profiler. It also provides reproducible results, at least to the
extent that the code behaves consistently across runs.</p>
<p>Clang supports two types of instrumentation: frontend-based and IR-based=
.
Frontend-based instrumentation can be enabled with the option <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-instr-gener=
ate</span></code>,
and IR-based instrumentation can be enabled with the option <code class=3D"=
docutils literal notranslate"><span class=3D"pre">-fprofile-generate</span>=
</code>.
For best performance with PGO, IR-based instrumentation should be used. It =
has
the benefits of lower instrumentation overhead, smaller raw profile size, a=
nd
better runtime performance. Frontend-based instrumentation, on the other ha=
nd,
has better source correlation, so it should be used with source line-based
coverage testing.</p>
<p>The flag <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-fcs-profile-generate</span></code> also instruments programs using the s=
ame
instrumentation method as <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">-fprofile-generate</span></code>. However, it performs a
post-inline late instrumentation and can produce context-sensitive profiles=
.</p>
<p>Here are the steps for using profile guided optimization with
instrumentation:</p>
<ol class=3D"arabic">
<li><p>Build an instrumented version of the code by compiling and linking w=
ith the
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
generate</span></code> or <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">-fprofile-instr-generate</span></code> option.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-instr-generate<span class=3D"w"> </sp=
an>code.cc<span class=3D"w"> </span>-o<span class=3D"w"> </span>code
</pre></div>
</div>
</li>
<li><p>Run the instrumented executable with inputs that reflect the typical=
 usage.
By default, the profile data will be written to a <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">default.profraw</span></code> file
in the current directory. You can override that default by using option
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
instr-generate=3D</span></code> or by setting the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">LLVM_PROFILE_FILE</span></code>
environment variable to specify an alternate file. If non-default file name
is specified by both the environment variable and the command line option,
the environment variable takes precedence. The file name pattern specified
can include different modifiers: <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">%p</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">%h</span></code>, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">%m</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">%b</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">%t</span></code>, an=
d
<code class=3D"docutils literal notranslate"><span class=3D"pre">%c</span><=
/code>.</p>
<p>Any instance of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">%p</span></code> in that file name will be replaced by the process
ID, so that you can easily distinguish the profile output from multiple
runs.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span><span class=3D"nv">LLVM_PROFILE_FI=
LE</span><span class=3D"o">=3D</span><span class=3D"s2">"code-%p.profraw"</=
span><span class=3D"w"> </span>./code
</pre></div>
</div>
<p>The modifier <code class=3D"docutils literal notranslate"><span class=3D=
"pre">%h</span></code> can be used in scenarios where the same instrumented
binary is run in multiple different host machines dumping profile data
to a shared network based storage. The <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">%h</span></code> specifier will be substituted
with the hostname so that profiles collected from different hosts do not
clobber each other.</p>
<p>While the use of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">%p</span></code> specifier can reduce the likelihood for the prof=
iles
dumped from different processes to clobber each other, such clobbering can =
still
happen because of the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">pid</span></code> re-use by the OS. Another side-effect of usin=
g
<code class=3D"docutils literal notranslate"><span class=3D"pre">%p</span><=
/code> is that the storage requirement for raw profile data files is greatl=
y
increased.  To avoid issues like this, the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">%m</span></code> specifier can used in the=
 profile
name.  When this specifier is used, the profiler runtime will substitute <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">%m</span></c=
ode>
with an integer identifier associated with the instrumented binary. Additio=
nally,
multiple raw profiles dumped from different processes that share a file sys=
tem (can be
on different hosts) will be automatically merged by the profiler runtime du=
ring the
dumping. If the program links in multiple instrumented shared libraries, ea=
ch library
will dump the profile data into its own profile data file (with its integer
id embedded in the profile name). Note that the merging enabled by <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">%m</span></code> i=
s for raw
profile data generated by profiler runtime. The resulting merged =E2=80=9Cr=
aw=E2=80=9D profile data
file still needs to be converted to a different format expected by the comp=
iler (
see step 3 below).</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span><span class=3D"nv">LLVM_PROFILE_FI=
LE</span><span class=3D"o">=3D</span><span class=3D"s2">"code-%m.profraw"</=
span><span class=3D"w"> </span>./code
</pre></div>
</div>
<p>Although rare, binary signatures used by the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">%m</span></code> specifier can have
collisions. In this case, the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">%b</span></code> specifier, which expands to the binary
ID (build ID in ELF and COFF), can be added. To use it, the program should =
be
compiled with the build ID linker option (<code class=3D"docutils literal n=
otranslate"><span class=3D"pre">--build-id</span></code> for GNU ld or LLD,
<code class=3D"docutils literal notranslate"><span class=3D"pre">/build-id<=
/span></code> for lld-link on Windows). Linux, Windows and AIX are supporte=
d.</p>
<p>See <a class=3D"reference external" href=3D"https://clang.llvm.org/docs/=
SourceBasedCodeCoverage.html#running-the-instrumented-program">this</a> sec=
tion
about the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
%t</span></code>, and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">%c</span></code> modifiers.</p>
</li>
<li><p>Combine profiles from multiple runs and convert the =E2=80=9Craw=E2=
=80=9D profile format to
the input expected by clang. Use the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">merge</span></code> command of the
<code class=3D"docutils literal notranslate"><span class=3D"pre">llvm-profd=
ata</span></code> tool to do this.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </=
span>merge<span class=3D"w"> </span>-output<span class=3D"o">=3D</span>code=
.profdata<span class=3D"w"> </span>code-*.profraw
</pre></div>
</div>
<p>Note that this step is necessary even when there is only one =E2=80=9Cra=
w=E2=80=9D profile,
since the merge operation also changes the file format.</p>
</li>
<li><p>Build the code again using the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-fprofile-use</span></code> or <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">-fprofile-instr-use</span>=
</code>
option to specify the collected profile data.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-instr-use<span class=3D"o">=3D</span>=
code.profdata<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<=
span class=3D"w"> </span>code
</pre></div>
</div>
<p>You can repeat step 4 as often as you like without regenerating the
profile. As you make changes to your code, clang may no longer be able to
use the profile data. It will warn you when this happens.</p>
</li>
</ol>
<p>Note that <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">-fprofile-use</span></code> option is semantically equivalent to
its GCC counterpart, it <em>does not</em> handle profile formats produced b=
y GCC.
Both <code class=3D"docutils literal notranslate"><span class=3D"pre">-fpro=
file-use</span></code> and <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">-fprofile-instr-use</span></code> accept profiles in the
indexed format, regardeless whether it is produced by frontend or the IR pa=
ss.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-generate">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-generate</s=
pan></span><span class=3D"sig-prename descclassname"><span class=3D"pre">[=
=3D&lt;dirname&gt;]</span></span><a class=3D"headerlink" href=3D"https://cl=
ang.llvm.org/docs/UsersManual.html#cmdoption-fprofile-generate" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>The <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-fprofile-generate</span></code> and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-fprofile-generate=3D</span></code> flags will =
use
an alternative instrumentation method for profile generation. When
given a directory name, it generates the profile file
<code class=3D"docutils literal notranslate"><span class=3D"pre">default_%m=
.profraw</span></code> in the directory named <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">dirname</span></code> if specified.
If <code class=3D"docutils literal notranslate"><span class=3D"pre">dirname=
</span></code> does not exist, it will be created at runtime. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">%m</span></code> spec=
ifier
will be substituted with a unique id documented in step 2 above. In other w=
ords,
with <code class=3D"docutils literal notranslate"><span class=3D"pre">-fpro=
file-generate[=3D&lt;dirname&gt;]</span></code> option, the =E2=80=9Craw=E2=
=80=9D profile data automatic
merging is turned on by default, so there will no longer any risk of profil=
e
clobbering from different running processes.  For example,</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-generate<span class=3D"o">=3D</span>y=
yy/zzz<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span cl=
ass=3D"w"> </span>code
</pre></div>
</div>
<p>When <code class=3D"docutils literal notranslate"><span class=3D"pre">co=
de</span></code> is executed, the profile will be written to the file
<code class=3D"docutils literal notranslate"><span class=3D"pre">yyy/zzz/de=
fault_xxxx.profraw</span></code>.</p>
<p>To generate the profile data file with the compiler readable format, the
<code class=3D"docutils literal notranslate"><span class=3D"pre">llvm-profd=
ata</span></code> tool can be used with the profile directory as the input:=
</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </=
span>merge<span class=3D"w"> </span>-output<span class=3D"o">=3D</span>code=
.profdata<span class=3D"w"> </span>yyy/zzz/
</pre></div>
</div>
<p>If the user wants to turn off the auto-merging feature, or simply overri=
de the
the profile dumping path specified at command line, the environment variabl=
e
<code class=3D"docutils literal notranslate"><span class=3D"pre">LLVM_PROFI=
LE_FILE</span></code> can still be used to override
the directory and filename for the profile file at runtime.
To override the path and filename at compile time, use
<code class=3D"docutils literal notranslate"><span class=3D"pre">-Xclang</s=
pan> <span class=3D"pre">-fprofile-instrument-path=3D/path/to/file_pattern.=
profraw</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcs-profile-generate">
<span class=3D"sig-name descname"><span class=3D"pre">-fcs-profile-generate=
</span></span><span class=3D"sig-prename descclassname"><span class=3D"pre"=
>[=3D&lt;dirname&gt;]</span></span><a class=3D"headerlink" href=3D"https://=
clang.llvm.org/docs/UsersManual.html#cmdoption-fcs-profile-generate" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>The <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-fcs-profile-generate</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">-fcs-profile-generate=3D</span></code> flags=
 will use
the same instrumentation method, and generate the same profile as in the
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
generate</span></code> and <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">-fprofile-generate=3D</span></code> flags. The difference =
is
that the instrumentation is performed after inlining so that the resulted
profile has a better context sensitive information. They cannot be used
together with <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-fprofile-generate</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">-fprofile-generate=3D</span></code> flags.
They are typically used in conjunction with <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">-fprofile-use</span></code> flag.
The profile generated by <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">-fcs-profile-generate</span></code> and <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">-fprofile-generate</span></cod=
e>
can be merged by llvm-profdata. A use example:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-generate<span class=3D"o">=3D</span>y=
yy/zzz<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span cl=
ass=3D"w"> </span>code
<span class=3D"gp">$ </span>./code
<span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </span>merge<sp=
an class=3D"w"> </span>-output<span class=3D"o">=3D</span>code.profdata<spa=
n class=3D"w"> </span>yyy/zzz/
</pre></div>
</div>
<p>The first few steps are the same as that in <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">-fprofile-generate</span></code>
compilation. Then perform a second round of instrumentation.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-use<span class=3D"o">=3D</span>code.p=
rofdata<span class=3D"w"> </span>-fcs-profile-generate<span class=3D"o">=3D=
</span>sss/ttt<span class=3D"w"> </span><span class=3D"se">\</span>
<span class=3D"w">  </span>-o<span class=3D"w"> </span>cs_code
<span class=3D"gp">$ </span>./cs_code
<span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </span>merge<sp=
an class=3D"w"> </span>-output<span class=3D"o">=3D</span>cs_code.profdata<=
span class=3D"w"> </span>sss/ttt<span class=3D"w"> </span>code.profdata
</pre></div>
</div>
<p>The resulted <code class=3D"docutils literal notranslate"><span class=3D=
"pre">cs_code.prodata</span></code> combines <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">code.profdata</span></code> and the prof=
ile
generated from binary <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">cs_code</span></code>. Profile <code class=3D"docutils literal =
notranslate"><span class=3D"pre">cs_code.profata</span></code> can be used =
by
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
use</span></code> compilation.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-use<span class=3D"o">=3D</span>cs_cod=
e.profdata
</pre></div>
</div>
<p>The above command will read both profiles to the compiler at the identic=
al
point of instrumentations.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-use">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-use</span><=
/span><span class=3D"sig-prename descclassname"><span class=3D"pre">[=3D&lt=
;pathname&gt;]</span></span><a class=3D"headerlink" href=3D"https://clang.l=
lvm.org/docs/UsersManual.html#cmdoption-fprofile-use" title=3D"Link to this=
 definition">=C2=B6</a></dt>
<dd><p>Without any other arguments, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">-fprofile-use</span></code> behaves identically t=
o
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
instr-use</span></code>. Otherwise, if <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">pathname</span></code> is the full path to a
profile file, it reads from that file. If <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">pathname</span></code> is a directory name,
it reads from <code class=3D"docutils literal notranslate"><span class=3D"p=
re">pathname/default.profdata</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-update">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-update</spa=
n></span><span class=3D"sig-prename descclassname"><span class=3D"pre">[=3D=
&lt;method&gt;]</span></span><a class=3D"headerlink" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#cmdoption-fprofile-update" title=3D"Link to =
this definition">=C2=B6</a></dt>
<dd><p>Unless <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-fsanitize=3Dthread</span></code> is specified, the default is <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">single</span></cod=
e>, which
uses non-atomic increments. The counters can be inaccurate under thread
contention. <code class=3D"docutils literal notranslate"><span class=3D"pre=
">atomic</span></code> uses atomic increments which is accurate but has
overhead. <code class=3D"docutils literal notranslate"><span class=3D"pre">=
prefer-atomic</span></code> will be transformed to <code class=3D"docutils =
literal notranslate"><span class=3D"pre">atomic</span></code> when supporte=
d
by the target, or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">single</span></code> otherwise.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-continuous">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-continuous<=
/span></span><span class=3D"sig-prename descclassname"></span><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f=
profile-continuous" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enables the continuous instrumentation profiling where profile count=
er updates
are continuously synced to a file. This option sets any necessary modifiers
(currently <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>%c</span></code>) in the default profile filename and passes any necessary
flags to the middle-end to support this mode. Value profiling is not suppor=
ted
in continuous mode.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-generate<span class=3D"w"> </span>-fp=
rofile-continuous<span class=3D"w"> </span>code.cc<span class=3D"w"> </span=
>-o<span class=3D"w"> </span>code
</pre></div>
</div>
<p>Running <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>./code</span></code> will collect the profile and write it to the
<code class=3D"docutils literal notranslate"><span class=3D"pre">default_xx=
xx.profraw</span></code> file. However, if <code class=3D"docutils literal =
notranslate"><span class=3D"pre">./code</span></code> abruptly terminates o=
r
does not call <code class=3D"docutils literal notranslate"><span class=3D"p=
re">exit()</span></code>, in continuous mode the profile collected up to th=
e
point of termination will be available in <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">default_xxxx.profraw</span></code> while in
the non-continuous mode, no profile file is generated.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ftemporal-profile">
<span class=3D"sig-name descname"><span class=3D"pre">-ftemporal-profile</s=
pan></span><span class=3D"sig-prename descclassname"></span><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fte=
mporal-profile" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enables the temporal profiling extension for IRPGO to improve startu=
p time by
reducing <code class=3D"docutils literal notranslate"><span class=3D"pre">.=
text</span></code> section page faults. To do this, we instrument function
timestamps to measure when each function is called for the first time and u=
se
this data to generate a function order to improve startup.</p>
<p>The profile is generated as normal.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-generate<span class=3D"w"> </span>-ft=
emporal-profile<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-=
o<span class=3D"w"> </span>code
<span class=3D"gp">$ </span>./code
<span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </span>merge<sp=
an class=3D"w"> </span>-o<span class=3D"w"> </span>code.profdata<span class=
=3D"w"> </span>yyy/zzz
</pre></div>
</div>
<p>Using the resulting profile, we can generate a function order to pass to=
 the
linker via <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>--symbol-ordering-file</span></code> for ELF or <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">-order_file</span></code> for Mach-O=
.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </=
span>order<span class=3D"w"> </span>code.profdata<span class=3D"w"> </span>=
-o<span class=3D"w"> </span>code.orderfile
<span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-O2<span class=
=3D"w"> </span>-Wl,--symbol-ordering-file<span class=3D"o">=3D</span>code.o=
rderfile<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span =
class=3D"w"> </span>code
</pre></div>
</div>
<p>Or the profile can be passed to LLD directly.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fuse-ld<span class=3D"o">=3D</span>lld<span cl=
ass=3D"w"> </span>-Wl,--irpgo-profile<span class=3D"o">=3D</span>code.profd=
ata,--bp-startup-sort<span class=3D"o">=3D</span><span class=3D"k">function=
</span><span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span c=
lass=3D"w"> </span>code
</pre></div>
</div>
<p>For more information, please read the RFC:
<a class=3D"reference external" href=3D"https://discourse.llvm.org/t/rfc-te=
mporal-profiling-extension-for-irpgo/68068">https://discourse.llvm.org/t/rf=
c-temporal-profiling-extension-for-irpgo/68068</a></p>
</dd></dl>

</section>
<section id=3D"fine-tuning-profile-collection">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id59" role=3D"doc-backlink">Fine Tuning Profile Collection</a><a cla=
ss=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#fine=
-tuning-profile-collection" title=3D"Link to this heading">=C2=B6</a></h4>
<p>The PGO infrastructure provides user program knobs to fine tune profile
collection. Specifically, the PGO runtime provides the following functions
that can be used to control the regions in the program where profiles shoul=
d
be collected.</p>
<blockquote>
<div><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">voi=
d</span> <span class=3D"pre">__llvm_profile_set_filename(const</span> <span=
 class=3D"pre">char</span> <span class=3D"pre">*Name)</span></code>: change=
s the name of
the profile file to <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Name</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">voi=
d</span> <span class=3D"pre">__llvm_profile_reset_counters(void)</span></co=
de>: resets all counters to zero.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">int=
</span> <span class=3D"pre">__llvm_profile_dump(void)</span></code>: write =
the profile data to disk.</p></li>
</ul>
</div></blockquote>
<p>For example, the following pattern can be used to skip profiling program
initialization, profile two specific hot regions, and skip profiling progra=
m
cleanup:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">int</span><span class=3D"w"> </span><span class=
=3D"nf">main</span><span class=3D"p">()</span><span class=3D"w"> </span><sp=
an class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"n">initialize</span><span class=
=3D"p">();</span>

<span class=3D"w">  </span><span class=3D"c1">// Reset all profile counters=
 to 0 to omit profile collected during</span>
<span class=3D"w">  </span><span class=3D"c1">// initialize()'s execution.<=
/span>
<span class=3D"w">  </span><span class=3D"n">__llvm_profile_reset_counters<=
/span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w"> <=
/span><span class=3D"n">hot</span><span class=3D"w"> </span><span class=3D"=
n">region</span><span class=3D"w"> </span><span class=3D"mi">1</span>
<span class=3D"w">  </span><span class=3D"c1">// Dump the profile for hot r=
egion 1.</span>
<span class=3D"w">  </span><span class=3D"n">__llvm_profile_set_filename</s=
pan><span class=3D"p">(</span><span class=3D"s">"region1.profraw"</span><sp=
an class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">__llvm_profile_dump</span><spa=
n class=3D"p">();</span>

<span class=3D"w">  </span><span class=3D"c1">// Reset counters before proc=
eeding to hot region 2.</span>
<span class=3D"w">  </span><span class=3D"n">__llvm_profile_reset_counters<=
/span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"p">...</span><span class=3D"w"> <=
/span><span class=3D"n">hot</span><span class=3D"w"> </span><span class=3D"=
n">region</span><span class=3D"w"> </span><span class=3D"mi">2</span>
<span class=3D"w">  </span><span class=3D"c1">// Dump the profile for hot r=
egion 2.</span>
<span class=3D"w">  </span><span class=3D"n">__llvm_profile_set_filename</s=
pan><span class=3D"p">(</span><span class=3D"s">"region2.profraw"</span><sp=
an class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">__llvm_profile_dump</span><spa=
n class=3D"p">();</span>

<span class=3D"w">  </span><span class=3D"c1">// Since the profile has been=
 dumped, no further profile data</span>
<span class=3D"w">  </span><span class=3D"c1">// will be collected beyond t=
he above __llvm_profile_dump().</span>
<span class=3D"w">  </span><span class=3D"n">cleanup</span><span class=3D"p=
">();</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>These APIs=E2=80=99 names can be introduced to user programs in two ways=
.
They can be declared as weak symbols on platforms which support
treating weak symbols as <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">null</span></code> during linking. For example, the user can
have</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"n">__attribute__</span><span class=3D"p">((</span><sp=
an class=3D"n">weak</span><span class=3D"p">))</span><span class=3D"w"> </s=
pan><span class=3D"kt">int</span><span class=3D"w"> </span><span class=3D"n=
">__llvm_profile_dump</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">);</span>

<span class=3D"c1">// Then later in the same source file</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">__llvm_profile_dump</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">__llvm_profile_dump</span>=
<span class=3D"p">()</span><span class=3D"w"> </span><span class=3D"o">!=3D=
</span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"p">{</span><span class=
=3D"w"> </span><span class=3D"p">...</span><span class=3D"w"> </span><span =
class=3D"p">}</span>
<span class=3D"c1">// The first if condition tests if the symbol is actuall=
y defined.</span>
<span class=3D"c1">// Profile dumping only happens if the symbol is defined=
. Hence,</span>
<span class=3D"c1">// the user program works correctly during normal (not p=
rofile-generate)</span>
<span class=3D"c1">// executions.</span>
</pre></div>
</div>
<p>Alternatively, the user program can include the header
<code class=3D"docutils literal notranslate"><span class=3D"pre">profile/in=
str_prof_interface.h</span></code>, which contains the API names. For examp=
le,</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#include</span><span class=3D"w"> </span><span cl=
ass=3D"cpf">"profile/instr_prof_interface.h"</span>

<span class=3D"c1">// Then later in the same source file</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">__llvm_profile_dump</span><span class=3D"p">()</span>=
<span class=3D"w"> </span><span class=3D"o">!=3D</span><span class=3D"w"> <=
/span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"p">{</span><span class=3D"w"> </span><span class=
=3D"p">...</span><span class=3D"w"> </span><span class=3D"p">}</span>
</pre></div>
</div>
<p>The user code does not need to check if the API names are defined, becau=
se
these names are automatically replaced by <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">(0)</span></code> or the equivalence of noo=
p
if the <code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ng</span></code> is not compiling for profile generation.</p>
<p>Such replacement can happen because <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">clang</span></code> adds one of two macros dep=
ending
on the <code class=3D"docutils literal notranslate"><span class=3D"pre">-fp=
rofile-generate</span></code> and the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-fprofile-use</span></code> flags.</p>
<blockquote>
<div><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__L=
LVM_INSTR_PROFILE_GENERATE</span></code>: defined when one of
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile[=
-instr]-generate</span></code>/<code class=3D"docutils literal notranslate"=
><span class=3D"pre">-fcs-profile-generate</span></code> is in effect.</p><=
/li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__L=
LVM_INSTR_PROFILE_USE</span></code>: defined when one of
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fprofile-=
use</span></code>/<code class=3D"docutils literal notranslate"><span class=
=3D"pre">-fprofile-instr-use</span></code> is in effect.</p></li>
</ul>
</div></blockquote>
<p>The two macros can be used to provide more flexibility so a user program
can execute code specifically intended for profile generate or profile use.
For example, a user program can have special logging during profile generat=
e:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"cp">#if __LLVM_INSTR_PROFILE_GENERATE</span>
<span class=3D"n">expensive_logging_of_full_program_state</span><span class=
=3D"p">();</span>
<span class=3D"cp">#endif</span>
</pre></div>
</div>
<p>The logging is automatically excluded during a normal build of the progr=
am,
hence it does not impact performance during a normal execution.</p>
<p>It is advised to use such fine tuning only in a program=E2=80=99s cold r=
egions. The weak
symbols can introduce extra control flow (the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">if</span></code> checks), while the mac=
ros
(hence declarations they guard in <code class=3D"docutils literal notransla=
te"><span class=3D"pre">profile/instr_prof_interface.h</span></code>)
can change the control flow of the functions that use them between profile
generation and profile use (which can lead to discarded counters in such
functions). Using these APIs in the program=E2=80=99s cold regions introduc=
es less
overhead and leads to more optimized code.</p>
</section>
<section id=3D"disabling-instrumentation">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id60" role=3D"doc-backlink">Disabling Instrumentation</a><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#disabling=
-instrumentation" title=3D"Link to this heading">=C2=B6</a></h4>
<p>In certain situations, it may be useful to disable profile generation or=
 use
for specific files in a build, without affecting the main compilation flags
used for the other files in the project.</p>
<p>In these cases, you can use the flag <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">-fno-profile-instr-generate</span></code> (or
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-profi=
le-generate</span></code>) to disable profile generation, and
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fno-profi=
le-instr-use</span></code> (or <code class=3D"docutils literal notranslate"=
><span class=3D"pre">-fno-profile-use</span></code>) to disable profile use=
.</p>
<p>Note that these flags should appear after the corresponding profile
flags to have an effect.</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>When none of the translation units inside a binary is instrumented, in t=
he
case of Fuchsia the profile runtime will not be linked into the binary and
no profile will be produced, while on other platforms the profile runtime
will be linked and profile will be produced but there will not be any
counters.</p>
</div>
</section>
<section id=3D"instrumenting-only-selected-files-or-functions">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id61" role=3D"doc-backlink">Instrumenting only selected files or fun=
ctions</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Users=
Manual.html#instrumenting-only-selected-files-or-functions" title=3D"Link t=
o this heading">=C2=B6</a></h4>
<p>Sometimes it=E2=80=99s useful to only instrument certain files or functi=
ons.  For
example in automated testing infrastructure, it may be desirable to only
instrument files or functions that were modified by a patch to reduce the
overhead of instrumenting a full system.</p>
<p>This can be done using the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-fprofile-list</span></code> option.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-list">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-list</span>=
</span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D&lt=
;pathname&gt;</span></span><a class=3D"headerlink" href=3D"https://clang.ll=
vm.org/docs/UsersManual.html#cmdoption-fprofile-list" title=3D"Link to this=
 definition">=C2=B6</a></dt>
<dd><p>This option can be used to apply profile instrumentation only to sel=
ected
files or functions. <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">pathname</span></code> should point to a file in the
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/Sanitiz=
erSpecialCaseList.html"><span class=3D"doc">Sanitizer special case list</sp=
an></a> format which selects which files and
functions to instrument.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-instr-generate<span class=3D"w"> </sp=
an>-fprofile-list<span class=3D"o">=3D</span>fun.list<span class=3D"w"> </s=
pan>code.cc<span class=3D"w"> </span>-o<span class=3D"w"> </span>code
</pre></div>
</div>
<p>The option can be specified multiple times to pass multiple files.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
O2<span class=3D"w"> </span>-fprofile-instr-generate<span class=3D"w"> </sp=
an>-fcoverage-mapping<span class=3D"w"> </span>-fprofile-list<span class=3D=
"o">=3D</span>fun.list<span class=3D"w"> </span>-fprofile-list<span class=
=3D"o">=3D</span>code.list<span class=3D"w"> </span>code.cc<span class=3D"w=
"> </span>-o<span class=3D"w"> </span>code
</pre></div>
</div>
</dd></dl>

<p>Supported sections are <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">[clang]</span></code>, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">[llvm]</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">[csllvm]</span></code>, and <code =
class=3D"docutils literal notranslate"><span class=3D"pre">[sample-coldcov]=
</span></code> representing
clang PGO, IRPGO, CSIRPGO and sample PGO based cold function coverage, resp=
ectively. Supported prefixes
are <code class=3D"docutils literal notranslate"><span class=3D"pre">functi=
on</span></code> and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">source</span></code>. Supported categories are <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">allow</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">skip</span></cod=
e>, and <code class=3D"docutils literal notranslate"><span class=3D"pre">fo=
rbid</span></code>.
<code class=3D"docutils literal notranslate"><span class=3D"pre">skip</span=
></code> adds the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">skipprofile</span></code> attribute while <code class=3D"docutils =
literal notranslate"><span class=3D"pre">forbid</span></code> adds the
<code class=3D"docutils literal notranslate"><span class=3D"pre">noprofile<=
/span></code> attribute to the appropriate function. Use
<code class=3D"docutils literal notranslate"><span class=3D"pre">default:&l=
t;allow|skip|forbid&gt;</span></code> to specify the default category.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>cat<span class=3D"w"> </span>=
fun.list
<span class=3D"gp"># </span>The<span class=3D"w"> </span>following<span cla=
ss=3D"w"> </span>cases<span class=3D"w"> </span>are<span class=3D"w"> </spa=
n><span class=3D"k">for</span><span class=3D"w"> </span>clang<span class=3D=
"w"> </span>instrumentation.
<span class=3D"go">[clang]</span>

<span class=3D"gp"># </span>We<span class=3D"w"> </span>might<span class=3D=
"w"> </span>not<span class=3D"w"> </span>want<span class=3D"w"> </span>to<s=
pan class=3D"w"> </span>profile<span class=3D"w"> </span>functions<span cla=
ss=3D"w"> </span>that<span class=3D"w"> </span>are<span class=3D"w"> </span=
>inlined<span class=3D"w"> </span><span class=3D"k">in</span><span class=3D=
"w"> </span>many<span class=3D"w"> </span>places.
<span class=3D"go">function:inlinedLots=3Dskip</span>

<span class=3D"gp"># </span>We<span class=3D"w"> </span>want<span class=3D"=
w"> </span>to<span class=3D"w"> </span>forbid<span class=3D"w"> </span>prof=
iling<span class=3D"w"> </span>where<span class=3D"w"> </span>it<span class=
=3D"w"> </span>might<span class=3D"w"> </span>be<span class=3D"w"> </span>d=
angerous.
<span class=3D"go">source:lib/unsafe/*.cc=3Dforbid</span>

<span class=3D"gp"># </span>Otherwise<span class=3D"w"> </span>we<span clas=
s=3D"w"> </span>allow<span class=3D"w"> </span>profiling.
<span class=3D"go">default:allow</span>
</pre></div>
</div>
</div></blockquote>
<section id=3D"older-prefixes">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id62" role=3D"doc-backlink">Older Prefixes</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/UsersManual.html#older-prefixes" titl=
e=3D"Link to this heading">=C2=B6</a></h5>
<blockquote>
<div><p>An older format is also supported, but it is only able to add the
<code class=3D"docutils literal notranslate"><span class=3D"pre">noprofile<=
/span></code> attribute.
To filter individual functions or entire source files use <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">fun:&lt;name&gt;</span></co=
de> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">src:&lt;fi=
le&gt;</span></code> respectively. To exclude a function or a source file, =
use
<code class=3D"docutils literal notranslate"><span class=3D"pre">!fun:&lt;n=
ame&gt;</span></code> or <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">!src:&lt;file&gt;</span></code> respectively. The format als=
o supports
wildcard expansion. The compiler generated functions are assumed to be loca=
ted
in the main source file.  It is also possible to restrict the filter to a
particular instrumentation type by using a named section.</p>
<div class=3D"highlight-none notranslate"><div class=3D"highlight"><pre><sp=
an></span># all functions whose name starts with foo will be instrumented.
fun:foo*

# except for foo1 which will be excluded from instrumentation.
!fun:foo1

# every function in path/to/foo.cc will be instrumented.
src:path/to/foo.cc

# bar will be instrumented only when using backend instrumentation.
# Recognized section names are clang, llvm and csllvm.
[llvm]
fun:bar
</pre></div>
</div>
<p>When the file contains only excludes, all files and functions except for=
 the
excluded ones will be instrumented. Otherwise, only the files and functions
specified will be instrumented.</p>
</div></blockquote>
</section>
</section>
<section id=3D"instrument-function-groups">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id63" role=3D"doc-backlink">Instrument function groups</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#instru=
ment-function-groups" title=3D"Link to this heading">=C2=B6</a></h4>
<p>Sometimes it is desirable to minimize the size overhead of instrumented
binaries. One way to do this is to partition functions into groups and only
instrument functions in a specified group. This can be done using the
<cite>-fprofile-function-groups</cite> and <cite>-fprofile-selected-functio=
n-group</cite> options.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-function-groups">
<span id=3D"cmdoption-fprofile-selected-function-group"></span><span class=
=3D"sig-name descname"><span class=3D"pre">-fprofile-function-groups</span>=
</span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D&lt=
;N&gt;</span></span><span class=3D"sig-prename descclassname"><span class=
=3D"pre">,</span> </span><span class=3D"sig-name descname"><span class=3D"p=
re">-fprofile-selected-function-group</span></span><span class=3D"sig-prena=
me descclassname"><span class=3D"pre">=3D&lt;i&gt;</span></span><a class=3D=
"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption=
-fprofile-function-groups" title=3D"Link to this definition">=C2=B6</a></dt=
>
<dd><p>The following uses 3 groups</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-=
Oz<span class=3D"w"> </span>-fprofile-generate<span class=3D"o">=3D</span>g=
roup_0/<span class=3D"w"> </span>-fprofile-function-groups<span class=3D"o"=
>=3D</span><span class=3D"m">3</span><span class=3D"w"> </span>-fprofile-se=
lected-function-group<span class=3D"o">=3D</span><span class=3D"m">0</span>=
<span class=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span class=3D=
"w"> </span>code.0
<span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-Oz<span class=
=3D"w"> </span>-fprofile-generate<span class=3D"o">=3D</span>group_1/<span =
class=3D"w"> </span>-fprofile-function-groups<span class=3D"o">=3D</span><s=
pan class=3D"m">3</span><span class=3D"w"> </span>-fprofile-selected-functi=
on-group<span class=3D"o">=3D</span><span class=3D"m">1</span><span class=
=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span class=3D"w"> </span=
>code.1
<span class=3D"gp">$ </span>clang++<span class=3D"w"> </span>-Oz<span class=
=3D"w"> </span>-fprofile-generate<span class=3D"o">=3D</span>group_2/<span =
class=3D"w"> </span>-fprofile-function-groups<span class=3D"o">=3D</span><s=
pan class=3D"m">3</span><span class=3D"w"> </span>-fprofile-selected-functi=
on-group<span class=3D"o">=3D</span><span class=3D"m">2</span><span class=
=3D"w"> </span>code.cc<span class=3D"w"> </span>-o<span class=3D"w"> </span=
>code.2
</pre></div>
</div>
<p>After collecting raw profiles from the three binaries, they can be merge=
d into
a single profile like normal.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>llvm-profdata<span class=3D"w"> </=
span>merge<span class=3D"w"> </span>-output<span class=3D"o">=3D</span>code=
.profdata<span class=3D"w"> </span>group_*/*.profraw
</pre></div>
</div>
</dd></dl>

</section>
<section id=3D"profile-remapping">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id64" role=3D"doc-backlink">Profile remapping</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/UsersManual.html#profile-remapping=
" title=3D"Link to this heading">=C2=B6</a></h4>
<p>When the program is compiled after a change that affects many symbol nam=
es,
pre-existing profile data may no longer match the program. For example:</p>
<blockquote>
<div><ul class=3D"simple">
<li><p>switching from libstdc++ to libc++ will result in the mangled names =
of all
functions taking standard library types to change</p></li>
<li><p>renaming a widely-used type in C++ will result in the mangled names =
of all
functions that have parameters involving that type to change</p></li>
<li><p>moving from a 32-bit compilation to a 64-bit compilation may change =
the
underlying type of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">size_t</span></code> and similar types, resulting in changes to
manglings</p></li>
</ul>
</div></blockquote>
<p>Clang allows use of a profile remapping file to specify that such differ=
ences
in mangled names should be ignored when matching the profile data against t=
he
program.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-remapping-file">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-remapping-f=
ile</span></span><span class=3D"sig-prename descclassname"><span class=3D"p=
re">=3D&lt;file&gt;</span></span><a class=3D"headerlink" href=3D"https://cl=
ang.llvm.org/docs/UsersManual.html#cmdoption-fprofile-remapping-file" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Specifies a file containing profile remapping information, that will=
 be
used to match mangled names in the profile data to mangled names in the
program.</p>
</dd></dl>

<p>The profile remapping file is a text file containing lines of the form</=
p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span>fragmentkind fragment1 fragment2
</pre></div>
</div>
<p>where <code class=3D"docutils literal notranslate"><span class=3D"pre">f=
ragmentkind</span></code> is one of <code class=3D"docutils literal notrans=
late"><span class=3D"pre">name</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">type</span></code>, or <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">encoding</span></code>,
indicating whether the following mangled name fragments are
&lt;<a class=3D"reference external" href=3D"https://itanium-cxx-abi.github.=
io/cxx-abi/abi.html#mangle.name">name</a>&gt;s,
&lt;<a class=3D"reference external" href=3D"https://itanium-cxx-abi.github.=
io/cxx-abi/abi.html#mangle.type">type</a>&gt;s, or
&lt;<a class=3D"reference external" href=3D"https://itanium-cxx-abi.github.=
io/cxx-abi/abi.html#mangle.encoding">encoding</a>&gt;s,
respectively.
Blank lines and lines starting with <code class=3D"docutils literal notrans=
late"><span class=3D"pre">#</span></code> are ignored.</p>
<p>For convenience, built-in &lt;substitution&gt;s such as <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">St</span></code> and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">Ss</span></code=
>
are accepted as &lt;name&gt;s (even though they technically are not &lt;nam=
e&gt;s).</p>
<p>For example, to specify that <code class=3D"docutils literal notranslate=
"><span class=3D"pre">absl::string_view</span></code> and <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">std::string_view</span></co=
de>
should be treated as equivalent when matching profile data, the following
remapping file could be used:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre><sp=
an></span># absl::string_view is considered equivalent to std::string_view
type N4absl11string_viewE St17basic_string_viewIcSt11char_traitsIcEE

# std:: might be std::__1:: in libc++ or std::__cxx11:: in libstdc++
name 3std St3__1
name 3std St7__cxx11
</pre></div>
</div>
<p>Matching profile data using a profile remapping file is supported on a
best-effort basis. For example, information regarding indirect call targets=
 is
currently not remapped. For best results, you are encouraged to generate ne=
w
profile data matching the updated program, or to remap the profile data
using the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
llvm-cxxmap</span></code> and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">llvm-profdata</span> <span class=3D"pre">merge</span></=
code> tools.</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>Profile data remapping is currently only supported for C++ mangled names
following the Itanium C++ ABI mangling scheme. This covers all C++ targets
supported by Clang other than Windows.</p>
</div>
</section>
</section>
<section id=3D"gcov-based-profiling">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id65" role=3D"doc-backlink">GCOV-based Profiling</a><a class=3D"head=
erlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#gcov-based-pro=
filing" title=3D"Link to this heading">=C2=B6</a></h3>
<p>GCOV is a test coverage program, it helps to know how often a line of co=
de
is executed. When instrumenting the code with <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">--coverage</span></code> option, some
counters are added for each edge linking basic blocks.</p>
<p>At compile time, gcno files are generated containing information about
blocks and edges between them. At runtime the counters are incremented and =
at
exit the counters are dumped in gcda files.</p>
<p>The tool <code class=3D"docutils literal notranslate"><span class=3D"pre=
">llvm-cov</span> <span class=3D"pre">gcov</span></code> will parse gcno, g=
cda and source files to generate
a report <code class=3D"docutils literal notranslate"><span class=3D"pre">.=
c.gcov</span></code>.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-filter-files">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-filter-file=
s</span></span><span class=3D"sig-prename descclassname"><span class=3D"pre=
">=3D[regexes]</span></span><a class=3D"headerlink" href=3D"https://clang.l=
lvm.org/docs/UsersManual.html#cmdoption-fprofile-filter-files" title=3D"Lin=
k to this definition">=C2=B6</a></dt>
<dd><p>Define a list of regexes separated by a semi-colon.
If a file name matches any of the regexes then the file is instrumented.</p=
>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--coverage<span class=3D"w"> </span>-fprofile-filter-files<span class=3D"=
o">=3D</span><span class=3D"s2">".*\.c</span>$<span class=3D"s2">"</span><s=
pan class=3D"w"> </span>foo.c
</pre></div>
</div>
</div></blockquote>
<p>For example, this will only instrument files finishing with <code class=
=3D"docutils literal notranslate"><span class=3D"pre">.c</span></code>, ski=
pping <code class=3D"docutils literal notranslate"><span class=3D"pre">.h</=
span></code> files.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fprofile-exclude-files">
<span class=3D"sig-name descname"><span class=3D"pre">-fprofile-exclude-fil=
es</span></span><span class=3D"sig-prename descclassname"><span class=3D"pr=
e">=3D[regexes]</span></span><a class=3D"headerlink" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#cmdoption-fprofile-exclude-files" title=3D"L=
ink to this definition">=C2=B6</a></dt>
<dd><p>Define a list of regexes separated by a semi-colon.
If a file name doesn=E2=80=99t match all the regexes then the file is instr=
umented.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--c=
overage<span class=3D"w"> </span>-fprofile-exclude-files<span class=3D"o">=
=3D</span><span class=3D"s2">"^/usr/include/.*</span>$<span class=3D"s2">"<=
/span><span class=3D"w"> </span>foo.c
</pre></div>
</div>
<p>For example, this will instrument all the files except the ones in <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">/usr/include</s=
pan></code>.</p>
</dd></dl>

<p>If both options are used then a file is instrumented if its name matches=
 any
of the regexes from <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">-fprofile-filter-list</span></code> and doesn=E2=80=99t match all=
 the regexes
from <code class=3D"docutils literal notranslate"><span class=3D"pre">-fpro=
file-exclude-list</span></code>.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--c=
overage<span class=3D"w"> </span>-fprofile-exclude-files<span class=3D"o">=
=3D</span><span class=3D"s2">"^/usr/include/.*</span>$<span class=3D"s2">"<=
/span><span class=3D"w"> </span><span class=3D"se">\</span>
<span class=3D"w">        </span>-fprofile-filter-files<span class=3D"o">=
=3D</span><span class=3D"s2">"^/usr/.*</span>$<span class=3D"s2">"</span>
</pre></div>
</div>
<p>In that case <code class=3D"docutils literal notranslate"><span class=3D=
"pre">/usr/foo/oof.h</span></code> is instrumented since it matches the fil=
ter regex and
doesn=E2=80=99t match the exclude regex, but <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">/usr/include/foo.h</span></code> doesn=
=E2=80=99t since it matches
the exclude regex.</p>
</section>
<section id=3D"controlling-debug-information">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id66" role=3D"doc-backlink">Controlling Debug Information</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#contr=
olling-debug-information" title=3D"Link to this heading">=C2=B6</a></h3>
<section id=3D"controlling-size-of-debug-information">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id67" role=3D"doc-backlink">Controlling Size of Debug Information</a=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.ht=
ml#controlling-size-of-debug-information" title=3D"Link to this heading">=
=C2=B6</a></h4>
<p>Debug info kind generated by Clang can be set by one of the flags listed
below. If multiple flags are present, the last one is used.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-g0">
<span class=3D"sig-name descname"><span class=3D"pre">-g0</span></span><spa=
n class=3D"sig-prename descclassname"></span><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-g0" title=3D"Lin=
k to this definition">=C2=B6</a></dt>
<dd><p>Don=E2=80=99t generate any debug info (default).</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-gline-tables-only">
<span class=3D"sig-name descname"><span class=3D"pre">-gline-tables-only</s=
pan></span><span class=3D"sig-prename descclassname"></span><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-gli=
ne-tables-only" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generate line number tables only.</p>
<p>This kind of debug info allows to obtain stack traces with function name=
s,
file names and line numbers (by such tools as <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">gdb</span></code> or <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">addr2line</span></code>).  I=
t
doesn=E2=80=99t contain any other data (e.g. description of local variables=
 or
function parameters).</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fstandalone-debug">
<span class=3D"sig-name descname"><span class=3D"pre">-fstandalone-debug</s=
pan></span><span class=3D"sig-prename descclassname"></span><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fst=
andalone-debug" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Clang supports a number of optimizations to reduce the size of debug
information in the binary. They work based on the assumption that
the debug type information can be spread out over multiple
compilation units.  Specifically, the optimizations are:</p>
<ul class=3D"simple">
<li><p>will not emit type definitions for types that are not needed by a
module and could be replaced with a forward declaration.</p></li>
<li><p>will only emit type info for a dynamic C++ class in the module that
contains the vtable for the class.</p></li>
<li><p>will only emit type info for a C++ class (non-trivial, non-aggregate=
)
in the modules that contain a definition for one of its constructors.</p></=
li>
<li><p>will only emit type definitions for types that are the subject of ex=
plicit
template instantiation declarations in the presence of an explicit
instantiation definition for the type.</p></li>
</ul>
<p>The <strong>-fstandalone-debug</strong> option turns off these optimizat=
ions.
This is useful when working with 3rd-party libraries that don=E2=80=99t com=
e
with debug information.  Note that Clang will never emit type
information for types that are not referenced at all by the program.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-standalone-debug">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-standalone-debug=
</span></span><span class=3D"sig-prename descclassname"></span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-=
fno-standalone-debug" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>On Darwin <strong>-fstandalone-debug</strong> is enabled by default.=
 The
<strong>-fno-standalone-debug</strong> option can be used to get to turn on=
 the
vtable-based optimization described above.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-g">
<span class=3D"sig-name descname"><span class=3D"pre">-g</span></span><span=
 class=3D"sig-prename descclassname"></span><a class=3D"headerlink" href=3D=
"https://clang.llvm.org/docs/UsersManual.html#cmdoption-g" title=3D"Link to=
 this definition">=C2=B6</a></dt>
<dd><p>Generate complete debug info.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-feliminate-unused-debug-ty=
pes">
<span class=3D"sig-name descname"><span class=3D"pre">-feliminate-unused-de=
bug-types</span></span><span class=3D"sig-prename descclassname"></span><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#c=
mdoption-feliminate-unused-debug-types" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>By default, Clang does not emit type information for types that are =
defined
but not used in a program. To retain the debug info for these unused types,
the negation <strong>-fno-eliminate-unused-debug-types</strong> can be used=
.
This can be particularly useful on Windows, when using NATVIS files that
can reference const symbols that would otherwise be stripped, even in full
debug or standalone debug modes.</p>
</dd></dl>

</section>
<section id=3D"controlling-macro-debug-info-generation">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id68" role=3D"doc-backlink">Controlling Macro Debug Info Generation<=
/a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.=
html#controlling-macro-debug-info-generation" title=3D"Link to this heading=
">=C2=B6</a></h4>
<p>Debug info for C preprocessor macros increases the size of debug informa=
tion in
the binary. Macro debug info generated by Clang can be controlled by the fl=
ags
listed below.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdebug-macro">
<span class=3D"sig-name descname"><span class=3D"pre">-fdebug-macro</span><=
/span><span class=3D"sig-prename descclassname"></span><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fdebug-m=
acro" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generate debug info for preprocessor macros. This flag is discarded =
when
<strong>-g0</strong> is enabled.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-debug-macro">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-debug-macro</spa=
n></span><span class=3D"sig-prename descclassname"></span><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fno-d=
ebug-macro" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Do not generate debug info for preprocessor macros (default).</p>
</dd></dl>

</section>
<section id=3D"controlling-debugger-tuning">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id69" role=3D"doc-backlink">Controlling Debugger =E2=80=9CTuning=E2=
=80=9D</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Users=
Manual.html#controlling-debugger-tuning" title=3D"Link to this heading">=C2=
=B6</a></h4>
<p>While Clang generally emits standard DWARF debug info (<a class=3D"refer=
ence external" href=3D"http://dwarfstd.org/">http://dwarfstd.org</a>),
different debuggers may know how to take advantage of different specific DW=
ARF
features. You can =E2=80=9Ctune=E2=80=9D the debug info for one of several =
different debuggers.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ggdb">
<span id=3D"cmdoption-glldb"></span><span id=3D"cmdoption-gsce"></span><spa=
n id=3D"cmdoption-gdbx"></span><span class=3D"sig-name descname"><span clas=
s=3D"pre">-ggdb</span></span><span class=3D"sig-prename descclassname"></sp=
an><span class=3D"sig-prename descclassname"><span class=3D"pre">,</span> <=
/span><span class=3D"sig-name descname"><span class=3D"pre">-glldb</span></=
span><span class=3D"sig-prename descclassname"></span><span class=3D"sig-pr=
ename descclassname"><span class=3D"pre">,</span> </span><span class=3D"sig=
-name descname"><span class=3D"pre">-gsce</span></span><span class=3D"sig-p=
rename descclassname"></span><span class=3D"sig-prename descclassname"><spa=
n class=3D"pre">,</span> </span><span class=3D"sig-name descname"><span cla=
ss=3D"pre">-gdbx</span></span><span class=3D"sig-prename descclassname"></s=
pan><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual=
.html#cmdoption-ggdb" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Tune the debug info for the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">gdb</span></code>, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">lldb</span></code>, Sony PlayStation=C2=
=AE
debugger, or <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">dbx</span></code>, respectively. Each of these options implies <strong>-=
g</strong>.
(Therefore, if you want both <strong>-gline-tables-only</strong> and debugg=
er tuning, the
tuning option must come first.)</p>
</dd></dl>

</section>
</section>
<section id=3D"controlling-llvm-ir-output">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id70" role=3D"doc-backlink">Controlling LLVM IR Output</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#contro=
lling-llvm-ir-output" title=3D"Link to this heading">=C2=B6</a></h3>
<section id=3D"controlling-value-names-in-llvm-ir">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id71" role=3D"doc-backlink">Controlling Value Names in LLVM IR</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
controlling-value-names-in-llvm-ir" title=3D"Link to this heading">=C2=B6</=
a></h4>
<p>Emitting value names in LLVM IR increases the size and verbosity of the =
IR.
By default, value names are only emitted in assertion-enabled builds of Cla=
ng.
However, when reading IR it can be useful to re-enable the emission of valu=
e
names to improve readability.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fdiscard-value-names">
<span class=3D"sig-name descname"><span class=3D"pre">-fdiscard-value-names=
</span></span><span class=3D"sig-prename descclassname"></span><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-=
fdiscard-value-names" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Discard value names when generating LLVM IR.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fno-discard-value-names">
<span class=3D"sig-name descname"><span class=3D"pre">-fno-discard-value-na=
mes</span></span><span class=3D"sig-prename descclassname"></span><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdopt=
ion-fno-discard-value-names" title=3D"Link to this definition">=C2=B6</a></=
dt>
<dd><p>Do not discard value names when generating LLVM IR. This option can =
be used
to re-enable names for release builds of Clang.</p>
</dd></dl>

</section>
</section>
<section id=3D"comment-parsing-options">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id72" role=3D"doc-backlink">Comment Parsing Options</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#comment-par=
sing-options" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Clang parses Doxygen and non-Doxygen style documentation comments and at=
taches
them to the appropriate declaration nodes.  By default, it only parses
Doxygen-style comments and ignores ordinary comments starting with <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">//</span></code> a=
nd
<code class=3D"docutils literal notranslate"><span class=3D"pre">/*</span><=
/code>.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wdocumentation">
<span class=3D"sig-name descname"><span class=3D"pre">-Wdocumentation</span=
></span><span class=3D"sig-prename descclassname"></span><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-Wdocum=
entation" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Emit warnings about use of documentation comments.  This warning gro=
up is off
by default.</p>
<p>This includes checking that <code class=3D"docutils literal notranslate"=
><span class=3D"pre">\param</span></code> commands name parameters that act=
ually
present in the function signature, checking that <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">\returns</span></code> is used only =
on
functions that actually return a value etc.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-Wno-documentation-unknown-=
command">
<span class=3D"sig-name descname"><span class=3D"pre">-Wno-documentation-un=
known-command</span></span><span class=3D"sig-prename descclassname"></span=
><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.ht=
ml#cmdoption-Wno-documentation-unknown-command" title=3D"Link to this defin=
ition">=C2=B6</a></dt>
<dd><p>Don=E2=80=99t warn when encountering an unknown Doxygen command.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fparse-all-comments">
<span class=3D"sig-name descname"><span class=3D"pre">-fparse-all-comments<=
/span></span><span class=3D"sig-prename descclassname"></span><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-f=
parse-all-comments" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Parse all comments as documentation comments (including ordinary com=
ments
starting with <code class=3D"docutils literal notranslate"><span class=3D"p=
re">//</span></code> and <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">/*</span></code>).</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fcomment-block-commands">
<span class=3D"sig-name descname"><span class=3D"pre">-fcomment-block-comma=
nds</span></span><span class=3D"sig-prename descclassname"><span class=3D"p=
re">=3D[commands]</span></span><a class=3D"headerlink" href=3D"https://clan=
g.llvm.org/docs/UsersManual.html#cmdoption-fcomment-block-commands" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Define custom documentation commands as block commands.  This allows=
 Clang to
construct the correct AST for these custom commands, and silences warnings
about unknown commands.  Several commands must be separated by a comma
<em>without trailing space</em>; e.g. <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-fcomment-block-commands=3Dfoo,bar</span></code=
> defines
custom commands <code class=3D"docutils literal notranslate"><span class=3D=
"pre">\foo</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">\bar</span></code>.</p>
<p>It is also possible to use <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-fcomment-block-commands</span></code> several times; e=
.g.
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fcomment-=
block-commands=3Dfoo</span> <span class=3D"pre">-fcomment-block-commands=3D=
bar</span></code> does the same
as above.</p>
</dd></dl>

</section>
<section id=3D"ccc-override-options">
<span id=3D"id7"></span><h3><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id73" role=3D"doc-backlink">CCC_OVERRIDE_OPT=
IONS</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#ccc-override-options" title=3D"Link to this heading">=C2=B6</a></=
h3>
<p>The environment variable <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">CCC_OVERRIDE_OPTIONS</span></code> can be used to edit cl=
ang=E2=80=99s
command line arguments. The value of this variable is a space-separated lis=
t of
edits to perform. The edits are applied in the order in which they appear i=
n
<code class=3D"docutils literal notranslate"><span class=3D"pre">CCC_OVERRI=
DE_OPTIONS</span></code>. Each edit should be one of the following forms:</=
p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">#</=
span></code>: Silence information about the changes to the command line arg=
uments.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">^FO=
O</span></code>: Add <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">FOO</span></code> as a new argument at the beginning of the comm=
and line
right after the name of the compiler executable.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">+FO=
O</span></code>: Add <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">FOO</span></code> as a new argument at the end of the command li=
ne.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">s/X=
XX/YYY/</span></code>: Substitute the regular expression <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">XXX</span></code> with <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">YYY</span></cod=
e> in the
command line.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">xOP=
TION</span></code>: Removes all instances of the literal argument <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">OPTION</span></code=
>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">XOP=
TION</span></code>: Removes all instances of the literal argument <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">OPTION</span></code=
>, and the
following argument.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Ox<=
/span></code>: Removes all flags matching <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">O</span></code> or <code class=3D"docutils =
literal notranslate"><span class=3D"pre">O[sz0-9]</span></code> and adds <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Ox</span></c=
ode> at
the end of the command line.</p></li>
</ul>
<p>This environment variable does not affect the options added by the confi=
g files.</p>
</section>
</section>
<section id=3D"c-language-features">
<span id=3D"c"></span><h2><a class=3D"toc-backref" href=3D"https://clang.ll=
vm.org/docs/UsersManual.html#id74" role=3D"doc-backlink">C Language Feature=
s</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#c-language-features" title=3D"Link to this heading">=C2=B6</a></h2>
<p>The support for standard C in clang is feature-complete except for the
C99 floating-point pragmas.</p>
<section id=3D"extensions-supported-by-clang">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id75" role=3D"doc-backlink">Extensions supported by clang</a><a clas=
s=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#exten=
sions-supported-by-clang" title=3D"Link to this heading">=C2=B6</a></h3>
<p>See <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/=
LanguageExtensions.html"><span class=3D"doc">Clang Language Extensions</spa=
n></a>.</p>
</section>
<section id=3D"differences-between-various-standard-modes">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id76" role=3D"doc-backlink">Differences between various standard mod=
es</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#differences-between-various-standard-modes" title=3D"Link to this h=
eading">=C2=B6</a></h3>
<p>clang supports the -std option, which changes what language mode clang u=
ses.
The supported modes for C are c89, gnu89, c94, c99, gnu99, c11, gnu11, c17,
gnu17, c23, gnu23, c2y, gnu2y, and various aliases for those modes. If no -=
std
option is specified, clang defaults to gnu17 mode. Many C99 and C11 feature=
s
are supported in earlier modes as a conforming extension, with a warning. U=
se
<code class=3D"docutils literal notranslate"><span class=3D"pre">-pedantic-=
errors</span></code> to request an error if a feature from a later standard
revision is used in an earlier mode.</p>
<p>Differences between all <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">c*</span></code> and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">gnu*</span></code> modes:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">c*<=
/span></code> modes define =E2=80=9C<code class=3D"docutils literal notrans=
late"><span class=3D"pre">__STRICT_ANSI__</span></code>=E2=80=9D.</p></li>
<li><p>Target-specific defines not prefixed by underscores, like <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">linux</span></code>,
are defined in <code class=3D"docutils literal notranslate"><span class=3D"=
pre">gnu*</span></code> modes.</p></li>
<li><p>Trigraphs default to being off in <code class=3D"docutils literal no=
translate"><span class=3D"pre">gnu*</span></code> modes; they can be enable=
d
by the <code class=3D"docutils literal notranslate"><span class=3D"pre">-tr=
igraphs</span></code> option.</p></li>
<li><p>The parser recognizes <code class=3D"docutils literal notranslate"><=
span class=3D"pre">asm</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">typeof</span></code> as keywords in <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">gnu*</span></code>=
 modes;
the variants <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">__asm__</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">__typeof__</span></code> are recognized in all modes.</p=
></li>
<li><p>The parser recognizes <code class=3D"docutils literal notranslate"><=
span class=3D"pre">inline</span></code> as a keyword in <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">gnu*</span></code> mode, in
addition to recognizing it in the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">*99</span></code> and later modes for which it is
part of the ISO C standard. The variant <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">__inline__</span></code> is recognized in all
modes.</p></li>
<li><p>The Apple =E2=80=9Cblocks=E2=80=9D extension is recognized by defaul=
t in <code class=3D"docutils literal notranslate"><span class=3D"pre">gnu*<=
/span></code> modes
on some platforms; it can be enabled in any mode with the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">-fblocks</span></code>
option.</p></li>
</ul>
<p>Differences between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*89</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*94</span></code> modes:</p>
<ul class=3D"simple">
<li><p>Digraphs are not recognized in c89 mode.</p></li>
</ul>
<p>Differences between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*94</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*99</span></code> modes:</p>
<ul class=3D"simple">
<li><p>The <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>*99</span></code> modes default to implementing <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">inline</span></code> / <code class=
=3D"docutils literal notranslate"><span class=3D"pre">__inline__</span></co=
de>
as specified in C99, while the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">*89</span></code> modes implement the GNU version.
This can be overridden for individual functions with the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">__gnu_inline__</span></code>
attribute.</p></li>
<li><p>The scope of names defined inside a <code class=3D"docutils literal =
notranslate"><span class=3D"pre">for</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">if</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">switch</span></code>, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">while</span><=
/code>,
or <code class=3D"docutils literal notranslate"><span class=3D"pre">do</spa=
n></code> statement is different. (example: <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">if</span> <span class=3D"pre">((struct</s=
pan> <span class=3D"pre">x</span> <span class=3D"pre">{int</span> <span cla=
ss=3D"pre">x;}*)0)</span> <span class=3D"pre">{}</span></code>.)</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__S=
TDC_VERSION__</span></code> is not defined in <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">*89</span></code> modes.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">inl=
ine</span></code> is not recognized as a keyword in <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">c89</span></code> mode.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">res=
trict</span></code> is not recognized as a keyword in <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">*89</span></code> modes.</p></l=
i>
<li><p>Commas are allowed in integer constant expressions in <code class=3D=
"docutils literal notranslate"><span class=3D"pre">*99</span></code> modes.=
</p></li>
<li><p>Arrays which are not lvalues are not implicitly promoted to pointers
in <code class=3D"docutils literal notranslate"><span class=3D"pre">*89</sp=
an></code> modes.</p></li>
<li><p>Some warnings are different.</p></li>
</ul>
<p>Differences between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*99</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*11</span></code> modes:</p>
<ul class=3D"simple">
<li><p>Warnings for use of C11 features are disabled.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__S=
TDC_VERSION__</span></code> is defined to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">201112L</span></code> rather than <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">199901L</span></cod=
e>.</p></li>
</ul>
<p>Differences between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*11</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*17</span></code> modes:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__S=
TDC_VERSION__</span></code> is defined to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">201710L</span></code> rather than <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">201112L</span></cod=
e>.</p></li>
</ul>
<p>Differences between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*17</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*23</span></code> modes:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__S=
TDC_VERSION__</span></code> is defined to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">202311L</span></code> rather than <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">201710L</span></cod=
e>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nul=
lptr</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">nullptr_t</span></code> are supported, only in <code class=3D"=
docutils literal notranslate"><span class=3D"pre">*23</span></code> mode.</=
p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ATO=
MIC_VAR_INIT</span></code> is removed from <code class=3D"docutils literal =
notranslate"><span class=3D"pre">*23</span></code> mode.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">boo=
l</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">true</span></code>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">false</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">alignas</span></code>, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">alignof</span></code>, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">static_assert</span=
></code>,
and <code class=3D"docutils literal notranslate"><span class=3D"pre">thread=
_local</span></code> are now first-class keywords, only in <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">*23</span></code> mode.</p=
></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">typ=
eof</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">typeof_unqual</span></code> are supported, only <code class=3D"=
docutils literal notranslate"><span class=3D"pre">*23</span></code> mode.</=
p></li>
<li><p>Bit-precise integers (<code class=3D"docutils literal notranslate"><=
span class=3D"pre">_BitInt(N)</span></code>) are supported by default in <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">*23</span></=
code>
mode, and as an extension in <code class=3D"docutils literal notranslate"><=
span class=3D"pre">*17</span></code> and earlier modes.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">[[]=
]</span></code> attributes are supported by default in <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">*23</span></code> mode, and as=
 an
extension in <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">*17</span></code> and earlier modes.</p></li>
</ul>
<p>Differences between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*23</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*2y</span></code> modes:</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">__S=
TDC_VERSION__</span></code> is defined to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">202400L</span></code> rather than <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">202311L</span></cod=
e>.</p></li>
</ul>
</section>
<section id=3D"gcc-extensions-not-implemented-yet">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id77" role=3D"doc-backlink">GCC extensions not implemented yet</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
gcc-extensions-not-implemented-yet" title=3D"Link to this heading">=C2=B6</=
a></h3>
<p>clang tries to be compatible with gcc as much as possible, but some gcc
extensions are not implemented yet:</p>
<ul>
<li><p>clang does not support decimal floating point types (<code class=3D"=
docutils literal notranslate"><span class=3D"pre">_Decimal32</span></code> =
and
friends) yet.</p></li>
<li><p>clang does not support nested functions; this is a complex feature
which is infrequently used, so it is unlikely to be implemented
anytime soon. In C++11 it can be emulated by assigning lambda
functions to local variables, e.g:</p>
<div class=3D"highlight-cpp notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"k">auto</span><span class=3D"w"> </span><span class=
=3D"k">const</span><span class=3D"w"> </span><span class=3D"n">local_functi=
on</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"p">[</span><span class=3D"o">&amp;</span><spa=
n class=3D"p">](</span><span class=3D"kt">int</span><span class=3D"w"> </sp=
an><span class=3D"n">parameter</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"c1">// Do something</span>
<span class=3D"p">};</span>
<span class=3D"p">...</span>
<span class=3D"n">local_function</span><span class=3D"p">(</span><span clas=
s=3D"mi">1</span><span class=3D"p">);</span>
</pre></div>
</div>
</li>
<li><p>clang only supports global register variables when the register spec=
ified
is non-allocatable (e.g. the stack pointer). Support for general global
register variables is unlikely to be implemented soon because it requires
additional LLVM backend support.</p></li>
<li><p>clang does not support static initialization of flexible array
members. This appears to be a rarely used extension, but could be
implemented pending user demand.</p></li>
<li><p>clang does not support
<code class=3D"docutils literal notranslate"><span class=3D"pre">__builtin_=
va_arg_pack</span></code>/<code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">__builtin_va_arg_pack_len</span></code>. This is
used rarely, but in some potentially interesting places, like the
glibc headers, so it may be implemented pending user demand. Note
that because clang pretends to be like GCC 4.2, and this extension
was introduced in 4.3, the glibc headers will not try to use this
extension with clang at the moment.</p></li>
<li><p>clang does not support the gcc extension for forward-declaring
function parameters; this has not shown up in any real-world code
yet, though, so it might never be implemented.</p></li>
</ul>
<p>This is not a complete list; if you find an unsupported extension
missing from this list, please send an e-mail to cfe-dev. This list
currently excludes C++; see <a class=3D"reference internal" href=3D"https:/=
/clang.llvm.org/docs/UsersManual.html#cxx"><span class=3D"std std-ref">C++ =
Language Features</span></a>. Also, this
list does not include bugs in mostly-implemented features; please see
the <a class=3D"reference external" href=3D"https://bugs.llvm.org/buglist.c=
gi?quicksearch=3Dproduct%3Aclang+component%3A-New%2BBugs%2CAST%2CBasic%2CDr=
iver%2CHeaders%2CLLVM%2BCodeGen%2Cparser%2Cpreprocessor%2CSemantic%2BAnalyz=
er">bug
tracker</a>
for known existing bugs (FIXME: Is there a section for bug-reporting
guidelines somewhere?).</p>
</section>
<section id=3D"intentionally-unsupported-gcc-extensions">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id78" role=3D"doc-backlink">Intentionally unsupported GCC extensions=
</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual=
.html#intentionally-unsupported-gcc-extensions" title=3D"Link to this headi=
ng">=C2=B6</a></h3>
<ul class=3D"simple">
<li><p>clang does not support the gcc extension that allows variable-length
arrays in structures. This is for a few reasons: one, it is tricky to
implement, two, the extension is completely undocumented, and three,
the extension appears to be rarely used. Note that clang <em>does</em>
support flexible array members (arrays with a zero or unspecified
size at the end of a structure).</p></li>
<li><p>GCC accepts many expression forms that are not valid integer constan=
t
expressions in bit-field widths, enumerator constants, case labels,
and in array bounds at global scope. Clang also accepts additional
expression forms in these contexts, but constructs that GCC accepts due to
simplifications GCC performs while parsing, such as <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">x</span> <span class=3D"pre">-</s=
pan> <span class=3D"pre">x</span></code> (where <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">x</span></code> is a
variable) will likely never be accepted by Clang.</p></li>
<li><p>clang does not support <code class=3D"docutils literal notranslate">=
<span class=3D"pre">__builtin_apply</span></code> and friends; this extensi=
on
is extremely obscure and difficult to implement reliably.</p></li>
</ul>
</section>
<section id=3D"microsoft-extensions">
<span id=3D"c-ms"></span><h3><a class=3D"toc-backref" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#id79" role=3D"doc-backlink">Microsoft exten=
sions</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#microsoft-extensions" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<p>clang has support for many extensions from Microsoft Visual C++. To enab=
le these
extensions, use the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">-fms-extensions</span></code> command-line option. This is the de=
fault
for Windows targets. Clang does not implement every pragma or declspec prov=
ided
by MSVC, but the popular ones, such as <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">__declspec(dllexport)</span></code> and <code =
class=3D"docutils literal notranslate"><span class=3D"pre">#pragma</span>
<span class=3D"pre">comment(lib)</span></code> are well supported.</p>
<p>clang has a <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-fms-compatibility</span></code> flag that makes clang accept enough
invalid C++ to be able to parse most Microsoft headers. For example, it
allows <a class=3D"reference external" href=3D"https://clang.llvm.org/compa=
tibility.html#dep_lookup_bases">unqualified lookup of dependent base class =
members</a>, which is
a common compatibility issue with clang. This flag is enabled by default
for Windows targets.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">-fdelay=
ed-template-parsing</span></code> lets clang delay parsing of function temp=
late
definitions until the end of a translation unit. This flag is enabled by
default for Windows targets.</p>
<p>For compatibility with existing code that compiles with MSVC, clang defi=
nes the
<code class=3D"docutils literal notranslate"><span class=3D"pre">_MSC_VER</=
span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">_MSC_FULL_VER</span></code> macros. When on Windows, these default=
 to
either the same value as the currently installed version of cl.exe, or <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">1933</span></c=
ode>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">193300=
000</span></code> (respectively). The <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-fms-compatibility-version=3D</span></code> fla=
g
overrides these values.  It accepts a dotted version tuple, such as 19.00.2=
3506.
Changing the MSVC compatibility version makes clang behave more like that
version of MSVC. For example, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-fms-compatibility-version=3D19</span></code> will enab=
le
C++14 features and define <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">char16_t</span></code> and <code class=3D"docutils literal =
notranslate"><span class=3D"pre">char32_t</span></code> as builtin types.</=
p>
</section>
</section>
<section id=3D"cxx">
<span id=3D"id8"></span><h2><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id80" role=3D"doc-backlink">C++ Language Fea=
tures</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#cxx" title=3D"Link to this heading">=C2=B6</a></h2>
<p>clang fully implements all of standard C++98 except for exported
templates (which were removed in C++11), all of standard C++11,
C++14, and C++17, and most of C++20.</p>
<p>See the <a class=3D"reference external" href=3D"https://clang.llvm.org/c=
xx_status.html">C++ support in Clang</a> page
for detailed information on C++ feature support across Clang versions.</p>
<section id=3D"controlling-implementation-limits">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id81" role=3D"doc-backlink">Controlling implementation limits</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#c=
ontrolling-implementation-limits" title=3D"Link to this heading">=C2=B6</a>=
</h3>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fbracket-depth">
<span class=3D"sig-name descname"><span class=3D"pre">-fbracket-depth</span=
></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3DN<=
/span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Us=
ersManual.html#cmdoption-fbracket-depth" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Sets the limit for nested parentheses, brackets, and braces to N.  T=
he
default is 256.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fconstexpr-depth">
<span class=3D"sig-name descname"><span class=3D"pre">-fconstexpr-depth</sp=
an></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D=
N</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cmdoption-fconstexpr-depth" title=3D"Link to this definiti=
on">=C2=B6</a></dt>
<dd><p>Sets the limit for constexpr function invocations to N. The default =
is 512.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fconstexpr-steps">
<span class=3D"sig-name descname"><span class=3D"pre">-fconstexpr-steps</sp=
an></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D=
N</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/=
UsersManual.html#cmdoption-fconstexpr-steps" title=3D"Link to this definiti=
on">=C2=B6</a></dt>
<dd><p>Sets the limit for the number of full-expressions evaluated in a sin=
gle
constant expression evaluation. This also controls the maximum size
of array and dynamic array allocation that can be constant evaluated.
The default is 1048576.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-ftemplate-depth">
<span class=3D"sig-name descname"><span class=3D"pre">-ftemplate-depth</spa=
n></span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3DN=
</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/U=
sersManual.html#cmdoption-ftemplate-depth" title=3D"Link to this definition=
">=C2=B6</a></dt>
<dd><p>Sets the limit for recursively nested template instantiations to N. =
 The
default is 1024.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-foperator-arrow-depth">
<span class=3D"sig-name descname"><span class=3D"pre">-foperator-arrow-dept=
h</span></span><span class=3D"sig-prename descclassname"><span class=3D"pre=
">=3DN</span></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/=
docs/UsersManual.html#cmdoption-foperator-arrow-depth" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>Sets the limit for iterative calls to =E2=80=98operator-&gt;=E2=80=
=99 functions to N.  The
default is 256.</p>
</dd></dl>

</section>
</section>
<section id=3D"objective-c-language-features">
<span id=3D"objc"></span><h2><a class=3D"toc-backref" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#id82" role=3D"doc-backlink">Objective-C Lan=
guage Features</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/do=
cs/UsersManual.html#objective-c-language-features" title=3D"Link to this he=
ading">=C2=B6</a></h2>
</section>
<section id=3D"objcxx">
<span id=3D"id9"></span><h2><a class=3D"toc-backref" href=3D"https://clang.=
llvm.org/docs/UsersManual.html#id83" role=3D"doc-backlink">Objective-C++ La=
nguage Features</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/d=
ocs/UsersManual.html#objcxx" title=3D"Link to this heading">=C2=B6</a></h2>
</section>
<section id=3D"openmp-features">
<span id=3D"openmp"></span><h2><a class=3D"toc-backref" href=3D"https://cla=
ng.llvm.org/docs/UsersManual.html#id84" role=3D"doc-backlink">OpenMP Featur=
es</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#openmp-features" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Clang supports all OpenMP 4.5 directives and clauses. See <a class=3D"re=
ference internal" href=3D"https://clang.llvm.org/docs/OpenMPSupport.html"><=
span class=3D"doc">OpenMP Support</span></a>
for additional details.</p>
<p>Use <cite>-fopenmp</cite> to enable OpenMP. Support for OpenMP can be di=
sabled with
<cite>-fno-openmp</cite>.</p>
<p>Use <cite>-fopenmp-simd</cite> to enable OpenMP simd features only, with=
out linking
the runtime library; for combined constructs
(e.g. <code class=3D"docutils literal notranslate"><span class=3D"pre">#pra=
gma</span> <span class=3D"pre">omp</span> <span class=3D"pre">parallel</spa=
n> <span class=3D"pre">for</span> <span class=3D"pre">simd</span></code>) t=
he non-simd directives and clauses
will be ignored. This can be disabled with <cite>-fno-openmp-simd</cite>.</=
p>
<section id=3D"id10">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id85" role=3D"doc-backlink">Controlling implementation limits</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#i=
d10" title=3D"Link to this heading">=C2=B6</a></h3>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-fopenmp-use-tls">
<span class=3D"sig-name descname"><span class=3D"pre">-fopenmp-use-tls</spa=
n></span><span class=3D"sig-prename descclassname"></span><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-fopen=
mp-use-tls" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Controls code generation for OpenMP threadprivate variables. In pres=
ence of
this option all threadprivate variables are generated the same way as threa=
d
local variables, using TLS support. If <cite>-fno-openmp-use-tls</cite>
is provided or target does not support TLS, code generation for threadpriva=
te
variables relies on OpenMP runtime library.</p>
</dd></dl>

</section>
</section>
<section id=3D"opencl-features">
<span id=3D"opencl"></span><h2><a class=3D"toc-backref" href=3D"https://cla=
ng.llvm.org/docs/UsersManual.html#id86" role=3D"doc-backlink">OpenCL Featur=
es</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#opencl-features" title=3D"Link to this heading">=C2=B6</a></h2>
<p>Clang can be used to compile OpenCL kernels for execution on a device
(e.g. GPU). It is possible to compile the kernel into a binary (e.g. for AM=
DGPU)
that can be uploaded to run directly on a device (e.g. using
<a class=3D"reference external" href=3D"https://www.khronos.org/registry/Op=
enCL/specs/opencl-1.1.pdf#111">clCreateProgramWithBinary</a>) or
into generic bitcode files loadable into other toolchains.</p>
<p>Compiling to a binary using the default target from the installation can=
 be done
as follows:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span><span class=3D"nb">echo</span=
><span class=3D"w"> </span><span class=3D"s2">"kernel void k(){}"</span><sp=
an class=3D"w"> </span>&gt;<span class=3D"w"> </span>test.cl
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>Compiling for a specific target can be done by specifying the triple cor=
responding
to the target, for example:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>nvptx64-unknown-unknown<span class=3D=
"w"> </span>test.cl
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--target<span cl=
ass=3D"o">=3D</span>amdgcn-amd-amdhsa<span class=3D"w"> </span>-mcpu<span c=
lass=3D"o">=3D</span>gfx900<span class=3D"w"> </span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>Compiling to bitcode can be done as follows:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>-c<span class=3D"w"> </span>-emit-llvm<span class=3D"w"> </span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>This will produce a file <cite>test.bc</cite> that can be used in vendor=
 toolchains
to perform machine code generation.</p>
<p>Note that if compiled to bitcode for generic targets such as SPIR/SPIR-V=
,
portable IR is produced that can be used with various vendor
tools as well as open source tools such as <a class=3D"reference external" =
href=3D"https://github.com/KhronosGroup/SPIRV-LLVM-Translator">SPIRV-LLVM T=
ranslator</a>
to produce SPIR-V binary. More details are provided in <a class=3D"referenc=
e external" href=3D"https://github.com/KhronosGroup/OpenCL-Guide/blob/main/=
chapters/os_tooling.md">the offline
compilation from OpenCL kernel sources into SPIR-V using open source
tools</a>.
From clang 14 onwards SPIR-V can be generated directly as detailed in
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#spir-v"><span class=3D"std std-ref">the SPIR-V support section</s=
pan></a>.</p>
<p>Clang currently supports OpenCL C language standards up to v2.0. Clang m=
ainly
supports full profile. There is only very limited support of the embedded
profile.
From clang 9 a C++ mode is available for OpenCL (see
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMa=
nual.html#cxx-for-opencl"><span class=3D"std std-ref">C++ for OpenCL</span>=
</a>).</p>
<p>OpenCL v3.0 support is complete but it remains in experimental state, se=
e more
details about the experimental features and limitations in <a class=3D"refe=
rence internal" href=3D"https://clang.llvm.org/docs/OpenCLSupport.html"><sp=
an class=3D"doc">OpenCL Support</span></a>
page.</p>
<section id=3D"opencl-specific-options">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id87" role=3D"doc-backlink">OpenCL Specific Options</a><a class=3D"h=
eaderlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#opencl-spec=
ific-options" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Most of the OpenCL build options from <a class=3D"reference external" hr=
ef=3D"https://www.khronos.org/registry/cl/specs/opencl-2.0.pdf#200">the spe=
cification v2.0 section 5.8.4</a> are available.</p>
<p>Examples:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>-cl-std<span class=3D"o">=3D</span>CL2.0<span class=3D"w"> </span>-cl-sin=
gle-precision-constant<span class=3D"w"> </span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>Many flags used for the compilation for C sources can also be passed whi=
le
compiling for OpenCL, examples: <code class=3D"docutils literal notranslate=
"><span class=3D"pre">-c</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">-O&lt;1-4|s&gt;</span></code>, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">-o</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">-emit-llvm</span=
></code>, etc.</p>
<p>Some extra options are available to support special OpenCL features.</p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-cl-no-stdinc">
<span class=3D"sig-name descname"><span class=3D"pre">-cl-no-stdinc</span><=
/span><span class=3D"sig-prename descclassname"></span><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-cl-no-st=
dinc" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Allows to disable all extra types and functions that are not native =
to the compiler.
This might reduce the compilation speed marginally but many declarations fr=
om the
OpenCL standard will not be accessible. For example, the following will fai=
l to
compile.</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span><span class=3D"nb">echo</span><spa=
n class=3D"w"> </span><span class=3D"s2">"bool is_wg_uniform(int i){return =
get_enqueued_local_size(i)=3D=3Dget_local_size(i);}"</span><span class=3D"w=
"> </span>&gt;<span class=3D"w"> </span>test.cl
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-cl-std<span cla=
ss=3D"o">=3D</span>CL2.0<span class=3D"w"> </span>-cl-no-stdinc<span class=
=3D"w"> </span>test.cl
<span class=3D"go">error: use of undeclared identifier 'get_enqueued_local_=
size'</span>
<span class=3D"go">error: use of undeclared identifier 'get_local_size'</sp=
an>
</pre></div>
</div>
<p>More information about the standard types and functions is provided in <=
a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/UsersMan=
ual.html#opencl-header"><span class=3D"std std-ref">the
section on the OpenCL Header</span></a>.</p>
</dd></dl>

<dl class=3D"std option" id=3D"opencl-cl-ext">
<dt class=3D"sig sig-object std" id=3D"cmdoption-cl-ext">
<span class=3D"sig-name descname"><span class=3D"pre">-cl-ext</span></span>=
<span class=3D"sig-prename descclassname"></span><a class=3D"headerlink" hr=
ef=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-cl-ext" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Enables/Disables support of OpenCL extensions and optional features.=
 All OpenCL
targets set a list of extensions that they support. Clang allows to amend t=
his using
the <code class=3D"docutils literal notranslate"><span class=3D"pre">-cl-ex=
t</span></code> flag with a comma-separated list of extensions prefixed wit=
h
<code class=3D"docutils literal notranslate"><span class=3D"pre">'+'</span>=
</code> or <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>'-'</span></code>. The syntax: <code class=3D"docutils literal notranslate=
"><span class=3D"pre">-cl-ext=3D&lt;(['-'|'+']&lt;extension&gt;[,])+&gt;</s=
pan></code>,  where
extensions can be either one of <a class=3D"reference external" href=3D"htt=
ps://www.khronos.org/registry/OpenCL">the OpenCL published extensions</a>
or any vendor extension. Alternatively, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">'all'</span></code> can be used to enable
or disable all known extensions.</p>
<p>Example disabling double support for the 64-bit SPIR-V target:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-c<=
span class=3D"w"> </span>--target<span class=3D"o">=3D</span>spirv64<span c=
lass=3D"w"> </span>-cl-ext<span class=3D"o">=3D</span>-cl_khr_fp64<span cla=
ss=3D"w"> </span>test.cl
</pre></div>
</div>
<p>Enabling all extensions except double support in R600 AMD GPU can be don=
e using:</p>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--t=
arget<span class=3D"o">=3D</span>r600<span class=3D"w"> </span>-cl-ext<span=
 class=3D"o">=3D</span>-all,+cl_khr_fp16<span class=3D"w"> </span>test.cl
</pre></div>
</div>
<p>Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/fe=
atures in
clang by default.</p>
</dd></dl>

</section>
<section id=3D"opencl-targets">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id88" role=3D"doc-backlink">OpenCL Targets</a><a class=3D"headerlink=
" href=3D"https://clang.llvm.org/docs/UsersManual.html#opencl-targets" titl=
e=3D"Link to this heading">=C2=B6</a></h3>
<p>OpenCL targets are derived from the regular Clang target classes. The Op=
enCL
specific parts of the target representation provide address space mapping a=
s
well as a set of supported extensions.</p>
<section id=3D"specific-targets">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id89" role=3D"doc-backlink">Specific Targets</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/UsersManual.html#specific-targets" =
title=3D"Link to this heading">=C2=B6</a></h4>
<p>There is a set of concrete HW architectures that OpenCL can be compiled =
for.</p>
<ul>
<li><p>For AMD target:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>amdgcn-amd-amdhsa<span class=3D"w"> <=
/span>-mcpu<span class=3D"o">=3D</span>gfx900<span class=3D"w"> </span>test=
.cl
</pre></div>
</div>
</div></blockquote>
</li>
<li><p>For Nvidia architectures:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>nvptx64-unknown-unknown<span class=3D=
"w"> </span>test.cl
</pre></div>
</div>
</div></blockquote>
</li>
</ul>
</section>
<section id=3D"generic-targets">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id90" role=3D"doc-backlink">Generic Targets</a><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/UsersManual.html#generic-targets" ti=
tle=3D"Link to this heading">=C2=B6</a></h4>
<ul>
<li><p>A SPIR-V binary can be produced for 32- or 64-bit targets.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>spirv32<span class=3D"w"> </span>-c<s=
pan class=3D"w"> </span>test.cl
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--target<span cl=
ass=3D"o">=3D</span>spirv64<span class=3D"w"> </span>-c<span class=3D"w"> <=
/span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>More details can be found in <a class=3D"reference internal" href=3D"htt=
ps://clang.llvm.org/docs/UsersManual.html#spir-v"><span class=3D"std std-re=
f">the SPIR-V support section</span></a>.</p>
</li>
<li><p>SPIR is available as a generic target to allow portable bitcode to b=
e produced
that can be used across GPU toolchains. The implementation follows <a class=
=3D"reference external" href=3D"https://www.khronos.org/spir">the SPIR
specification</a>. There are two flavors
available for 32 and 64 bits.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>spir<span class=3D"w"> </span>test.cl=
<span class=3D"w"> </span>-emit-llvm<span class=3D"w"> </span>-c
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--target<span cl=
ass=3D"o">=3D</span>spir64<span class=3D"w"> </span>test.cl<span class=3D"w=
"> </span>-emit-llvm<span class=3D"w"> </span>-c
</pre></div>
</div>
</div></blockquote>
<p>Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.=
0 and
SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL.</p>
</li>
<li><p>x86 is used by some implementations that are x86 compatible and curr=
ently
remains for backwards compatibility (with older implementations prior to
SPIR target support). For =E2=80=9Cnon-SPMD=E2=80=9D targets which cannot s=
pawn multiple
work-items on the fly using hardware, which covers practically all non-GPU
devices such as CPUs and DSPs, additional processing is needed for the kern=
els
to support multiple work-item execution. For this, a 3rd party toolchain,
such as for example <a class=3D"reference external" href=3D"http://portable=
cl.org/">POCL</a>, can be used.</p>
<p>This target does not support multiple memory segments and, therefore, th=
e fake
address space map can be added using the <a class=3D"reference internal" hr=
ef=3D"https://clang.llvm.org/docs/OpenCLSupport.html#opencl-fake-address-sp=
ace-map"><span class=3D"std std-ref">-ffake-address-space-map</span></a> fl=
ag.</p>
<p>All known OpenCL extensions and features are set to supported in the gen=
eric targets,
however <a class=3D"reference internal" href=3D"https://clang.llvm.org/docs=
/UsersManual.html#cmdoption-cl-ext"><code class=3D"xref std std-option docu=
tils literal notranslate"><span class=3D"pre">-cl-ext</span></code></a> fla=
g can be used to toggle individual extensions and
features.</p>
</li>
</ul>
</section>
</section>
<section id=3D"opencl-header">
<span id=3D"id11"></span><h3><a class=3D"toc-backref" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#id91" role=3D"doc-backlink">OpenCL Header</=
a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.h=
tml#opencl-header" title=3D"Link to this heading">=C2=B6</a></h3>
<p>By default Clang will include standard headers and therefore most of Ope=
nCL
builtin functions and types are available during compilation. The
default declarations of non-native compiler types and functions can be disa=
bled
by using flag <a class=3D"reference internal" href=3D"https://clang.llvm.or=
g/docs/UsersManual.html#cmdoption-cl-no-stdinc"><code class=3D"xref std std=
-option docutils literal notranslate"><span class=3D"pre">-cl-no-stdinc</sp=
an></code></a>.</p>
<p>The following example demonstrates that OpenCL kernel sources with vario=
us
standard builtin functions can be compiled without the need for an explicit
includes or compiler flags.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span><span class=3D"nb">echo</span=
><span class=3D"w"> </span><span class=3D"s2">"bool is_wg_uniform(int i){re=
turn get_enqueued_local_size(i)=3D=3Dget_local_size(i);}"</span><span class=
=3D"w"> </span>&gt;<span class=3D"w"> </span>test.cl
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>-cl-std<span cla=
ss=3D"o">=3D</span>CL2.0<span class=3D"w"> </span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>More information about the default headers is provided in <a class=3D"re=
ference internal" href=3D"https://clang.llvm.org/docs/OpenCLSupport.html"><=
span class=3D"doc">OpenCL Support</span></a>.</p>
</section>
<section id=3D"opencl-extensions">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id92" role=3D"doc-backlink">OpenCL Extensions</a><a class=3D"headerl=
ink" href=3D"https://clang.llvm.org/docs/UsersManual.html#opencl-extensions=
" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Most of the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">cl_khr_*</span></code> extensions to OpenCL C from <a class=3D"referen=
ce external" href=3D"https://www.khronos.org/registry/OpenCL/">the official=
 OpenCL
registry</a> are available and
configured per target depending on the support available in the specific
architecture.</p>
<p>It is possible to alter the default extensions setting per target using
<code class=3D"docutils literal notranslate"><span class=3D"pre">-cl-ext</s=
pan></code> flag. (See <a class=3D"reference internal" href=3D"https://clan=
g.llvm.org/docs/UsersManual.html#opencl-cl-ext"><span class=3D"std std-ref"=
>flags description</span></a> for more details).</p>
<p>Vendor extensions can be added flexibly by declaring the list of types a=
nd
functions associated with each extensions enclosed within the following
compiler pragma directives:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"cp">#pragma OPENCL EXTENSION the_new_extension_n=
ame : begin</span>
<span class=3D"c1">// declare types and functions associated with the exten=
sion here</span>
<span class=3D"cp">#pragma OPENCL EXTENSION the_new_extension_name : end</s=
pan>
</pre></div>
</div>
</div></blockquote>
<p>For example, parsing the following code adds <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">my_t</span></code> type and <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">my_func</span></cod=
e>
function to the custom <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">my_ext</span></code> extension.</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"cp">#pragma OPENCL EXTENSION my_ext : begin</spa=
n>
<span class=3D"k">typedef</span><span class=3D"w"> </span><span class=3D"k"=
>struct</span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"n">a</span><span class=3D"p">;</span>
<span class=3D"p">}</span><span class=3D"n">my_t</span><span class=3D"p">;<=
/span>
<span class=3D"kt">void</span><span class=3D"w"> </span><span class=3D"nf">=
my_func</span><span class=3D"p">(</span><span class=3D"n">my_t</span><span =
class=3D"p">);</span>
<span class=3D"cp">#pragma OPENCL EXTENSION my_ext : end</span>
</pre></div>
</div>
</div></blockquote>
<p>There is no conflict resolution for identifier clashes among extensions.
It is therefore recommended that the identifiers are prefixed with a
double underscore to avoid clashing with user space identifiers. Vendor
extension should use reserved identifier prefix e.g. amd, arm, intel.</p>
<p>Clang also supports language extensions documented in <a class=3D"refere=
nce external" href=3D"https://github.com/KhronosGroup/Khronosdotorg/blob/ma=
in/api/opencl/assets/OpenCL_LangExt.pdf">The OpenCL C Language
Extensions Documentation</a>.</p>
</section>
<section id=3D"opencl-specific-attributes">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id93" role=3D"doc-backlink">OpenCL-Specific Attributes</a><a class=
=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#opencl=
-specific-attributes" title=3D"Link to this heading">=C2=B6</a></h3>
<p>OpenCL support in Clang contains a set of attribute taken directly from =
the
specification as well as additional attributes.</p>
<p>See also <a class=3D"reference internal" href=3D"https://clang.llvm.org/=
docs/AttributeReference.html"><span class=3D"doc">Attributes in Clang</span=
></a>.</p>
<section id=3D"nosvm">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id94" role=3D"doc-backlink">nosvm</a><a class=3D"headerlink" href=3D=
"https://clang.llvm.org/docs/UsersManual.html#nosvm" title=3D"Link to this =
heading">=C2=B6</a></h4>
<p>Clang supports this attribute to comply to OpenCL v2.0 conformance, but =
it
does not have any effect on the IR. For more details refer to the specifica=
tion
<a class=3D"reference external" href=3D"https://www.khronos.org/registry/cl=
/specs/opencl-2.0-openclc.pdf#49">section 6.7.2</a></p>
</section>
<section id=3D"opencl-unroll-hint">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id95" role=3D"doc-backlink">opencl_unroll_hint</a><a class=3D"header=
link" href=3D"https://clang.llvm.org/docs/UsersManual.html#opencl-unroll-hi=
nt" title=3D"Link to this heading">=C2=B6</a></h4>
<p>The implementation of this feature mirrors the unroll hint for C.
More details on the syntax can be found in the specification
<a class=3D"reference external" href=3D"https://www.khronos.org/registry/cl=
/specs/opencl-2.0-openclc.pdf#61">section 6.11.5</a></p>
</section>
<section id=3D"convergent">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id96" role=3D"doc-backlink">convergent</a><a class=3D"headerlink" hr=
ef=3D"https://clang.llvm.org/docs/UsersManual.html#convergent" title=3D"Lin=
k to this heading">=C2=B6</a></h4>
<p>To make sure no invalid optimizations occur for single program multiple =
data
(SPMD) / single instruction multiple thread (SIMT) Clang provides attribute=
s that
can be used for special functions that have cross work item semantics.
An example is the subgroup operations such as <a class=3D"reference externa=
l" href=3D"https://www.khronos.org/registry/cl/extensions/intel/cl_intel_su=
bgroups.txt">intel_sub_group_shuffle</a></p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"c1">// Define custom my_sub_group_shuffle(data, =
c)</span>
<span class=3D"c1">// that makes use of intel_sub_group_shuffle</span>
<span class=3D"n">r1</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"p">...</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">r0</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"n">r1</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">computeA</span><s=
pan class=3D"p">();</span>
<span class=3D"c1">// Shuffle data from r1 into r3</span>
<span class=3D"c1">// of threads id r2.</span>
<span class=3D"n">r3</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"n">my_sub_group_shuffle</spa=
n><span class=3D"p">(</span><span class=3D"n">r1</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">r2</span><span class=3D"p=
">);</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">r0</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"n">r3</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">computeB</span><s=
pan class=3D"p">();</span>
</pre></div>
</div>
</div></blockquote>
<p>with non-SPMD semantics this is optimized to the following equivalent co=
de:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">r1</span><span class=3D"w"> </span><span clas=
s=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"p">...</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"o">!</span><span class=3D"n">r0</span><span class=3D"p">=
)</span>
<span class=3D"w">  </span><span class=3D"c1">// Incorrect functionality! T=
he data in r1</span>
<span class=3D"w">  </span><span class=3D"c1">// have not been computed by =
all threads yet.</span>
<span class=3D"w">  </span><span class=3D"n">r3</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">my_sub_group_shuffle</span><span class=3D"p">(</span><span class=3D"n">r1=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">r2</span><span class=3D"p">);</span>
<span class=3D"k">else</span><span class=3D"w"> </span><span class=3D"p">{<=
/span>
<span class=3D"w">  </span><span class=3D"n">r1</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">computeA</span><span class=3D"p">();</span>
<span class=3D"w">  </span><span class=3D"n">r3</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">my_sub_group_shuffle</span><span class=3D"p">(</span><span class=3D"n">r1=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">r2</span><span class=3D"p">);</span>
<span class=3D"w">  </span><span class=3D"n">r3</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">computeB</span><span class=3D"p">();</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div></blockquote>
<p>Declaring the function <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">my_sub_group_shuffle</span></code> with the convergent attr=
ibute
would prevent this:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">my_sub_group_shuffle</span><span class=3D"p">=
()</span><span class=3D"w"> </span><span class=3D"n">__attribute__</span><s=
pan class=3D"p">((</span><span class=3D"n">convergent</span><span class=3D"=
p">));</span>
</pre></div>
</div>
</div></blockquote>
<p>Using <code class=3D"docutils literal notranslate"><span class=3D"pre">c=
onvergent</span></code> guarantees correct execution by keeping CFG equival=
ence
wrt operations marked as <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">convergent</span></code>. CFG <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">G=C2=B4</span></code> is equivalent to <=
code class=3D"docutils literal notranslate"><span class=3D"pre">G</span></c=
ode> wrt
node <code class=3D"docutils literal notranslate"><span class=3D"pre">Ni</s=
pan></code> : <code class=3D"docutils literal notranslate"><span class=3D"p=
re">iff</span> <span class=3D"pre">=E2=88=80</span> <span class=3D"pre">Nj<=
/span> <span class=3D"pre">(i=E2=89=A0j)</span></code> domination and post-=
domination relations with
respect to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Ni</span></code> remain the same in both <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">G</span></code> and <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">G=C2=B4</span></code>.</p>
</section>
<section id=3D"noduplicate">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id97" role=3D"doc-backlink">noduplicate</a><a class=3D"headerlink" h=
ref=3D"https://clang.llvm.org/docs/UsersManual.html#noduplicate" title=3D"L=
ink to this heading">=C2=B6</a></h4>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">nodupli=
cate</span></code> is more restrictive with respect to optimizations than
<code class=3D"docutils literal notranslate"><span class=3D"pre">convergent=
</span></code> because a convergent function only preserves CFG equivalence=
.
This allows some optimizations to happen as long as the control flow remain=
s
unmodified.</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">for</span><span class=3D"w"> </span><span cla=
ss=3D"p">(</span><span class=3D"kt">int</span><span class=3D"w"> </span><sp=
an class=3D"n">i</span><span class=3D"o">=3D</span><span class=3D"mi">0</sp=
an><span class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i<=
/span><span class=3D"o">&lt;</span><span class=3D"mi">4</span><span class=
=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">i</span><span cl=
ass=3D"o">++</span><span class=3D"p">)</span>
<span class=3D"w">  </span><span class=3D"n">my_sub_group_shuffle</span><sp=
an class=3D"p">()</span>
</pre></div>
</div>
</div></blockquote>
<p>can be modified to:</p>
<blockquote>
<div><div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">my_sub_group_shuffle</span><span class=3D"p">=
();</span>
<span class=3D"n">my_sub_group_shuffle</span><span class=3D"p">();</span>
<span class=3D"n">my_sub_group_shuffle</span><span class=3D"p">();</span>
<span class=3D"n">my_sub_group_shuffle</span><span class=3D"p">();</span>
</pre></div>
</div>
</div></blockquote>
<p>while using <code class=3D"docutils literal notranslate"><span class=3D"=
pre">noduplicate</span></code> would disallow this. Also <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">noduplicate</span></code> do=
esn=E2=80=99t
have the same safe semantics of CFG as <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">convergent</span></code> and can cause changes=
 in
CFG that modify semantics of the original program.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">nodupli=
cate</span></code> is kept for backwards compatibility only and it consider=
ed to be
deprecated for future uses.</p>
</section>
</section>
<section id=3D"c-for-opencl">
<span id=3D"cxx-for-opencl"></span><h3><a class=3D"toc-backref" href=3D"htt=
ps://clang.llvm.org/docs/UsersManual.html#id98" role=3D"doc-backlink">C++ f=
or OpenCL</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/Us=
ersManual.html#c-for-opencl" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Starting from clang 9 kernel code can contain C++17 features: classes, t=
emplates,
function overloading, type deduction, etc. Please note that this is not an
implementation of <a class=3D"reference external" href=3D"https://www.khron=
os.org/registry/OpenCL/specs/2.2/pdf/OpenCL_Cxx.pdf">OpenCL C++</a> and
there is no plan to support it in clang in any new releases in the near fut=
ure.</p>
<p>Clang currently supports C++ for OpenCL 1.0 and 2021.
For detailed information about this language refer to the C++ for OpenCL
Programming Language Documentation available
in <a class=3D"reference external" href=3D"https://www.khronos.org/opencl/a=
ssets/CXX_for_OpenCL.html">the latest build</a>
or in <a class=3D"reference external" href=3D"https://github.com/KhronosGro=
up/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12">the official releas=
e</a>.</p>
<p>To enable the C++ for OpenCL mode, pass one of following command line op=
tions when
compiling <code class=3D"docutils literal notranslate"><span class=3D"pre">=
.clcpp</span></code> file:</p>
<ul class=3D"simple">
<li><p>C++ for OpenCL 1.0: <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">-cl-std=3Dclc++</span></code>, <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">-cl-std=3DCLC++</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">-cl-std=3Dclc++1=
.0</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-cl-std=3D=
CLC++1.0</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">-std=3Dclc++</span></code>, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">-std=3DCLC++</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">-std=3Dclc++1.0</span></c=
ode> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">-std=3DCLC=
++1.0</span></code>.</p></li>
<li><p>C++ for OpenCL 2021: <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">-cl-std=3Dclc++2021</span></code>, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">-cl-std=3DCLC++2021</span></code=
>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">-std=3Dclc=
++2021</span></code>, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">-std=3DCLC++2021</span></code>.</p></li>
</ul>
<dl>
<dt>Example of use:</dt><dd><div class=3D"highlight-c++ notranslate"><div c=
lass=3D"highlight"><pre><span></span><span class=3D"k">template</span><span=
 class=3D"o">&lt;</span><span class=3D"k">class</span><span class=3D"w"> </=
span><span class=3D"nc">T</span><span class=3D"o">&gt;</span><span class=3D=
"w"> </span><span class=3D"n">T</span><span class=3D"w"> </span><span class=
=3D"n">add</span><span class=3D"p">(</span><span class=3D"w"> </span><span =
class=3D"n">T</span><span class=3D"w"> </span><span class=3D"n">x</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">T</span>=
<span class=3D"w"> </span><span class=3D"n">y</span><span class=3D"w"> </sp=
an><span class=3D"p">)</span>
<span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">return</span><span class=3D"w"=
> </span><span class=3D"n">x</span><span class=3D"w"> </span><span class=3D=
"o">+</span><span class=3D"w"> </span><span class=3D"n">y</span><span class=
=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"n">__kernel</span><span class=3D"w"> </span><span class=3D"k=
t">void</span><span class=3D"w"> </span><span class=3D"n">test</span><span =
class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">__global</s=
pan><span class=3D"w"> </span><span class=3D"kt">float</span><span class=3D=
"o">*</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">__global</span><=
span class=3D"w"> </span><span class=3D"kt">float</span><span class=3D"o">*=
</span><span class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p=
">)</span>
<span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"k">auto</span><span class=3D"w"> =
</span><span class=3D"n">index</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">get_global_id<=
/span><span class=3D"p">(</span><span class=3D"mi">0</span><span class=3D"p=
">);</span>
<span class=3D"w">  </span><span class=3D"n">a</span><span class=3D"p">[</s=
pan><span class=3D"n">index</span><span class=3D"p">]</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">add</span><span class=3D"p">(</span><span class=3D"n">b</span><span=
 class=3D"p">[</span><span class=3D"n">index</span><span class=3D"p">],</sp=
an><span class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">[<=
/span><span class=3D"n">index</span><span class=3D"o">+</span><span class=
=3D"mi">1</span><span class=3D"p">]);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"highlight-console notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"go">clang -cl-std=3Dclc++1.0 test.clcpp</span>
<span class=3D"go">clang -cl-std=3Dclc++ -c --target=3Dspirv64 test.cl</spa=
n>
</pre></div>
</div>
</dd>
</dl>
<p>By default, files with <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">.clcpp</span></code> extension are compiled with the C++ fo=
r
OpenCL 1.0 mode.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"go">clang test.clcpp</span>
</pre></div>
</div>
</div></blockquote>
<p>For backward compatibility files with <code class=3D"docutils literal no=
translate"><span class=3D"pre">.cl</span></code> extensions can also be com=
piled
in C++ for OpenCL mode but the desirable language mode must be activated wi=
th
a flag.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"go">clang -cl-std=3Dclc++ test.cl</span>
</pre></div>
</div>
</div></blockquote>
<p>Support of C++ for OpenCL 2021 is currently in experimental phase, refer=
 to
<a class=3D"reference internal" href=3D"https://clang.llvm.org/docs/OpenCLS=
upport.html"><span class=3D"doc">OpenCL Support</span></a> for more details=
.</p>
<p>C++ for OpenCL kernel sources can also be compiled online in drivers sup=
porting
<a class=3D"reference external" href=3D"https://www.khronos.org/registry/Op=
enCL/extensions/ext/cl_ext_cxx_for_opencl.html">cl_ext_cxx_for_opencl</a>
extension.</p>
<section id=3D"constructing-and-destroying-global-objects">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id99" role=3D"doc-backlink">Constructing and destroying global objec=
ts</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#constructing-and-destroying-global-objects" title=3D"Link to this h=
eading">=C2=B6</a></h4>
<p>Global objects with non-trivial constructors require the constructors to=
 be run
before the first kernel using the global objects is executed. Similarly glo=
bal
objects with non-trivial destructors require destructor invocation just aft=
er
the last kernel using the program objects is executed.
In OpenCL versions earlier than v2.2 there is no support for invoking globa=
l
constructors. However, an easy workaround is to manually enqueue the
constructor initialization kernel that has the following name scheme
<code class=3D"docutils literal notranslate"><span class=3D"pre">_GLOBAL__s=
ub_I_&lt;compiled</span> <span class=3D"pre">file</span> <span class=3D"pre=
">name&gt;</span></code>.
This kernel is only present if there are global objects with non-trivial
constructors present in the compiled binary. One way to check this is by
passing <code class=3D"docutils literal notranslate"><span class=3D"pre">CL=
_PROGRAM_KERNEL_NAMES</span></code> to <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">clGetProgramInfo</span></code> (OpenCL v2.0
s5.8.7) and then checking whether any kernel name matches the naming scheme=
 of
global constructor initialization kernel above.</p>
<p>Note that if multiple files are compiled and linked into libraries, mult=
iple
kernels that initialize global objects for multiple modules would have to b=
e
invoked.</p>
<p>Applications are currently required to run initialization of global obje=
cts
manually before running any kernels in which the objects are used.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"go">clang -cl-std=3Dclc++ test.cl</span>
</pre></div>
</div>
</div></blockquote>
<p>If there are any global objects to be initialized, the final binary will
contain the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">_GLOBAL__sub_I_test.cl</span></code> kernel to be enqueued.</p>
<p>Note that the manual workaround only applies to objects declared at the
program scope. There is no manual workaround for the construction of static
objects with non-trivial constructors inside functions.</p>
<p>Global destructors can not be invoked manually in the OpenCL v2.0 driver=
s.
However, all memory used for program scope objects should be released on
<code class=3D"docutils literal notranslate"><span class=3D"pre">clReleaseP=
rogram</span></code>.</p>
</section>
<section id=3D"libraries">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id100" role=3D"doc-backlink">Libraries</a><a class=3D"headerlink" hr=
ef=3D"https://clang.llvm.org/docs/UsersManual.html#libraries" title=3D"Link=
 to this heading">=C2=B6</a></h4>
<p>Limited experimental support of C++ standard libraries for OpenCL is
described in <a class=3D"reference internal" href=3D"https://clang.llvm.org=
/docs/OpenCLSupport.html"><span class=3D"doc">OpenCL Support</span></a> pag=
e.</p>
</section>
</section>
</section>
<section id=3D"target-specific-features-and-limitations">
<span id=3D"target-features"></span><h2><a class=3D"toc-backref" href=3D"ht=
tps://clang.llvm.org/docs/UsersManual.html#id101" role=3D"doc-backlink">Tar=
get-Specific Features and Limitations</a><a class=3D"headerlink" href=3D"ht=
tps://clang.llvm.org/docs/UsersManual.html#target-specific-features-and-lim=
itations" title=3D"Link to this heading">=C2=B6</a></h2>
<section id=3D"cpu-architectures-features-and-limitations">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id102" role=3D"doc-backlink">CPU Architectures Features and Limitati=
ons</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersMan=
ual.html#cpu-architectures-features-and-limitations" title=3D"Link to this =
heading">=C2=B6</a></h3>
<section id=3D"x86">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id103" role=3D"doc-backlink">X86</a><a class=3D"headerlink" href=3D"=
https://clang.llvm.org/docs/UsersManual.html#x86" title=3D"Link to this hea=
ding">=C2=B6</a></h4>
<p>The support for X86 (both 32-bit and 64-bit) is considered stable on
Darwin (macOS), Linux, FreeBSD, and Dragonfly BSD: it has been tested
to correctly compile many large C, C++, Objective-C, and Objective-C++
codebases.</p>
<p>On <code class=3D"docutils literal notranslate"><span class=3D"pre">x86_=
64-mingw32</span></code>, passing i128(by value) is incompatible with the
Microsoft x64 calling convention. You might need to tweak
<code class=3D"docutils literal notranslate"><span class=3D"pre">WinX86_64A=
BIInfo::classify()</span></code> in lib/CodeGen/Targets/X86.cpp.</p>
<p>For the X86 target, clang supports the <cite>-m16</cite> command line
argument which enables 16-bit code output. This is broadly similar to
using <code class=3D"docutils literal notranslate"><span class=3D"pre">asm(=
".code16gcc")</span></code> with the GNU toolchain. The generated code
and the ABI remains 32-bit but the assembler emits instructions
appropriate for a CPU running in 16-bit mode, with address-size and
operand-size prefixes to enable 32-bit addressing and operations.</p>
<p>Several micro-architecture levels as specified by the x86-64 psABI are d=
efined.
They are cumulative in the sense that features from previous levels are
implicitly included in later levels.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ma=
rch=3Dx86-64</span></code>: CMOV, CMPXCHG8B, FPU, FXSR, MMX, FXSR, SCE, SSE=
, SSE2</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ma=
rch=3Dx86-64-v2</span></code>: (close to Nehalem) CMPXCHG16B, LAHF-SAHF, PO=
PCNT, SSE3, SSE4.1, SSE4.2, SSSE3</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ma=
rch=3Dx86-64-v3</span></code>: (close to Haswell) AVX, AVX2, BMI1, BMI2, F1=
6C, FMA, LZCNT, MOVBE, XSAVE</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-ma=
rch=3Dx86-64-v4</span></code>: AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX51=
2VL</p></li>
</ul>
<p><a class=3D"reference external" href=3D"https://cdrdv2.intel.com/v1/dl/g=
etContent/784267">Intel AVX10 ISA</a> is
a major new vector ISA incorporating the modern vectorization aspects of
Intel AVX-512. This ISA will be supported on all future Intel processors.
Users are supposed to use the new options <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">-mavx10.N</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">-mavx10.N-512</span></cod=
e>
on these processors and should not use traditional AVX512 options anymore.<=
/p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">N</=
span></code> in <code class=3D"docutils literal notranslate"><span class=3D=
"pre">-mavx10.N</span></code> represents a continuous integer number starti=
ng
from <code class=3D"docutils literal notranslate"><span class=3D"pre">1</sp=
an></code>. <code class=3D"docutils literal notranslate"><span class=3D"pre=
">-mavx10.N</span></code> is an alias of <code class=3D"docutils literal no=
translate"><span class=3D"pre">-mavx10.N-256</span></code>, which means to
enable all instructions within AVX10 version N at a maximum vector length o=
f
256 bits. <code class=3D"docutils literal notranslate"><span class=3D"pre">=
-mavx10.N-512</span></code> enables all instructions at a maximum vector
length of 512 bits, which is a superset of instructions <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">-mavx10.N</span></code> enabl=
ed.</p>
<p>Current binaries built with AVX512 features can run on Intel AVX10/512 c=
apable
processors without re-compile, but cannot run on AVX10/256 capable processo=
rs.
Users need to re-compile their code with <code class=3D"docutils literal no=
translate"><span class=3D"pre">-mavx10.N</span></code>, and maybe update so=
me
code that calling to 512-bit X86 specific intrinsics and passing or returni=
ng
512-bit vector types in function call, if they want to run on AVX10/256 cap=
able
processors. Binaries built with <code class=3D"docutils literal notranslate=
"><span class=3D"pre">-mavx10.N</span></code> can run on both AVX10/256 and
AVX10/512 capable processors.</p>
<p>Users can add a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-mno-evex512</span></code> in the command line with AVX512 options=
 if
they want to run the binary on both legacy AVX512 and new AVX10/256 capable
processors. The option has the same constraints as <code class=3D"docutils =
literal notranslate"><span class=3D"pre">-mavx10.N</span></code>, i.e.,
cannot call to 512-bit X86 specific intrinsics and pass or return 512-bit v=
ector
types in function call.</p>
<p>Users should avoid using AVX512 features in function target attributes w=
hen
developing code for AVX10. If they have to do so, they need to add an expli=
cit
<code class=3D"docutils literal notranslate"><span class=3D"pre">evex512</s=
pan></code> or <code class=3D"docutils literal notranslate"><span class=3D"=
pre">no-evex512</span></code> together with AVX512 features for 512-bit or
non-512-bit functions respectively to avoid unexpected code generation. Bot=
h
command line option and target attribute of EVEX512 feature can only be use=
d
with AVX512. They don=E2=80=99t affect vector size of AVX10.</p>
<p>User should not mix the use AVX10 and AVX512 options together at any tim=
e,
because the option combinations are conflicting sometimes. For example, a
combination of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">-mavx512f</span> <span class=3D"pre">-mavx10.1-256</span></code> doesn=
=E2=80=99t show a clear intention to
compiler, since instructions in AVX512F and AVX10.1/256 intersect but do no=
t
overlap. In this case, compiler will emit warning for it, but the behavior
is determined. It will generate the same code as option <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">-mavx10.1-512</span></code>.
A similar case is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-mavx512f</span> <span class=3D"pre">-mavx10.2-256</span></code>, =
which equals to
<code class=3D"docutils literal notranslate"><span class=3D"pre">-mavx10.1-=
512</span> <span class=3D"pre">-mavx10.2-256</span></code>, because <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">avx10.2-256</span=
></code> implies <code class=3D"docutils literal notranslate"><span class=
=3D"pre">avx10.1-256</span></code>
and <code class=3D"docutils literal notranslate"><span class=3D"pre">-mavx5=
12f</span> <span class=3D"pre">-mavx10.1-256</span></code> equals to <code =
class=3D"docutils literal notranslate"><span class=3D"pre">-mavx10.1-512</s=
pan></code>.</p>
<p>There are some new macros introduced with AVX10 support. <code class=3D"=
docutils literal notranslate"><span class=3D"pre">-mavx10.1-256</span></cod=
e> will
enable <code class=3D"docutils literal notranslate"><span class=3D"pre">__A=
VX10_1__</span></code> and <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">__EVEX256__</span></code>, while <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">-mavx10.1-512</span></code> enables
<code class=3D"docutils literal notranslate"><span class=3D"pre">__AVX10_1_=
_</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">__EVEX256__</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">__EVEX512__</span></code>  and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">__AVX10_1_512__</span></code=
>.
Besides, both <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-mavx10.1-256</span></code> and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">-mavx10.1-512</span></code> will enable all AVX51=
2
feature specific macros. A AVX512 feature will enable both <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">__EVEX256__</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">__EVEX512_=
_</span></code> and its own macro. So <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">__EVEX512__</span></code> can be used to guard =
code
that can run on both legacy AVX512 and AVX10/512 capable processors but can=
not
run on AVX10/256, while a AVX512 macro like <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">__AVX512F__</span></code> cannot tell the
difference among the three options. Users need to check additional macros
<code class=3D"docutils literal notranslate"><span class=3D"pre">__AVX10_1_=
_</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">__EVEX512__</span></code> if they want to make distinction.</p>
</section>
<section id=3D"arm">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id104" role=3D"doc-backlink">ARM</a><a class=3D"headerlink" href=3D"=
https://clang.llvm.org/docs/UsersManual.html#arm" title=3D"Link to this hea=
ding">=C2=B6</a></h4>
<p>The support for ARM (specifically ARMv6 and ARMv7) is considered stable
on Darwin (iOS): it has been tested to correctly compile many large C,
C++, Objective-C, and Objective-C++ codebases. Clang only supports a
limited number of ARM architectures. It does not yet fully support
ARMv5, for example.</p>
</section>
<section id=3D"powerpc">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id105" role=3D"doc-backlink">PowerPC</a><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#powerpc" title=3D"Link to =
this heading">=C2=B6</a></h4>
<p>The support for PowerPC (especially PowerPC64) is considered stable
on Linux and FreeBSD: it has been tested to correctly compile many
large C and C++ codebases. PowerPC (32bit) is still missing certain
features (e.g. PIC code on ELF platforms).</p>
</section>
<section id=3D"other-platforms">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id106" role=3D"doc-backlink">Other platforms</a><a class=3D"headerli=
nk" href=3D"https://clang.llvm.org/docs/UsersManual.html#other-platforms" t=
itle=3D"Link to this heading">=C2=B6</a></h4>
<p>clang currently contains some support for other architectures (e.g. Spar=
c);
however, significant pieces of code generation are still missing, and they
haven=E2=80=99t undergone significant testing.</p>
<p>clang contains limited support for the MSP430 embedded processor, but
both the clang support and the LLVM backend support are highly
experimental.</p>
<p>Other platforms are completely unsupported at the moment. Adding the
minimal support needed for parsing and semantic analysis on a new
platform is quite easy; see <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">lib/Basic/Targets.cpp</span></code> in the clang source
tree. This level of support is also sufficient for conversion to LLVM IR
for simple programs. Proper support for conversion to LLVM IR requires
adding code to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">lib/CodeGen/CGCall.cpp</span></code> at the moment; this is likely to
change soon, though. Generating assembly requires a suitable LLVM
backend.</p>
</section>
</section>
<section id=3D"operating-system-features-and-limitations">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id107" role=3D"doc-backlink">Operating System Features and Limitatio=
ns</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#operating-system-features-and-limitations" title=3D"Link to this he=
ading">=C2=B6</a></h3>
<section id=3D"windows">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id108" role=3D"doc-backlink">Windows</a><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#windows" title=3D"Link to =
this heading">=C2=B6</a></h4>
<p>Clang has experimental support for targeting =E2=80=9CCygming=E2=80=9D (=
Cygwin / MinGW)
platforms.</p>
<p>See also <a class=3D"reference internal" href=3D"https://clang.llvm.org/=
docs/UsersManual.html#c-ms"><span class=3D"std std-ref">Microsoft Extension=
s</span></a>.</p>
<section id=3D"cygwin">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id109" role=3D"doc-backlink">Cygwin</a><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#cygwin" title=3D"Link to t=
his heading">=C2=B6</a></h5>
<p>Clang works on Cygwin-1.7.</p>
</section>
<section id=3D"mingw32">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id110" role=3D"doc-backlink">MinGW32</a><a class=3D"headerlink" href=
=3D"https://clang.llvm.org/docs/UsersManual.html#mingw32" title=3D"Link to =
this heading">=C2=B6</a></h5>
<p>Clang works on some mingw32 distributions. Clang assumes directories as
below;</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">C:/=
mingw/include</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">C:/=
mingw/lib</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">C:/=
mingw/lib/gcc/mingw32/4.[3-5].0/include/c++</span></code></p></li>
</ul>
<p>On MSYS, a few tests might fail.</p>
</section>
<section id=3D"mingw-w64">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id111" role=3D"doc-backlink">MinGW-w64</a><a class=3D"headerlink" hr=
ef=3D"https://clang.llvm.org/docs/UsersManual.html#mingw-w64" title=3D"Link=
 to this heading">=C2=B6</a></h5>
<p>For 32-bit (i686-w64-mingw32), and 64-bit (x86_64-w64-mingw32), Clang
assumes as below;</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">GCC=
</span> <span class=3D"pre">versions</span> <span class=3D"pre">4.5.0</span=
> <span class=3D"pre">to</span> <span class=3D"pre">4.5.3,</span> <span cla=
ss=3D"pre">4.6.0</span> <span class=3D"pre">to</span> <span class=3D"pre">4=
.6.2,</span> <span class=3D"pre">or</span> <span class=3D"pre">4.7.0</span>=
 <span class=3D"pre">(for</span> <span class=3D"pre">the</span> <span class=
=3D"pre">C++</span> <span class=3D"pre">header</span> <span class=3D"pre">s=
earch</span> <span class=3D"pre">path)</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/gcc.exe</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/clang.exe</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/clang++.exe</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../include/c++/GCC_version</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../include/c++/GCC_version/x86_64-w64-mingw32</span></code>=
</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../include/c++/GCC_version/i686-w64-mingw32</span></code></=
p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../include/c++/GCC_version/backward</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../x86_64-w64-mingw32/include</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../i686-w64-mingw32/include</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">som=
e_directory/bin/../include</span></code></p></li>
</ul>
<p>This directory layout is standard for any toolchain you will find on the
official <a class=3D"reference external" href=3D"http://mingw-w64.sourcefor=
ge.net/">MinGW-w64 website</a>.</p>
<p>Clang expects the GCC executable =E2=80=9Cgcc.exe=E2=80=9D compiled for
<code class=3D"docutils literal notranslate"><span class=3D"pre">i686-w64-m=
ingw32</span></code> (or <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">x86_64-w64-mingw32</span></code>) to be present on PATH.</p>
<p><a class=3D"reference external" href=3D"https://bugs.llvm.org/show_bug.c=
gi?id=3D9072">Some tests might fail</a> on
<code class=3D"docutils literal notranslate"><span class=3D"pre">x86_64-w64=
-mingw32</span></code>.</p>
</section>
</section>
<section id=3D"aix">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id112" role=3D"doc-backlink">AIX</a><a class=3D"headerlink" href=3D"=
https://clang.llvm.org/docs/UsersManual.html#aix" title=3D"Link to this hea=
ding">=C2=B6</a></h4>
<section id=3D"toc-data-transformation">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id113" role=3D"doc-backlink">TOC Data Transformation</a><a class=3D"=
headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#toc-data-t=
ransformation" title=3D"Link to this heading">=C2=B6</a></h5>
<p>TOC data transformation is off by default (<code class=3D"docutils liter=
al notranslate"><span class=3D"pre">-mno-tocdata</span></code>).
When <code class=3D"docutils literal notranslate"><span class=3D"pre">-mtoc=
data</span></code> is specified, the TOC data transformation will be applie=
d to
all suitable variables with static storage duration, including static data
members of classes and block-scope static variables (if not marked as excep=
tions,
see further below).</p>
<p>Suitable variables must:</p>
<ul class=3D"simple">
<li><p>have complete types</p></li>
<li><p>be independently generated (i.e., not placed in a pool)</p></li>
<li><p>be at most as large as a pointer</p></li>
<li><p>not be aligned more strictly than a pointer</p></li>
<li><p>not be structs containing flexible array members</p></li>
<li><p>not have internal linkage</p></li>
<li><p>not have aliases</p></li>
<li><p>not have section attributes</p></li>
<li><p>not be thread local storage</p></li>
</ul>
<p>The TOC data transformation results in the variable, not its address,
being placed in the TOC. This eliminates the need to load the address of th=
e
variable from the TOC.</p>
<p>Note:
If the TOC data transformation is applied to a variable whose definition
is imported, the linker will generate fixup code for reading or writing to =
the
variable.</p>
<p>When multiple toc-data options are used, the last option used has the af=
fect.
For example: -mno-tocdata=3Dg5,g1 -mtocdata=3Dg1,g2 -mno-tocdata=3Dg2 -mtoc=
data=3Dg3,g4
results in -mtocdata=3Dg1,g3,g4</p>
<p>Names of variables not having external linkage will be ignored.</p>
<p><strong>Options:</strong></p>
<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-mno-tocdata">
<span class=3D"sig-name descname"><span class=3D"pre">-mno-tocdata</span></=
span><span class=3D"sig-prename descclassname"></span><a class=3D"headerlin=
k" href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-mno-tocda=
ta" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>This is the default behaviour. Only variables explicitly specified w=
ith
<code class=3D"docutils literal notranslate"><span class=3D"pre">-mtocdata=
=3D</span></code> will have the TOC data transformation applied.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-mtocdata">
<span class=3D"sig-name descname"><span class=3D"pre">-mtocdata</span></spa=
n><span class=3D"sig-prename descclassname"></span><a class=3D"headerlink" =
href=3D"https://clang.llvm.org/docs/UsersManual.html#cmdoption-mtocdata" ti=
tle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Apply the TOC data transformation to all suitable variables with sta=
tic
storage duration (including static data members of classes and block-scope
static variables) that are not explicitly specified with <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">-mno-tocdata=3D</span></code=
>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-2">
<span class=3D"sig-name descname"><span class=3D"pre">-mno-tocdata</span></=
span><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D</spa=
n></span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersM=
anual.html#cmdoption-2" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Can be used in conjunction with <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">-mtocdata</span></code> to mark the comma-sepa=
rated
list of external linkage variables, specified using their mangled names, as
exceptions to <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-mtocdata</span></code>.</p>
</dd></dl>

<dl class=3D"std option">
<dt class=3D"sig sig-object std" id=3D"cmdoption-3">
<span class=3D"sig-name descname"><span class=3D"pre">-mtocdata</span></spa=
n><span class=3D"sig-prename descclassname"><span class=3D"pre">=3D</span><=
/span><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#cmdoption-3" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Apply the TOC data transformation to the comma-separated list of ext=
ernal
linkage variables, specified using their mangled names, if they are suitabl=
e.
Emit diagnostics for all unsuitable variables specified.</p>
</dd></dl>

</section>
<section id=3D"default-visibility-export-mapping">
<h5><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id114" role=3D"doc-backlink">Default Visibility Export Mapping</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
default-visibility-export-mapping" title=3D"Link to this heading">=C2=B6</a=
></h5>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">-md=
efault-visibility-export-mapping=3D</span></code> option can be used to con=
trol
mapping of default visibility to an explicit shared object export
(i.e. XCOFF exported visibility). Three values are provided for the option:=
</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-md=
efault-visibility-export-mapping=3Dnone</span></code>: no additional export
information is created for entities with default visibility.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-md=
efault-visibility-export-mapping=3Dexplicit</span></code>: mark entities fo=
r export
if they have explicit (e.g. via an attribute) default visibility from the
source, including RTTI.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">-md=
efault-visibility-export-mapping=3Dall</span></code>: set XCOFF exported vi=
sibility
for all entities with default visibility from any source. This gives a
export behavior similar to ELF platforms where all entities with default
visibility are exported.</p></li>
</ul>
</section>
</section>
</section>
<section id=3D"spir-v-support">
<span id=3D"spir-v"></span><h3><a class=3D"toc-backref" href=3D"https://cla=
ng.llvm.org/docs/UsersManual.html#id115" role=3D"doc-backlink">SPIR-V suppo=
rt</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#spir-v-support" title=3D"Link to this heading">=C2=B6</a></h3>
<p>Clang supports generation of SPIR-V conformant to <a class=3D"reference =
external" href=3D"https://www.khronos.org/registry/OpenCL/specs/3.0-unified=
/html/OpenCL_Env.html">the OpenCL Environment
Specification</a>.</p>
<p>To generate SPIR-V binaries, Clang uses the in-tree LLVM SPIR-V backend.=
</p>
<p>Example usage for OpenCL kernel compilation:</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>spirv32<span class=3D"w"> </span>-c<s=
pan class=3D"w"> </span>test.cl
<span class=3D"gp">$ </span>clang<span class=3D"w"> </span>--target<span cl=
ass=3D"o">=3D</span>spirv64<span class=3D"w"> </span>-c<span class=3D"w"> <=
/span>test.cl
</pre></div>
</div>
</div></blockquote>
<p>Both invocations of Clang will result in the generation of a SPIR-V bina=
ry file
<cite>test.o</cite> for 32 bit and 64 bit respectively. This file can be im=
ported
by an OpenCL driver that support SPIR-V consumption or it can be compiled
further by offline SPIR-V consumer tools.</p>
<p>Converting to SPIR-V produced with the optimization levels other than <c=
ite>-O0</cite> is
currently available as an experimental feature and it is not guaranteed to =
work
in all cases.</p>
<p>Linking is done using <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">spirv-link</span></code> from <a class=3D"reference external=
" href=3D"https://github.com/KhronosGroup/SPIRV-Tools#linker">the SPIRV-Too=
ls project</a>. Similar to other external
linkers, Clang will expect <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">spirv-link</span></code> to be installed separately and to=
 be
present in the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">PATH</span></code> environment variable. Please refer to <a class=3D"r=
eference external" href=3D"https://github.com/KhronosGroup/SPIRV-Tools#buil=
d">the build and
installation instructions</a>.</p>
<blockquote>
<div><div class=3D"highlight-console notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">$ </span>clang<span class=3D"w"> </spa=
n>--target<span class=3D"o">=3D</span>spirv64<span class=3D"w"> </span>test=
1.cl<span class=3D"w"> </span>test2.cl
</pre></div>
</div>
</div></blockquote>
<p>More information about the SPIR-V target settings and supported versions=
 of SPIR-V
format can be found in <a class=3D"reference external" href=3D"https://llvm=
.org/docs/SPIRVUsage.html">the SPIR-V target guide</a>.</p>
</section>
</section>
<section id=3D"clang-cl">
<span id=3D"id12"></span><h2><a class=3D"toc-backref" href=3D"https://clang=
.llvm.org/docs/UsersManual.html#id116" role=3D"doc-backlink">clang-cl</a><a=
 class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#=
clang-cl" title=3D"Link to this heading">=C2=B6</a></h2>
<p>clang-cl is an alternative command-line interface to Clang, designed for
compatibility with the Visual C++ compiler, cl.exe.</p>
<p>To enable clang-cl to find system headers, libraries, and the linker whe=
n run
from the command-line, it should be executed inside a Visual Studio Native =
Tools
Command Prompt or a regular Command Prompt where the environment has been s=
et
up using e.g. <a class=3D"reference external" href=3D"https://msdn.microsof=
t.com/en-us/library/f2ccy3wt.aspx">vcvarsall.bat</a>.</p>
<p>clang-cl can also be used from inside Visual Studio by selecting the LLV=
M
Platform Toolset. The toolset is not part of the installer, but may be inst=
alled
separately from the
<a class=3D"reference external" href=3D"https://marketplace.visualstudio.co=
m/items?itemName=3DLLVMExtensions.llvm-toolchain">Visual Studio Marketplace=
</a>.
To use the toolset, select a project in Solution Explorer, open its Propert=
y
Page (Alt+F7), and in the =E2=80=9CGeneral=E2=80=9D section of =E2=80=9CCon=
figuration Properties=E2=80=9D
change =E2=80=9CPlatform Toolset=E2=80=9D to LLVM.  Doing so enables an add=
itional Property
Page for selecting the clang-cl executable to use for builds.</p>
<p>To use the toolset with MSBuild directly, invoke it with e.g.
<code class=3D"docutils literal notranslate"><span class=3D"pre">/p:Platfor=
mToolset=3DLLVM</span></code>. This allows trying out the clang-cl toolchai=
n
without modifying your project files.</p>
<p>It=E2=80=99s also possible to point MSBuild at clang-cl without changing=
 toolset by
passing <code class=3D"docutils literal notranslate"><span class=3D"pre">/p=
:CLToolPath=3Dc:\llvm\bin</span> <span class=3D"pre">/p:CLToolExe=3Dclang-c=
l.exe</span></code>.</p>
<p>When using CMake and the Visual Studio generators, the toolset can be se=
t with the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>-T</span></code> flag:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"n">cmake</span> <span class=3D"o">-</span>=
<span class=3D"n">G</span><span class=3D"s2">"Visual Studio 16 2019"</span>=
 <span class=3D"o">-</span><span class=3D"n">T</span> <span class=3D"n">LLV=
M</span> <span class=3D"o">..</span>
</pre></div>
</div>
</div></blockquote>
<p>When using CMake with the Ninja generator, set the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">CMAKE_C_COMPILER</span></code> =
and
<code class=3D"docutils literal notranslate"><span class=3D"pre">CMAKE_CXX_=
COMPILER</span></code> variables to clang-cl:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"n">cmake</span> <span class=3D"o">-</span>=
<span class=3D"n">GNinja</span> <span class=3D"o">-</span><span class=3D"n"=
>DCMAKE_C_COMPILER</span><span class=3D"o">=3D</span><span class=3D"s2">"c:=
/Program Files (x86)/LLVM/bin/clang-cl.exe"</span>
    <span class=3D"o">-</span><span class=3D"n">DCMAKE_CXX_COMPILER</span><=
span class=3D"o">=3D</span><span class=3D"s2">"c:/Program Files (x86)/LLVM/=
bin/clang-cl.exe"</span> <span class=3D"o">..</span>
</pre></div>
</div>
</div></blockquote>
<section id=3D"id13">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id117" role=3D"doc-backlink">Command-Line Options</a><a class=3D"hea=
derlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#id13" title=
=3D"Link to this heading">=C2=B6</a></h3>
<p>To be compatible with cl.exe, clang-cl supports most of the same command=
-line
options. Those options can start with either <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">/</span></code> or <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">-</span></code>. It also suppor=
ts
some of Clang=E2=80=99s core options, such as the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">-W</span></code> options.</p>
<p>Options that are known to clang-cl, but not currently supported, are ign=
ored
with a warning. For example:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"n">clang</span><span class=3D"o">-</span><=
span class=3D"n">cl</span><span class=3D"o">.</span><span class=3D"n">exe</=
span><span class=3D"p">:</span> <span class=3D"n">warning</span><span class=
=3D"p">:</span> <span class=3D"n">argument</span> <span class=3D"n">unused<=
/span> <span class=3D"n">during</span> <span class=3D"n">compilation</span>=
<span class=3D"p">:</span> <span class=3D"s1">'/AI'</span>
</pre></div>
</div>
</div></blockquote>
<p>To suppress warnings about unused arguments, use the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">-Qunused-arguments</span></co=
de> option.</p>
<p>Options that are not known to clang-cl will be ignored by default. Use t=
he
<code class=3D"docutils literal notranslate"><span class=3D"pre">-Werror=3D=
unknown-argument</span></code> option in order to treat them as errors. If =
these
options are spelled with a leading <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">/</span></code>, they will be mistaken for a filen=
ame:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"n">clang</span><span class=3D"o">-</span><=
span class=3D"n">cl</span><span class=3D"o">.</span><span class=3D"n">exe</=
span><span class=3D"p">:</span> <span class=3D"n">error</span><span class=
=3D"p">:</span> <span class=3D"n">no</span> <span class=3D"n">such</span> <=
span class=3D"n">file</span> <span class=3D"ow">or</span> <span class=3D"n"=
>directory</span><span class=3D"p">:</span> <span class=3D"s1">'/foobar'</s=
pan>
</pre></div>
</div>
</div></blockquote>
<p>Please <a class=3D"reference external" href=3D"https://github.com/llvm/l=
lvm-project/issues/new?labels=3Dclang-cl">file a bug</a>
for any valid cl.exe flags that clang-cl does not understand.</p>
<p>Execute <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>clang-cl</span> <span class=3D"pre">/?</span></code> to see a list of supp=
orted options:</p>
<blockquote>
<div><div class=3D"highlight-default notranslate"><div class=3D"highlight">=
<pre><span></span>CL.EXE COMPATIBILITY OPTIONS:
  /?                      Display available options
  /arch:&lt;value&gt;           Set architecture for code generation
  /Brepro-                Emit an object file which cannot be reproduced ov=
er time
  /Brepro                 Emit an object file which can be reproduced over =
time
  /clang:&lt;arg&gt;            Pass &lt;arg&gt; to the clang driver
  /C                      Don't discard comments when preprocessing
  /c                      Compile only
  /d1PP                   Retain macro definitions in /E mode
  /d1reportAllClassLayout Dump record layout information
  /diagnostics:caret      Enable caret and column diagnostics (on by defaul=
t)
  /diagnostics:classic    Disable column and caret diagnostics
  /diagnostics:column     Disable caret diagnostics but keep column info
  /D &lt;macro[=3Dvalue]&gt;      Define macro
  /EH&lt;value&gt;              Exception handling model
  /EP                     Disable linemarker output and preprocess to stdou=
t
  /execution-charset:&lt;value&gt;
                          Runtime encoding, supports only UTF-8
  /E                      Preprocess to stdout
  /FA                     Output assembly code file during compilation
  /Fa&lt;file or directory&gt;  Output assembly code to this file during co=
mpilation (with /FA)
  /Fe&lt;file or directory&gt;  Set output executable file or directory (en=
ds in / or \)
  /FI &lt;value&gt;             Include file before parsing
  /Fi&lt;file&gt;               Set preprocess output file name (with /P)
  /Fo&lt;file or directory&gt;  Set output object file, or directory (ends =
in / or \) (with /c)
  /fp:except-
  /fp:except
  /fp:fast
  /fp:precise
  /fp:strict
  /Fp&lt;filename&gt;           Set pch filename (with /Yc and /Yu)
  /GA                     Assume thread-local variables are defined in the =
executable
  /Gd                     Set __cdecl as a default calling convention
  /GF-                    Disable string pooling
  /GF                     Enable string pooling (default)
  /GR-                    Disable emission of RTTI data
  /Gregcall               Set __regcall as a default calling convention
  /GR                     Enable emission of RTTI data
  /Gr                     Set __fastcall as a default calling convention
  /GS-                    Disable buffer security check
  /GS                     Enable buffer security check (default)
  /Gs                     Use stack probes (default)
  /Gs&lt;value&gt;              Set stack probe size (default 4096)
  /guard:&lt;value&gt;          Enable Control Flow Guard with /guard:cf,
                          or only the table with /guard:cf,nochecks.
                          Enable EH Continuation Guard with /guard:ehcont
  /Gv                     Set __vectorcall as a default calling convention
  /Gw-                    Don't put each data item in its own section
  /Gw                     Put each data item in its own section
  /GX-                    Disable exception handling
  /GX                     Enable exception handling
  /Gy-                    Don't put each function in its own section (defau=
lt)
  /Gy                     Put each function in its own section
  /Gz                     Set __stdcall as a default calling convention
  /help                   Display available options
  /imsvc &lt;dir&gt;            Add directory to system include search path=
, as if part of %INCLUDE%
  /I &lt;dir&gt;                Add directory to include search path
  /J                      Make char type unsigned
  /LDd                    Create debug DLL
  /LD                     Create DLL
  /link &lt;options&gt;         Forward options to the linker
  /MDd                    Use DLL debug run-time
  /MD                     Use DLL run-time
  /MTd                    Use static debug run-time
  /MT                     Use static run-time
  /O0                     Disable optimization
  /O1                     Optimize for size  (same as /Og     /Os /Oy /Ob2 =
/GF /Gy)
  /O2                     Optimize for speed (same as /Og /Oi /Ot /Oy /Ob2 =
/GF /Gy)
  /Ob0                    Disable function inlining
  /Ob1                    Only inline functions which are (explicitly or im=
plicitly) marked inline
  /Ob2                    Inline functions as deemed beneficial by the comp=
iler
  /Ob3                    Same as /Ob2
  /Od                     Disable optimization
  /Og                     No effect
  /Oi-                    Disable use of builtin functions
  /Oi                     Enable use of builtin functions
  /Os                     Optimize for size (like clang -Os)
  /Ot                     Optimize for speed (like clang -O3)
  /Ox                     Deprecated (same as /Og /Oi /Ot /Oy /Ob2); use /O=
2 instead
  /Oy-                    Disable frame pointer omission (x86 only, default=
)
  /Oy                     Enable frame pointer omission (x86 only)
  /O&lt;flags&gt;               Set multiple /O flags at once; e.g. '/O2y-'=
 for '/O2 /Oy-'
  /o &lt;file or directory&gt;  Set output file or directory (ends in / or =
\)
  /P                      Preprocess to file
  /Qvec-                  Disable the loop vectorization passes
  /Qvec                   Enable the loop vectorization passes
  /showFilenames-         Don't print the name of each compiled file (defau=
lt)
  /showFilenames          Print the name of each compiled file
  /showIncludes           Print info about included files to stderr
  /source-charset:&lt;value&gt; Source encoding, supports only UTF-8
  /std:&lt;value&gt;            Language standard to compile for
  /TC                     Treat all source files as C
  /Tc &lt;filename&gt;          Specify a C source file
  /TP                     Treat all source files as C++
  /Tp &lt;filename&gt;          Specify a C++ source file
  /utf-8                  Set source and runtime encoding to UTF-8 (default=
)
  /U &lt;macro&gt;              Undefine macro
  /vd&lt;value&gt;              Control vtordisp placement
  /vmb                    Use a best-case representation method for member =
pointers
  /vmg                    Use a most-general representation for member poin=
ters
  /vmm                    Set the default most-general representation to mu=
ltiple inheritance
  /vms                    Set the default most-general representation to si=
ngle inheritance
  /vmv                    Set the default most-general representation to vi=
rtual inheritance
  /volatile:iso           Volatile loads and stores have standard semantics
  /volatile:ms            Volatile loads and stores have acquire and releas=
e semantics
  /W0                     Disable all warnings
  /W1                     Enable -Wall
  /W2                     Enable -Wall
  /W3                     Enable -Wall
  /W4                     Enable -Wall and -Wextra
  /Wall                   Enable -Weverything
  /WX-                    Do not treat warnings as errors
  /WX                     Treat warnings as errors
  /w                      Disable all warnings
  /X                      Don't add %INCLUDE% to the include search path
  /Y-                     Disable precompiled headers, overrides /Yc and /Y=
u
  /Yc&lt;filename&gt;           Generate a pch file for all code up to and =
including &lt;filename&gt;
  /Yu&lt;filename&gt;           Load a pch file and use it instead of all c=
ode up to and including &lt;filename&gt;
  /Z7                     Enable CodeView debug information in object files
  /Zc:char8_t             Enable C++20 char8_t type
  /Zc:char8_t-            Disable C++20 char8_t type
  /Zc:dllexportInlines-   Don't dllexport/dllimport inline member functions=
 of dllexport/import classes
  /Zc:dllexportInlines    dllexport/dllimport inline member functions of dl=
lexport/import classes (default)
  /Zc:sizedDealloc-       Disable C++14 sized global deallocation functions
  /Zc:sizedDealloc        Enable C++14 sized global deallocation functions
  /Zc:strictStrings       Treat string literals as const
  /Zc:threadSafeInit-     Disable thread-safe initialization of static vari=
ables
  /Zc:threadSafeInit      Enable thread-safe initialization of static varia=
bles
  /Zc:trigraphs-          Disable trigraphs (default)
  /Zc:trigraphs           Enable trigraphs
  /Zc:twoPhase-           Disable two-phase name lookup in templates
  /Zc:twoPhase            Enable two-phase name lookup in templates
  /Zi                     Alias for /Z7. Does not produce PDBs.
  /Zl                     Don't mention any default libraries in the object=
 file
  /Zp                     Set the default maximum struct packing alignment =
to 1
  /Zp&lt;value&gt;              Specify the default maximum struct packing =
alignment
  /Zs                     Run the preprocessor, parser and semantic analysi=
s stages

OPTIONS:
  -###                    Print (but do not run) the commands to run for th=
is compilation
  --analyze               Run the static analyzer
  -faddrsig               Emit an address-significance table
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fblocks                Enable the 'blocks' language feature
  -fcf-protection=3D&lt;value&gt; Instrument control-flow architecture prot=
ection. Options: return, branch, full, none.
  -fcf-protection         Enable cf-protection in 'full' mode
  -fcolor-diagnostics     Use colors in diagnostics
  -fcomplete-member-pointers
                          Require member pointer base types to be complete =
if they would be significant under the Microsoft ABI
  -fcoverage-mapping      Generate coverage mapping to enable code coverage=
 analysis
  -fcrash-diagnostics-dir=3D&lt;dir&gt;
                          Put crash-report files in &lt;dir&gt;
  -fdebug-macro           Emit macro debug information
  -fdelayed-template-parsing
                          Parse templated function definitions at the end o=
f the translation unit
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -flto=3D&lt;value&gt;           Set LTO mode to either 'full' or 'thin'
  -flto                   Enable LTO in 'full' mode
  -fmerge-all-constants   Allow merging of constants
  -fmodule-file=3D&lt;module_name&gt;=3D&lt;module-file&gt;
                          Use the specified module file that provides the m=
odule &lt;module_name&gt;
  -fmodule-header=3D&lt;header&gt;
                          Build &lt;header&gt; as a C++20 header unit
  -fmodule-output=3D&lt;path&gt;
                          Save intermediate module file results when compil=
ing a standard C++ module unit.
  -fms-compatibility-version=3D&lt;value&gt;
                          Dot-separated value representing the Microsoft co=
mpiler version
                          number to report in _MSC_VER (0 =3D don't define =
it; default is same value as installed cl.exe, or 1933)
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by =
the Microsoft compiler
  -fmsc-version=3D&lt;value&gt;   Microsoft compiler version number to repo=
rt in _MSC_VER
                          (0 =3D don't define it; default is same value as =
installed cl.exe, or 1933)
  -fno-addrsig            Don't emit an address-significance table
  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a spe=
cific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be co=
mplete if they would be significant under the Microsoft ABI
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source fi=
les and a script for reproduction during a clang crash
  -fno-debug-macro        Do not emit macro debug information
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom=
 operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanit=
izer
  -fno-sanitize-address-use-odr-indicator
                           Disable ODR indicator globals
  -fno-sanitize-ignorelist Don't use ignorelist file for sanitizers
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for c=
ross-DSO calls.
  -fno-sanitize-coverage=3D&lt;value&gt;
                          Disable specified features of coverage instrument=
ation for Sanitizers
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySani=
tizer
  -fno-sanitize-recover=3D&lt;value&gt;
                          Disable recovery for specified sanitizers
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in Thre=
adSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in Th=
readSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSa=
nitizer
  -fno-sanitize-trap=3D&lt;value&gt;
                          Disable trapping for specified sanitizers
  -fno-standalone-debug   Limit debug information produced to reduce size o=
f debug binary
  -fno-strict-aliasing    Disable optimizations based on strict aliasing ru=
les (default)
  -fobjc-runtime=3D&lt;value&gt;  Specify the target Objective-C runtime ki=
nd and version
  -fprofile-exclude-files=3D&lt;value&gt;
                          Instrument only functions from files where names =
don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=3D&lt;value&gt;
                          Instrument only functions from files where names =
match any regex separated by a semi-colon
  -fprofile-generate=3D&lt;dirname&gt;
                          Generate instrumented code to collect execution c=
ounts into a raw profile file in the directory specified by the argument. T=
he filename uses default_%m.profraw pattern
                          (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate
                          Generate instrumented code to collect execution c=
ounts into default_%m.profraw file
                          (overridden by '=3D' form of option or LLVM_PROFI=
LE_FILE env var)
  -fprofile-instr-generate=3D&lt;file_name_pattern&gt;
                          Generate instrumented code to collect execution c=
ounts into the file whose name pattern is specified as the argument
                          (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution c=
ounts into default.profraw file
                          (overridden by '=3D' form of option or LLVM_PROFI=
LE_FILE env var)
  -fprofile-instr-use=3D&lt;value&gt;
                          Use instrumentation data for coverage testing or =
profile-guided optimization
  -fprofile-use=3D&lt;value&gt;
                          Use instrumentation data for profile-guided optim=
ization
  -fprofile-remapping-file=3D&lt;file&gt;
                          Use the remappings described in &lt;file&gt; to m=
atch the profile data against names in the program
  -fprofile-list=3D&lt;file&gt;
                          Filename defining the list of functions/files to =
instrument
  -fsanitize-address-field-padding=3D&lt;value&gt;
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in Addres=
sSanitizer
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom =
operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=3D&lt;mode&gt;
                          Select the mode of detecting stack use-after-retu=
rn in AddressSanitizer: never | runtime (default) | always
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSaniti=
zer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR v=
iolation reports in partially sanitized programs at the cost of an increase=
 in binary size
  -fsanitize-ignorelist=3D&lt;value&gt;
                          Path to ignorelist file for sanitizers
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cr=
oss-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type sig=
nature checks
  -fsanitize-coverage=3D&lt;value&gt;
                          Specify the type of coverage instrumentation for =
Sanitizers
  -fsanitize-hwaddress-abi=3D&lt;value&gt;
                          Select the HWAddressSanitizer ABI to target (inte=
rceptor or platform, default interceptor)
  -fsanitize-memory-track-origins=3D&lt;value&gt;
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanit=
izer
  -fsanitize-recover=3D&lt;value&gt;
                          Enable recovery for specified sanitizers
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in Threa=
dSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in Thr=
eadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSan=
itizer (default)
  -fsanitize-trap=3D&lt;value&gt; Enable trapping for specified sanitizers
  -fsanitize-undefined-strip-path-components=3D&lt;number&gt;
                          Strip (or keep only, if negative) a given number =
of path components when emitting check metadata.
  -fsanitize=3D&lt;check&gt;      Turn on runtime checks for various forms =
of undefined or suspicious
                          behavior. See user manual for available checks
  -fsplit-lto-unit        Enables splitting of the LTO unit.
  -fstandalone-debug      Emit full debug info for all types used by the pr=
ogram
  -fstrict-aliasing       Enable optimizations based on strict aliasing rul=
es
  -fsyntax-only           Run the preprocessor, parser and semantic analysi=
s stages
  -fwhole-program-vtables Enables whole-program vtable optimization. Requir=
es -flto
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -miamcu                 Use Intel MCU ABI
  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM's o=
ption processing
  -nobuiltininc           Disable builtin #include directories
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -R&lt;remark&gt;              Enable the specified remark
  --target=3D&lt;value&gt;        Generate code for the given target
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -W&lt;warning&gt;             Enable the specified warning
  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler
  -Xclangas &lt;arg&gt;         Pass &lt;arg&gt; to the clang assembler
</pre></div>
</div>
</div></blockquote>
<section id=3D"the-clang-option">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id118" role=3D"doc-backlink">The /clang: Option</a><a class=3D"heade=
rlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#the-clang-optio=
n" title=3D"Link to this heading">=C2=B6</a></h4>
<p>When clang-cl is run with a set of <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">/clang:&lt;arg&gt;</span></code> options, it wi=
ll gather all
of the <code class=3D"docutils literal notranslate"><span class=3D"pre">&lt=
;arg&gt;</span></code> arguments and process them as if they were passed to=
 the clang
driver. This mechanism allows you to pass flags that are not exposed in the
clang-cl options or flags that have a different meaning when passed to the =
clang
driver. Regardless of where they appear in the command line, the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">/clang:</span></code=
>
arguments are treated as if they were passed at the end of the clang-cl com=
mand
line.</p>
</section>
<section id=3D"the-zc-dllexportinlines-option">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id119" role=3D"doc-backlink">The /Zc:dllexportInlines- Option</a><a =
class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#t=
he-zc-dllexportinlines-option" title=3D"Link to this heading">=C2=B6</a></h=
4>
<p>This causes the class-level <cite>dllexport</cite> and <cite>dllimport</=
cite> attributes to not apply
to inline member functions, as they otherwise would. For example, in the co=
de
below <cite>S::foo()</cite> would normally be defined and exported by the D=
LL, but when
using the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
/Zc:dllexportInlines-</span></code> flag it is not:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"k">struct</span><span class=3D"w"> </span><span class=
=3D"nc">__declspec</span><span class=3D"p">(</span><span class=3D"n">dllexp=
ort</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"n">S</span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"nf">foo</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This has the benefit that the compiler doesn=E2=80=99t need to emit a de=
finition of
<cite>S::foo()</cite> in every translation unit where the declaration is in=
cluded, as it
would otherwise do to ensure there=E2=80=99s a definition in the DLL even i=
f it=E2=80=99s not
used there. If the declaration occurs in a header file that=E2=80=99s widel=
y used, this
can save significant compilation time and output size. It also reduces the
number of functions exported by the DLL similarly to what
<code class=3D"docutils literal notranslate"><span class=3D"pre">-fvisibili=
ty-inlines-hidden</span></code> does for shared objects on ELF and Mach-O.
Since the function declaration comes with an inline definition, users of th=
e
library can use that definition directly instead of importing it from the D=
LL.</p>
<p>Note that the Microsoft Visual C++ compiler does not support this option=
, and
if code in a DLL is compiled with <code class=3D"docutils literal notransla=
te"><span class=3D"pre">/Zc:dllexportInlines-</span></code>, the code using=
 the
DLL must be compiled in the same way so that it doesn=E2=80=99t attempt to =
dllimport
the inline member functions. The reverse scenario should generally work tho=
ugh:
a DLL compiled without this flag (such as a system library compiled with Vi=
sual
C++) can be referenced from code compiled using the flag, meaning that the
referencing code will use the inline definitions instead of importing them =
from
the DLL.</p>
<p>Also note that like when using <code class=3D"docutils literal notransla=
te"><span class=3D"pre">-fvisibility-inlines-hidden</span></code>, the addr=
ess of
<cite>S::foo()</cite> will be different inside and outside the DLL, breakin=
g the C/C++
standard requirement that functions have a unique address.</p>
<p>The flag does not apply to explicit class template instantiation definit=
ions or
declarations, as those are typically used to explicitly provide a single
definition in a DLL, (dllexported instantiation definition) or to signal th=
at
the definition is available elsewhere (dllimport instantiation declaration)=
. It
also doesn=E2=80=99t apply to inline members with static local variables, t=
o ensure
that the same instance of the variable is used inside and outside the DLL.<=
/p>
<p>Using this flag can cause problems when inline functions that would othe=
rwise
be dllexported refer to internal symbols of a DLL. For example:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kt">void</span><span class=3D"w"> </span><span class=
=3D"nf">internal</span><span class=3D"p">();</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>__declspec</span><span class=3D"p">(</span><span class=3D"n">dllimport</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">S<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">void</span><span class=3D"w">=
 </span><span class=3D"nf">foo</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </span><span cl=
ass=3D"n">internal</span><span class=3D"p">();</span><span class=3D"w"> </s=
pan><span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Normally, references to <cite>S::foo()</cite> would use the definition i=
n the DLL from
which it was exported, and which presumably also has the definition of
<cite>internal()</cite>. However, when using <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">/Zc:dllexportInlines-</span></code>, the=
 inline
definition of <cite>S::foo()</cite> is used directly, resulting in a link e=
rror since
<cite>internal()</cite> is not available. Even worse, if there is an inline=
 definition of
<cite>internal()</cite> containing a static local variable, we will now ref=
er to a
different instance of that variable than in the DLL:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre><span>=
</span><span class=3D"kr">inline</span><span class=3D"w"> </span><span clas=
s=3D"kt">int</span><span class=3D"w"> </span><span class=3D"nf">internal</s=
pan><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D"p">=
{</span><span class=3D"w"> </span><span class=3D"k">static</span><span clas=
s=3D"w"> </span><span class=3D"kt">int</span><span class=3D"w"> </span><spa=
n class=3D"n">x</span><span class=3D"p">;</span><span class=3D"w"> </span><=
span class=3D"k">return</span><span class=3D"w"> </span><span class=3D"n">x=
</span><span class=3D"o">++</span><span class=3D"p">;</span><span class=3D"=
w"> </span><span class=3D"p">}</span>

<span class=3D"k">struct</span><span class=3D"w"> </span><span class=3D"nc"=
>__declspec</span><span class=3D"p">(</span><span class=3D"n">dllimport</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">S<=
/span><span class=3D"w"> </span><span class=3D"p">{</span>
<span class=3D"w">  </span><span class=3D"kt">int</span><span class=3D"w"> =
</span><span class=3D"nf">foo</span><span class=3D"p">()</span><span class=
=3D"w"> </span><span class=3D"p">{</span><span class=3D"w"> </span><span cl=
ass=3D"k">return</span><span class=3D"w"> </span><span class=3D"n">internal=
</span><span class=3D"p">();</span><span class=3D"w"> </span><span class=3D=
"p">}</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>This could lead to very subtle bugs. Using <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">-fvisibility-inlines-hidden</span></cod=
e> can
lead to the same issue. To avoid it in this case, make <cite>S::foo()</cite=
> or
<cite>internal()</cite> non-inline, or mark them <cite>dllimport/dllexport<=
/cite> explicitly.</p>
</section>
<section id=3D"finding-clang-runtime-libraries">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id120" role=3D"doc-backlink">Finding Clang runtime libraries</a><a c=
lass=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManual.html#fi=
nding-clang-runtime-libraries" title=3D"Link to this heading">=C2=B6</a></h=
4>
<p>clang-cl supports several features that require runtime library support:=
</p>
<ul class=3D"simple">
<li><p>Address Sanitizer (ASan): <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-fsanitize=3Daddress</span></code></p></li>
<li><p>Undefined Behavior Sanitizer (UBSan): <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">-fsanitize=3Dundefined</span></code></p>=
</li>
<li><p>Code coverage: <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">-fprofile-instr-generate</span> <span class=3D"pre">-fcoverage-=
mapping</span></code></p></li>
<li><p>Profile Guided Optimization (PGO): <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">-fprofile-generate</span></code></p></li>
<li><p>Certain math operations (int128 division) require the builtins libra=
ry</p></li>
</ul>
<p>In order to use these features, the user must link the right runtime lib=
raries
into their program. These libraries are distributed alongside Clang in the
library resource directory. Clang searches for the resource directory by
searching relative to the Clang executable. For example, if LLVM is install=
ed
in <code class=3D"docutils literal notranslate"><span class=3D"pre">C:\Prog=
ram</span> <span class=3D"pre">Files\LLVM</span></code>, then the profile r=
untime library will be located
at the path
<code class=3D"docutils literal notranslate"><span class=3D"pre">C:\Program=
</span> <span class=3D"pre">Files\LLVM\lib\clang\11.0.0\lib\windows\clang_r=
t.profile-x86_64.lib</span></code>.</p>
<p>For UBSan, PGO, and coverage, Clang will emit object files that auto-lin=
k the
appropriate runtime library, but the user generally needs to help the linke=
r
(whether it is <code class=3D"docutils literal notranslate"><span class=3D"=
pre">lld-link.exe</span></code> or MSVC <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">link.exe</span></code>) find the library reso=
urce
directory. Using the example installation above, this would mean passing
<code class=3D"docutils literal notranslate"><span class=3D"pre">/LIBPATH:C=
:\Program</span> <span class=3D"pre">Files\LLVM\lib\clang\11.0.0\lib\window=
s</span></code> to the linker.
If the user links the program with the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">clang</span></code> or <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">clang-cl</span></code> drivers, t=
he
driver will pass this flag for them.</p>
<p>The auto-linking can be disabled with -fno-rtlib-defaultlib. If that fla=
g is
used, pass the complete flag to required libraries as described for ASan be=
low.</p>
<p>If the linker cannot find the appropriate library, it will emit an error=
 like
this:</p>
<div class=3D"highlight-default notranslate"><div class=3D"highlight"><pre>=
<span></span>$ clang-cl -c -fsanitize=3Dundefined t.cpp

$ lld-link t.obj -dll
lld-link: error: could not open 'clang_rt.ubsan_standalone-x86_64.lib': no =
such file or directory
lld-link: error: could not open 'clang_rt.ubsan_standalone_cxx-x86_64.lib':=
 no such file or directory

$ link t.obj -dll -nologo
LINK : fatal error LNK1104: cannot open file 'clang_rt.ubsan_standalone-x86=
_64.lib'
</pre></div>
</div>
<p>To fix the error, add the appropriate <code class=3D"docutils literal no=
translate"><span class=3D"pre">/libpath:</span></code> flag to the link lin=
e.</p>
<p>For ASan, as of this writing, the user is also responsible for linking a=
gainst
the correct ASan libraries.</p>
<p>If the user is using the dynamic CRT (<code class=3D"docutils literal no=
translate"><span class=3D"pre">/MD</span></code>), then they should add
<code class=3D"docutils literal notranslate"><span class=3D"pre">clang_rt.a=
san_dynamic-x86_64.lib</span></code> to the link line as a regular input. F=
or
other architectures, replace x86_64 with the appropriate name here and belo=
w.</p>
<p>If the user is using the static CRT (<code class=3D"docutils literal not=
ranslate"><span class=3D"pre">/MT</span></code>), then different runtimes a=
re used
to produce DLLs and EXEs. To link a DLL, pass
<code class=3D"docutils literal notranslate"><span class=3D"pre">clang_rt.a=
san_dll_thunk-x86_64.lib</span></code>. To link an EXE, pass
<code class=3D"docutils literal notranslate"><span class=3D"pre">-wholearch=
ive:clang_rt.asan-x86_64.lib</span></code>.</p>
</section>
<section id=3D"windows-system-headers-and-library-lookup">
<h4><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id121" role=3D"doc-backlink">Windows System Headers and Library Look=
up</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/UsersManu=
al.html#windows-system-headers-and-library-lookup" title=3D"Link to this he=
ading">=C2=B6</a></h4>
<p>clang-cl uses a set of different approaches to locate the right system l=
ibraries
to link against when building code.  The Windows environment uses libraries=
 from
three distinct sources:</p>
<ol class=3D"arabic simple">
<li><p>Windows SDK</p></li>
<li><p>UCRT (Universal C Runtime)</p></li>
<li><p>Visual C++ Tools (VCRuntime)</p></li>
</ol>
<p>The Windows SDK provides the import libraries and headers required to bu=
ild
programs against the Windows system packages.  Underlying the Windows SDK i=
s the
UCRT, the universal C runtime.</p>
<p>This difference is best illustrated by the various headers that one woul=
d find
in the different categories.  The WinSDK would contain headers such as
<cite>WinSock2.h</cite> which is part of the Windows API surface, providing=
 the Windows
socketing interfaces for networking.  UCRT provides the C library headers,
including e.g. <cite>stdio.h</cite>.  Finally, the Visual C++ tools provide=
s the underlying
Visual C++ Runtime headers such as <cite>stdint.h</cite> or <cite>crtdefs.h=
</cite>.</p>
<p>There are various controls that allow the user control over where clang-=
cl will
locate these headers.  The default behaviour for the Windows SDK and UCRT i=
s as
follows:</p>
<ol class=3D"arabic">
<li><p>Consult the command line.</p>
<blockquote>
<div><p>Anything the user specifies is always given precedence.  The follow=
ing
extensions are part of the clang-cl toolset:</p>
<ul class=3D"simple">
<li><p><cite>/winsysroot:</cite></p></li>
</ul>
<p>The <cite>/winsysroot:</cite> is used as an equivalent to <cite>-sysroot=
</cite> on Unix
environments.  It allows the control of an alternate location to be treated
as a system root.  When specified, it will be used as the root where the
<cite>Windows Kits</cite> is located.</p>
<ul class=3D"simple">
<li><p><cite>/winsdkversion:</cite></p></li>
<li><p><cite>/winsdkdir:</cite></p></li>
</ul>
<p>If <cite>/winsysroot:</cite> is not specified, the <cite>/winsdkdir:</ci=
te> argument is consulted
as a location to identify where the Windows SDK is located.  Contrary to
<cite>/winsysroot:</cite>, <cite>/winsdkdir:</cite> is expected to be the c=
omplete path rather
than a root to locate <cite>Windows Kits</cite>.</p>
<p>The <cite>/winsdkversion:</cite> flag allows the user to specify a versi=
on identifier
for the SDK to prefer.  When this is specified, no additional validation is
performed and this version is preferred.  If the version is not specified,
the highest detected version number will be used.</p>
</div></blockquote>
</li>
<li><p>Consult the environment.</p>
<blockquote>
<div><p>TODO: This is not yet implemented.</p>
<p>This will consult the environment variables:</p>
<ul class=3D"simple">
<li><p><cite>WindowsSdkDir</cite></p></li>
<li><p><cite>UCRTVersion</cite></p></li>
</ul>
</div></blockquote>
</li>
<li><p>Fallback to the registry.</p>
<blockquote>
<div><p>If no arguments are used to indicate where the SDK is present, and =
the
compiler is running on Windows, the registry is consulted to locate the
installation.</p>
</div></blockquote>
</li>
</ol>
<p>The Visual C++ Toolset has a slightly more elaborate mechanism for detec=
tion.</p>
<ol class=3D"arabic">
<li><p>Consult the command line.</p>
<blockquote>
<div><ul class=3D"simple">
<li><p><cite>/winsysroot:</cite></p></li>
</ul>
<p>The <cite>/winsysroot:</cite> is used as an equivalent to <cite>-sysroot=
</cite> on Unix
environments.  It allows the control of an alternate location to be treated
as a system root.  When specified, it will be used as the root where the
<cite>VC</cite> directory is located.</p>
<ul class=3D"simple">
<li><p><cite>/vctoolsdir:</cite></p></li>
<li><p><cite>/vctoolsversion:</cite></p></li>
</ul>
<p>If <cite>/winsysroot:</cite> is not specified, the <cite>/vctoolsdir:</c=
ite> argument is consulted
as a location to identify where the Visual C++ Tools are located.  If
<cite>/vctoolsversion:</cite> is specified, that version is preferred, othe=
rwise, the
highest version detected is used.</p>
</div></blockquote>
</li>
<li><p>Consult the environment.</p>
<blockquote>
<div><ul>
<li><p><cite>/external:[VARIABLE]</cite></p>
<p>This specifies a user identified environment variable which is treated a=
s
a path delimiter (<cite>;</cite>) separated list of paths to map into <cite=
>-imsvc</cite>
arguments which are treated as <cite>-isystem</cite>.</p>
</li>
<li><p><cite>INCLUDE</cite> and <cite>EXTERNAL_INCLUDE</cite></p>
<p>The path delimiter (<cite>;</cite>) separated list of paths will be mapp=
ed to
<cite>-imsvc</cite> arguments which are treated as <cite>-isystem</cite>.</=
p>
</li>
<li><p><cite>LIB</cite> (indirectly)</p>
<p>The linker <cite>link.exe</cite> or <cite>lld-link.exe</cite> will honou=
r the environment
variable <cite>LIB</cite> which is a path delimiter (<cite>;</cite>) set of=
 paths to consult for
the import libraries to use when linking the final target.</p>
</li>
</ul>
<p>The following environment variables will be consulted and used to form p=
aths
to validate and load content from as appropriate:</p>
<blockquote>
<div><ul class=3D"simple">
<li><p><cite>VCToolsInstallDir</cite></p></li>
<li><p><cite>VCINSTALLDIR</cite></p></li>
<li><p><cite>Path</cite></p></li>
</ul>
</div></blockquote>
</div></blockquote>
</li>
<li><p>Consult <cite>ISetupConfiguration</cite> [Windows Only]</p>
<blockquote>
<div><p>Assuming that the toolchain is built with <cite>USE_MSVC_SETUP_API<=
/cite> defined and
is running on Windows, the Visual Studio COM interface <cite>ISetupConfigur=
ation</cite>
will be used to locate the installation of the MSVC toolset.</p>
</div></blockquote>
</li>
<li><p>Fallback to the registry [DEPRECATED]</p>
<blockquote>
<div><p>The registry information is used to help locate the installation as=
 a final
fallback.  This is only possible for pre-VS2017 installations and is
considered deprecated.</p>
</div></blockquote>
</li>
</ol>
</section>
</section>
<section id=3D"restrictions-and-limitations-compared-to-clang">
<h3><a class=3D"toc-backref" href=3D"https://clang.llvm.org/docs/UsersManua=
l.html#id122" role=3D"doc-backlink">Restrictions and Limitations compared t=
o Clang</a><a class=3D"headerlink" href=3D"https://clang.llvm.org/docs/User=
sManual.html#restrictions-and-limitations-compared-to-clang" title=3D"Link =
to this heading">=C2=B6</a></h3>
<p>Strict aliasing (TBAA) is always off by default in clang-cl whereas in c=
lang,
strict aliasing is turned on by default for all optimization levels. For mo=
re
details, see <a class=3D"reference internal" href=3D"https://clang.llvm.org=
/docs/UsersManual.html#strict-aliasing"><span class=3D"std std-ref">Strict =
aliasing</span></a>.</p>
</section>
</section>
</section>


      </div>
      <div class=3D"bottomnav" role=3D"navigation" aria-label=3D"bottom nav=
igation">
     =20
        <p>
        =C2=AB&nbsp;&nbsp;<a href=3D"https://clang.llvm.org/docs/ReleaseNot=
es.html">Clang 21.0.0git (In-Progress)  Release Notes</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a class=3D"uplink" href=3D"https://clang.llvm.org/docs/index.html"=
>Contents</a>
        &nbsp;&nbsp;::&nbsp;&nbsp;
        <a href=3D"https://clang.llvm.org/docs/Toolchain.html">Assembling a=
 Complete Toolchain</a>&nbsp;&nbsp;=C2=BB
        </p>

      </div>

    <div class=3D"footer" role=3D"contentinfo">
    =C2=A9 Copyright 2007-2025, The Clang Team.
      Created using <a href=3D"https://www.sphinx-doc.org/">Sphinx</a> 7.2.=
6.
    </div>
 =20
</body></html>
------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/graphviz.css?v=eafc0fe6

@charset "utf-8";
=0A
------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/haiku.css?v=e491ac2d

@charset "utf-8";
=0A
------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://clang.llvm.org/docs/_static/pygments.css?v=649a27d8

@charset "utf-8";
=0A
------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-7dc4df03-360c-4433-85c1-0300686c25a6@mhtml.blink

@charset "utf-8";

#ytp-caption-window-container .ytp-caption-segment { cursor: text !importan=
t; user-select: text !important; font-family: -apple-system, BlinkMacSystem=
Font, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sa=
ns", "Helvetica Neue", sans-serif !important; }

.caption-visual-line { display: flex !important; align-items: stretch !impo=
rtant; }

.captions-text .caption-visual-line:first-of-type::after { content: "=E2=A3=
=BF=E2=A3=BF"; background-color: rgba(0, 0, 0, 0.72); display: inline-block=
; vertical-align: top; opacity: 0; transition: opacity 0.7s ease-in-out; }

.captions-text:hover .caption-visual-line:first-of-type::after { opacity: 1=
; }

.ytp-pause-overlay { display: none !important; }

.ytp-expand-pause-overlay .caption-window { display: block !important; }
------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-40d8e674-9d40-4913-ad4f-8e607a28f2cb@mhtml.blink

@charset "utf-8";

#mttContainer { white-space: pre-line; left: 0px !important; top: 0px !impo=
rtant; width: 1000px !important; margin: 0px 0px 0px -500px !important; pos=
ition: fixed !important; z-index: 100000200 !important; background: none !i=
mportant; pointer-events: none !important; display: inline-block !important=
; visibility: visible !important; }

.tippy-box[data-theme~=3D"custom"], .tippy-content * { white-space: pre-lin=
e; font-size: 18px !important; text-align: center !important; overflow-wrap=
: break-word !important; color: rgb(255, 255, 255) !important; font-family:=
 -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Can=
tarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif !important;=
 }

.tippy-box[data-theme~=3D"custom"] { border: 1px solid rgba(255, 255, 255, =
0); max-width: 600px !important; backdrop-filter: blur(4px) !important; bac=
kground-color: rgba(0, 0, 0, 0.72) !important; }

[data-tippy-root] { display: inline-block !important; visibility: visible !=
important; position: absolute !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"top"] > .tippy-arrow:=
:before { border-top-color: rgba(0, 0, 0, 0.72) !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"bottom"] > .tippy-arr=
ow::before { border-bottom-color: rgba(0, 0, 0, 0.72) !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"left"] > .tippy-arrow=
::before { border-left-color: rgba(0, 0, 0, 0.72) !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"right"] > .tippy-arro=
w::before { border-right-color: rgba(0, 0, 0, 0.72) !important; }

.mtt-highlight { background-color: rgba(33, 220, 109, 0.25) !important; pos=
ition: absolute !important; z-index: 100000100 !important; pointer-events: =
none !important; display: inline !important; border-radius: 3px !important;=
 }

.mtt-image { width: 580px !important; border-radius: 3px !important; }

.ocr_text_div { position: absolute; opacity: 0.5; border: 2px solid cornflo=
werblue; color: transparent !important; background: none !important; border=
-radius: 3px !important; }
------MultipartBoundary--0MBlYDy425CNNY3jBhjisJzZ3e2syWUkFOiUpsBLb8------
